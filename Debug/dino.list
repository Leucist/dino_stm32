
dino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08004e40  08004e40  00014e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff8  08004ff8  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08004ff8  08004ff8  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ff8  08004ff8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ff8  08004ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ffc  08004ffc  00014ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08005000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200000a0  080050a0  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  080050a0  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b635  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d39  00000000  00000000  0002b748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0002d488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000080d  00000000  00000000  0002df78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026df4  00000000  00000000  0002e785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000087dc  00000000  00000000  00055579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec639  00000000  00000000  0005dd55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000397c  00000000  00000000  0014a390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0014dd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e28 	.word	0x08004e28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08004e28 	.word	0x08004e28

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <_Z5Delaym>:
#include "stm32l4xx_hal.h"
#include "main.h"
#include "lcd.h"

void Delay(uint32_t nCount)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000278:	e002      	b.n	8000280 <_Z5Delaym+0x10>
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	3b01      	subs	r3, #1
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d1f9      	bne.n	800027a <_Z5Delaym+0xa>
}
 8000286:	bf00      	nop
 8000288:	bf00      	nop
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr

08000294 <_Z9lcd_delayv>:
void lcd_delay(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	Delay(200);
 8000298:	20c8      	movs	r0, #200	; 0xc8
 800029a:	f7ff ffe9 	bl	8000270 <_Z5Delaym>
}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <_Z7lcd_cmdc>:

void lcd_cmd(char out_char)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 80002ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002b6:	629a      	str	r2, [r3, #40]	; 0x28

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 80002b8:	4b64      	ldr	r3, [pc, #400]	; (800044c <_Z7lcd_cmdc+0x1a8>)
 80002ba:	2280      	movs	r2, #128	; 0x80
 80002bc:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 80002be:	4b64      	ldr	r3, [pc, #400]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80002c0:	2220      	movs	r2, #32
 80002c2:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 80002c4:	4b62      	ldr	r3, [pc, #392]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80002c6:	2210      	movs	r2, #16
 80002c8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 80002ca:	4b61      	ldr	r3, [pc, #388]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80002cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002d0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 80002d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002da:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80002dc:	f7ff ffda 	bl	8000294 <_Z9lcd_delayv>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80002e0:	4b5a      	ldr	r3, [pc, #360]	; (800044c <_Z7lcd_cmdc+0x1a8>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a59      	ldr	r2, [pc, #356]	; (800044c <_Z7lcd_cmdc+0x1a8>)
 80002e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ea:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	091b      	lsrs	r3, r3, #4
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	f003 0301 	and.w	r3, r3, #1
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d003      	beq.n	8000302 <_Z7lcd_cmdc+0x5e>
 80002fa:	4b55      	ldr	r3, [pc, #340]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80002fc:	2220      	movs	r2, #32
 80002fe:	619a      	str	r2, [r3, #24]
 8000300:	e003      	b.n	800030a <_Z7lcd_cmdc+0x66>
 8000302:	4b53      	ldr	r3, [pc, #332]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 8000304:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000308:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	095b      	lsrs	r3, r3, #5
 800030e:	b2db      	uxtb	r3, r3
 8000310:	f003 0301 	and.w	r3, r3, #1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d003      	beq.n	8000320 <_Z7lcd_cmdc+0x7c>
 8000318:	4b4d      	ldr	r3, [pc, #308]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 800031a:	2210      	movs	r2, #16
 800031c:	619a      	str	r2, [r3, #24]
 800031e:	e003      	b.n	8000328 <_Z7lcd_cmdc+0x84>
 8000320:	4b4b      	ldr	r3, [pc, #300]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 8000322:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000326:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	099b      	lsrs	r3, r3, #6
 800032c:	b2db      	uxtb	r3, r3
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	2b00      	cmp	r3, #0
 8000334:	d004      	beq.n	8000340 <_Z7lcd_cmdc+0x9c>
 8000336:	4b46      	ldr	r3, [pc, #280]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 8000338:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800033c:	619a      	str	r2, [r3, #24]
 800033e:	e003      	b.n	8000348 <_Z7lcd_cmdc+0xa4>
 8000340:	4b43      	ldr	r3, [pc, #268]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 8000342:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000346:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034c:	2b00      	cmp	r3, #0
 800034e:	da05      	bge.n	800035c <_Z7lcd_cmdc+0xb8>
 8000350:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000358:	619a      	str	r2, [r3, #24]
 800035a:	e004      	b.n	8000366 <_Z7lcd_cmdc+0xc2>
 800035c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000360:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000364:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000366:	f7ff ff95 	bl	8000294 <_Z9lcd_delayv>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800036a:	4b38      	ldr	r3, [pc, #224]	; (800044c <_Z7lcd_cmdc+0x1a8>)
 800036c:	2280      	movs	r2, #128	; 0x80
 800036e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000370:	4b37      	ldr	r3, [pc, #220]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 8000372:	2220      	movs	r2, #32
 8000374:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000376:	4b36      	ldr	r3, [pc, #216]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 8000378:	2210      	movs	r2, #16
 800037a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 800037c:	4b34      	ldr	r3, [pc, #208]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 800037e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000382:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000384:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800038c:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 800038e:	f7ff ff81 	bl	8000294 <_Z9lcd_delayv>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000392:	4b2e      	ldr	r3, [pc, #184]	; (800044c <_Z7lcd_cmdc+0x1a8>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a2d      	ldr	r2, [pc, #180]	; (800044c <_Z7lcd_cmdc+0x1a8>)
 8000398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800039c:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	f003 0301 	and.w	r3, r3, #1
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d003      	beq.n	80003b0 <_Z7lcd_cmdc+0x10c>
 80003a8:	4b29      	ldr	r3, [pc, #164]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80003aa:	2220      	movs	r2, #32
 80003ac:	619a      	str	r2, [r3, #24]
 80003ae:	e003      	b.n	80003b8 <_Z7lcd_cmdc+0x114>
 80003b0:	4b27      	ldr	r3, [pc, #156]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80003b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003b6:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	085b      	lsrs	r3, r3, #1
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d003      	beq.n	80003ce <_Z7lcd_cmdc+0x12a>
 80003c6:	4b22      	ldr	r3, [pc, #136]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80003c8:	2210      	movs	r2, #16
 80003ca:	619a      	str	r2, [r3, #24]
 80003cc:	e003      	b.n	80003d6 <_Z7lcd_cmdc+0x132>
 80003ce:	4b20      	ldr	r3, [pc, #128]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80003d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003d4:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	089b      	lsrs	r3, r3, #2
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d004      	beq.n	80003ee <_Z7lcd_cmdc+0x14a>
 80003e4:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80003e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003ea:	619a      	str	r2, [r3, #24]
 80003ec:	e003      	b.n	80003f6 <_Z7lcd_cmdc+0x152>
 80003ee:	4b18      	ldr	r3, [pc, #96]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80003f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80003f4:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	08db      	lsrs	r3, r3, #3
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	f003 0301 	and.w	r3, r3, #1
 8000400:	2b00      	cmp	r3, #0
 8000402:	d005      	beq.n	8000410 <_Z7lcd_cmdc+0x16c>
 8000404:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800040c:	619a      	str	r2, [r3, #24]
 800040e:	e004      	b.n	800041a <_Z7lcd_cmdc+0x176>
 8000410:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000414:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000418:	619a      	str	r2, [r3, #24]

	lcd_delay();
 800041a:	f7ff ff3b 	bl	8000294 <_Z9lcd_delayv>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <_Z7lcd_cmdc+0x1a8>)
 8000420:	2280      	movs	r2, #128	; 0x80
 8000422:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 8000426:	2220      	movs	r2, #32
 8000428:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 800042c:	2210      	movs	r2, #16
 800042e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000430:	4b07      	ldr	r3, [pc, #28]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 8000432:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000436:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000438:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800043c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000440:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	48000800 	.word	0x48000800
 8000450:	48000400 	.word	0x48000400

08000454 <_Z11lcd_char_cpc>:

void lcd_char_cp(char out_char)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 800045e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000468:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800046c:	6153      	str	r3, [r2, #20]

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 800046e:	4b64      	ldr	r3, [pc, #400]	; (8000600 <_Z11lcd_char_cpc+0x1ac>)
 8000470:	2280      	movs	r2, #128	; 0x80
 8000472:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000474:	4b63      	ldr	r3, [pc, #396]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 8000476:	2220      	movs	r2, #32
 8000478:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 800047a:	4b62      	ldr	r3, [pc, #392]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 800047c:	2210      	movs	r2, #16
 800047e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000480:	4b60      	ldr	r3, [pc, #384]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 8000482:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000486:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000488:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800048c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000490:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000492:	f7ff feff 	bl	8000294 <_Z9lcd_delayv>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000496:	4b5a      	ldr	r3, [pc, #360]	; (8000600 <_Z11lcd_char_cpc+0x1ac>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a59      	ldr	r2, [pc, #356]	; (8000600 <_Z11lcd_char_cpc+0x1ac>)
 800049c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004a0:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	091b      	lsrs	r3, r3, #4
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	f003 0301 	and.w	r3, r3, #1
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d003      	beq.n	80004b8 <_Z11lcd_char_cpc+0x64>
 80004b0:	4b54      	ldr	r3, [pc, #336]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80004b2:	2220      	movs	r2, #32
 80004b4:	619a      	str	r2, [r3, #24]
 80004b6:	e003      	b.n	80004c0 <_Z11lcd_char_cpc+0x6c>
 80004b8:	4b52      	ldr	r3, [pc, #328]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80004ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80004be:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	095b      	lsrs	r3, r3, #5
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d003      	beq.n	80004d6 <_Z11lcd_char_cpc+0x82>
 80004ce:	4b4d      	ldr	r3, [pc, #308]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80004d0:	2210      	movs	r2, #16
 80004d2:	619a      	str	r2, [r3, #24]
 80004d4:	e003      	b.n	80004de <_Z11lcd_char_cpc+0x8a>
 80004d6:	4b4b      	ldr	r3, [pc, #300]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80004d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80004dc:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	099b      	lsrs	r3, r3, #6
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d004      	beq.n	80004f6 <_Z11lcd_char_cpc+0xa2>
 80004ec:	4b45      	ldr	r3, [pc, #276]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80004ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004f2:	619a      	str	r2, [r3, #24]
 80004f4:	e003      	b.n	80004fe <_Z11lcd_char_cpc+0xaa>
 80004f6:	4b43      	ldr	r3, [pc, #268]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80004f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80004fc:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80004fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000502:	2b00      	cmp	r3, #0
 8000504:	da05      	bge.n	8000512 <_Z11lcd_char_cpc+0xbe>
 8000506:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800050a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800050e:	619a      	str	r2, [r3, #24]
 8000510:	e004      	b.n	800051c <_Z11lcd_char_cpc+0xc8>
 8000512:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000516:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800051a:	619a      	str	r2, [r3, #24]

	lcd_delay();
 800051c:	f7ff feba 	bl	8000294 <_Z9lcd_delayv>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000520:	4b37      	ldr	r3, [pc, #220]	; (8000600 <_Z11lcd_char_cpc+0x1ac>)
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000526:	4b37      	ldr	r3, [pc, #220]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 8000528:	2220      	movs	r2, #32
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 800052c:	4b35      	ldr	r3, [pc, #212]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 800052e:	2210      	movs	r2, #16
 8000530:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000532:	4b34      	ldr	r3, [pc, #208]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 8000534:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000538:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 800053a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800053e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000542:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000544:	f7ff fea6 	bl	8000294 <_Z9lcd_delayv>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000548:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <_Z11lcd_char_cpc+0x1ac>)
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	4a2c      	ldr	r2, [pc, #176]	; (8000600 <_Z11lcd_char_cpc+0x1ac>)
 800054e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000552:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	2b00      	cmp	r3, #0
 800055c:	d003      	beq.n	8000566 <_Z11lcd_char_cpc+0x112>
 800055e:	4b29      	ldr	r3, [pc, #164]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 8000560:	2220      	movs	r2, #32
 8000562:	619a      	str	r2, [r3, #24]
 8000564:	e003      	b.n	800056e <_Z11lcd_char_cpc+0x11a>
 8000566:	4b27      	ldr	r3, [pc, #156]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 8000568:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800056c:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	085b      	lsrs	r3, r3, #1
 8000572:	b2db      	uxtb	r3, r3
 8000574:	f003 0301 	and.w	r3, r3, #1
 8000578:	2b00      	cmp	r3, #0
 800057a:	d003      	beq.n	8000584 <_Z11lcd_char_cpc+0x130>
 800057c:	4b21      	ldr	r3, [pc, #132]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 800057e:	2210      	movs	r2, #16
 8000580:	619a      	str	r2, [r3, #24]
 8000582:	e003      	b.n	800058c <_Z11lcd_char_cpc+0x138>
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 8000586:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800058a:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	089b      	lsrs	r3, r3, #2
 8000590:	b2db      	uxtb	r3, r3
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d004      	beq.n	80005a4 <_Z11lcd_char_cpc+0x150>
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 800059c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005a0:	619a      	str	r2, [r3, #24]
 80005a2:	e003      	b.n	80005ac <_Z11lcd_char_cpc+0x158>
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80005a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80005aa:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	08db      	lsrs	r3, r3, #3
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d005      	beq.n	80005c6 <_Z11lcd_char_cpc+0x172>
 80005ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c2:	619a      	str	r2, [r3, #24]
 80005c4:	e004      	b.n	80005d0 <_Z11lcd_char_cpc+0x17c>
 80005c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005ce:	619a      	str	r2, [r3, #24]

	lcd_delay();
 80005d0:	f7ff fe60 	bl	8000294 <_Z9lcd_delayv>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <_Z11lcd_char_cpc+0x1ac>)
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80005dc:	2220      	movs	r2, #32
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80005e2:	2210      	movs	r2, #16
 80005e4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80005e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80005ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	48000800 	.word	0x48000800
 8000604:	48000400 	.word	0x48000400

08000608 <_Z10lcd_out_cpPc>:

void lcd_out_cp(char *out_char)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	while(*out_char)
 8000610:	e008      	b.n	8000624 <_Z10lcd_out_cpPc+0x1c>
	{
		lcd_char_cp(*out_char++);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	1c5a      	adds	r2, r3, #1
 8000616:	607a      	str	r2, [r7, #4]
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff1a 	bl	8000454 <_Z11lcd_char_cpc>
        lcd_delay();
 8000620:	f7ff fe38 	bl	8000294 <_Z9lcd_delayv>
	while(*out_char)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1f2      	bne.n	8000612 <_Z10lcd_out_cpPc+0xa>
	}

}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <_Z8lcd_initccc>:


void lcd_init(char bits, char font, char lines)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	4603      	mov	r3, r0
 800063e:	71fb      	strb	r3, [r7, #7]
 8000640:	460b      	mov	r3, r1
 8000642:	71bb      	strb	r3, [r7, #6]
 8000644:	4613      	mov	r3, r2
 8000646:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8000648:	20fa      	movs	r0, #250	; 0xfa
 800064a:	f002 f8c3 	bl	80027d4 <HAL_Delay>
		lcd_cmd(_RETURN_HOME);
 800064e:	2002      	movs	r0, #2
 8000650:	f7ff fe28 	bl	80002a4 <_Z7lcd_cmdc>
    HAL_Delay(50);
 8000654:	2032      	movs	r0, #50	; 0x32
 8000656:	f002 f8bd 	bl	80027d4 <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 800065a:	79fa      	ldrb	r2, [r7, #7]
 800065c:	79bb      	ldrb	r3, [r7, #6]
 800065e:	4313      	orrs	r3, r2
 8000660:	b2da      	uxtb	r2, r3
 8000662:	797b      	ldrb	r3, [r7, #5]
 8000664:	4313      	orrs	r3, r2
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f043 0320 	orr.w	r3, r3, #32
 800066c:	b2db      	uxtb	r3, r3
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fe18 	bl	80002a4 <_Z7lcd_cmdc>
    HAL_Delay(50);
 8000674:	2032      	movs	r0, #50	; 0x32
 8000676:	f002 f8ad 	bl	80027d4 <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 800067a:	2006      	movs	r0, #6
 800067c:	f7ff fe12 	bl	80002a4 <_Z7lcd_cmdc>
    HAL_Delay(50);
 8000680:	2032      	movs	r0, #50	; 0x32
 8000682:	f002 f8a7 	bl	80027d4 <HAL_Delay>
    lcd_cmd(0x0E);
 8000686:	200e      	movs	r0, #14
 8000688:	f7ff fe0c 	bl	80002a4 <_Z7lcd_cmdc>
    HAL_Delay(50);
 800068c:	2032      	movs	r0, #50	; 0x32
 800068e:	f002 f8a1 	bl	80027d4 <HAL_Delay>
    lcd_cmd(0x0C);
 8000692:	200c      	movs	r0, #12
 8000694:	f7ff fe06 	bl	80002a4 <_Z7lcd_cmdc>
    HAL_Delay(50);
 8000698:	2032      	movs	r0, #50	; 0x32
 800069a:	f002 f89b 	bl	80027d4 <HAL_Delay>
    lcd_cmd(0x01);
 800069e:	2001      	movs	r0, #1
 80006a0:	f7ff fe00 	bl	80002a4 <_Z7lcd_cmdc>
    HAL_Delay(100);
 80006a4:	2064      	movs	r0, #100	; 0x64
 80006a6:	f002 f895 	bl	80027d4 <HAL_Delay>
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <_Z10lcd_gotoxyhh>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4603      	mov	r3, r0
 80006ba:	460a      	mov	r2, r1
 80006bc:	71fb      	strb	r3, [r7, #7]
 80006be:	4613      	mov	r3, r2
 80006c0:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d106      	bne.n	80006d6 <_Z10lcd_gotoxyhh+0x24>
	{
		lcd_cmd(0x80 + (column - 1));
 80006c8:	79bb      	ldrb	r3, [r7, #6]
 80006ca:	337f      	adds	r3, #127	; 0x7f
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fde8 	bl	80002a4 <_Z7lcd_cmdc>
 80006d4:	e008      	b.n	80006e8 <_Z10lcd_gotoxyhh+0x36>
	}
	else if(row == 2)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d105      	bne.n	80006e8 <_Z10lcd_gotoxyhh+0x36>
	{
		lcd_cmd(0xC0 + (column - 1));
 80006dc:	79bb      	ldrb	r3, [r7, #6]
 80006de:	3b41      	subs	r3, #65	; 0x41
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff fdde 	bl	80002a4 <_Z7lcd_cmdc>
	}
    HAL_Delay(5);
 80006e8:	2005      	movs	r0, #5
 80006ea:	f002 f873 	bl	80027d4 <HAL_Delay>

}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_Z8lcd_charhhc>:

void lcd_char(unsigned char row, unsigned char column, char out_char)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	4603      	mov	r3, r0
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	460b      	mov	r3, r1
 8000702:	71bb      	strb	r3, [r7, #6]
 8000704:	4613      	mov	r3, r2
 8000706:	717b      	strb	r3, [r7, #5]
	lcd_gotoxy(row, column);
 8000708:	79ba      	ldrb	r2, [r7, #6]
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4611      	mov	r1, r2
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffcf 	bl	80006b2 <_Z10lcd_gotoxyhh>
	lcd_char_cp(out_char);
 8000714:	797b      	ldrb	r3, [r7, #5]
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff fe9c 	bl	8000454 <_Z11lcd_char_cpc>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_Z9lcd_printhhPc>:

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	603a      	str	r2, [r7, #0]
 800072e:	71fb      	strb	r3, [r7, #7]
 8000730:	460b      	mov	r3, r1
 8000732:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000734:	79ba      	ldrb	r2, [r7, #6]
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ffb9 	bl	80006b2 <_Z10lcd_gotoxyhh>
	lcd_out_cp(out_char);
 8000740:	6838      	ldr	r0, [r7, #0]
 8000742:	f7ff ff61 	bl	8000608 <_Z10lcd_out_cpPc>
    HAL_Delay(5);
 8000746:	2005      	movs	r0, #5
 8000748:	f002 f844 	bl	80027d4 <HAL_Delay>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <_Z9lcd_clearv>:
void lcd_clear(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

	lcd_cmd(_CLEAR);
 8000758:	2001      	movs	r0, #1
 800075a:	f7ff fda3 	bl	80002a4 <_Z7lcd_cmdc>
    HAL_Delay(5);
 800075e:	2005      	movs	r0, #5
 8000760:	f002 f838 	bl	80027d4 <HAL_Delay>

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}

08000768 <_ZN10GameObjectC1EPchh>:
    char* texture_;
    uint8_t xPos_;
    uint8_t yPos_;

public:
	GameObject(char* texture, uint8_t xPos, uint8_t yPos)
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	4611      	mov	r1, r2
 8000774:	461a      	mov	r2, r3
 8000776:	460b      	mov	r3, r1
 8000778:	71fb      	strb	r3, [r7, #7]
 800077a:	4613      	mov	r3, r2
 800077c:	71bb      	strb	r3, [r7, #6]
    {
 800077e:	4a09      	ldr	r2, [pc, #36]	; (80007a4 <_ZN10GameObjectC1EPchh+0x3c>)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	601a      	str	r2, [r3, #0]
    	texture_ = texture;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	605a      	str	r2, [r3, #4]
    	xPos_ = xPos;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	721a      	strb	r2, [r3, #8]
		yPos_ = yPos;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	79ba      	ldrb	r2, [r7, #6]
 8000794:	725a      	strb	r2, [r3, #9]
    }
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	4618      	mov	r0, r3
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	08004ecc 	.word	0x08004ecc

080007a8 <_ZN10GameObject4getXEv>:

	// Defines virtual default destructor
	virtual ~GameObject() = default;

	uint8_t getX(){
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
    	return xPos_;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	7a1b      	ldrb	r3, [r3, #8]
	}
 80007b4:	4618      	mov	r0, r3
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <_ZN10GameObject4getYEv>:

	uint8_t getY(){
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
        return yPos_;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7a5b      	ldrb	r3, [r3, #9]
	}
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <_ZN10GameObject10getTextureEv>:

    char* getTexture(){
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
        return texture_;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	685b      	ldr	r3, [r3, #4]
	}
 80007e4:	4618      	mov	r0, r3
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <_ZN10GameObject4drawEv>:

    virtual void draw(){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
    	lcd_print(yPos_, xPos_, texture_);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7a58      	ldrb	r0, [r3, #9]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	7a19      	ldrb	r1, [r3, #8]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	461a      	mov	r2, r3
 8000806:	f7ff ff8d 	bl	8000724 <_Z9lcd_printhhPc>
	}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <_ZN10GameObject4moveEhh>:

protected:
    void move(uint8_t diffX, uint8_t diffY) {
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
 800081a:	460b      	mov	r3, r1
 800081c:	70fb      	strb	r3, [r7, #3]
 800081e:	4613      	mov	r3, r2
 8000820:	70bb      	strb	r3, [r7, #2]
		xPos_ += diffX;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	7a1a      	ldrb	r2, [r3, #8]
 8000826:	78fb      	ldrb	r3, [r7, #3]
 8000828:	4413      	add	r3, r2
 800082a:	b2da      	uxtb	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	721a      	strb	r2, [r3, #8]
		yPos_ += diffY;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	7a5a      	ldrb	r2, [r3, #9]
 8000834:	78bb      	ldrb	r3, [r7, #2]
 8000836:	4413      	add	r3, r2
 8000838:	b2da      	uxtb	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	725a      	strb	r2, [r3, #9]
	}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <_ZN10GameObject10setTextureEPc>:

    void setTexture(char* new_texture) {
 800084a:	b480      	push	{r7}
 800084c:	b083      	sub	sp, #12
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
 8000852:	6039      	str	r1, [r7, #0]
//    	std::strcpy(texture_, new_texture);
    	this->texture_ = new_texture;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	683a      	ldr	r2, [r7, #0]
 8000858:	605a      	str	r2, [r3, #4]
    }
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
	...

08000868 <_ZN10GameObjectD1Ev>:
	virtual ~GameObject() = default;
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <_ZN10GameObjectD1Ev+0x1c>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4618      	mov	r0, r3
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	08004ecc 	.word	0x08004ecc

08000888 <_ZN10GameObjectD0Ev>:
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ffe9 	bl	8000868 <_ZN10GameObjectD1Ev>
 8000896:	210c      	movs	r1, #12
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f003 f8ab 	bl	80039f4 <_ZdlPvj>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <_ZN8ObstacleC1EPc>:


class Obstacle : public GameObject {
public:
    // Constructor - uses the GameObject constructor to set initial position
	Obstacle(char* texture) : GameObject(texture, 15, 2) {}
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	2302      	movs	r3, #2
 80008b6:	220f      	movs	r2, #15
 80008b8:	6839      	ldr	r1, [r7, #0]
 80008ba:	f7ff ff55 	bl	8000768 <_ZN10GameObjectC1EPchh>
 80008be:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <_ZN8ObstacleC1EPc+0x28>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	08004eb8 	.word	0x08004eb8

080008d4 <_ZN8Obstacle4moveEv>:

    // Call the move function from GameObject
    void move(){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
        GameObject::move(-1, 0);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	21ff      	movs	r1, #255	; 0xff
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ff95 	bl	8000812 <_ZN10GameObject4moveEhh>
    }
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <_ZN8Obstacle8collidesE10GameObject>:

    bool collides(GameObject obj)
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
    {
    	if ((this->getX() == obj.getX()) && (this->getY() == obj.getY())) {		// if collides
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff53 	bl	80007a8 <_ZN10GameObject4getXEv>
 8000902:	4603      	mov	r3, r0
 8000904:	461c      	mov	r4, r3
 8000906:	6838      	ldr	r0, [r7, #0]
 8000908:	f7ff ff4e 	bl	80007a8 <_ZN10GameObject4getXEv>
 800090c:	4603      	mov	r3, r0
 800090e:	429c      	cmp	r4, r3
 8000910:	d10d      	bne.n	800092e <_ZN8Obstacle8collidesE10GameObject+0x3e>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff53 	bl	80007c0 <_ZN10GameObject4getYEv>
 800091a:	4603      	mov	r3, r0
 800091c:	461c      	mov	r4, r3
 800091e:	6838      	ldr	r0, [r7, #0]
 8000920:	f7ff ff4e 	bl	80007c0 <_ZN10GameObject4getYEv>
 8000924:	4603      	mov	r3, r0
 8000926:	429c      	cmp	r4, r3
 8000928:	d101      	bne.n	800092e <_ZN8Obstacle8collidesE10GameObject+0x3e>
 800092a:	2301      	movs	r3, #1
 800092c:	e000      	b.n	8000930 <_ZN8Obstacle8collidesE10GameObject+0x40>
 800092e:	2300      	movs	r3, #0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <_ZN8Obstacle8collidesE10GameObject+0x48>
    		return true;
 8000934:	2301      	movs	r3, #1
 8000936:	e000      	b.n	800093a <_ZN8Obstacle8collidesE10GameObject+0x4a>
    	}
    	else { 																	// if not
    		return false;
 8000938:	2300      	movs	r3, #0
    	}
    }
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	bd90      	pop	{r4, r7, pc}
	...

08000944 <_ZN5ScoreC1Ehh>:

public:
	static const uint8_t SCORE_LIMIT = 99;
	uint8_t MAX_SCORE;

	Score(uint8_t xPos, uint8_t yPos) : GameObject("00", xPos, yPos) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	460b      	mov	r3, r1
 800094e:	70fb      	strb	r3, [r7, #3]
 8000950:	4613      	mov	r3, r2
 8000952:	70bb      	strb	r3, [r7, #2]
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	78bb      	ldrb	r3, [r7, #2]
 8000958:	78fa      	ldrb	r2, [r7, #3]
 800095a:	4908      	ldr	r1, [pc, #32]	; (800097c <_ZN5ScoreC1Ehh+0x38>)
 800095c:	f7ff ff04 	bl	8000768 <_ZN10GameObjectC1EPchh>
 8000960:	4a07      	ldr	r2, [pc, #28]	; (8000980 <_ZN5ScoreC1Ehh+0x3c>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	601a      	str	r2, [r3, #0]
		score = 0;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2200      	movs	r2, #0
 800096a:	729a      	strb	r2, [r3, #10]
		MAX_SCORE = 0;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2200      	movs	r2, #0
 8000970:	72da      	strb	r2, [r3, #11]
	}
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	08004e40 	.word	0x08004e40
 8000980:	08004ea4 	.word	0x08004ea4

08000984 <_ZN5Score3getEv>:

	int get() {
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
		return score;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	7a9b      	ldrb	r3, [r3, #10]
	}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <_ZN5Score2upEv>:

	void up() {
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
		char scoreFromInt[3];
		score++;										// rises current score
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7a9b      	ldrb	r3, [r3, #10]
 80009a8:	3301      	adds	r3, #1
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	729a      	strb	r2, [r3, #10]
		std::sprintf(scoreFromInt, "%02d", score);		// converts score int -> char*
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	7a9b      	ldrb	r3, [r3, #10]
 80009b4:	461a      	mov	r2, r3
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	4907      	ldr	r1, [pc, #28]	; (80009d8 <_ZN5Score2upEv+0x3c>)
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 fa31 	bl	8003e24 <siprintf>
		this->setTexture(scoreFromInt);					// updates score texture
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f107 020c 	add.w	r2, r7, #12
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ff3d 	bl	800084a <_ZN10GameObject10setTextureEPc>
	}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	08004e44 	.word	0x08004e44

080009dc <_ZN5Score17calculateMaxScoreEv>:

	void calculateMaxScore() {
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
		this->MAX_SCORE = this->MAX_SCORE > this->score ? this->MAX_SCORE : this->score;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	7ada      	ldrb	r2, [r3, #11]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	7a9b      	ldrb	r3, [r3, #10]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d902      	bls.n	80009f6 <_ZN5Score17calculateMaxScoreEv+0x1a>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	7adb      	ldrb	r3, [r3, #11]
 80009f4:	e001      	b.n	80009fa <_ZN5Score17calculateMaxScoreEv+0x1e>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	7a9b      	ldrb	r3, [r3, #10]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	72d3      	strb	r3, [r2, #11]
	}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
	...

08000a0c <_ZN5Score5resetEv>:

	void reset() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
		score = 0;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	729a      	strb	r2, [r3, #10]
//		char zeroScore[] = "00";
		this->setTexture("00");
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4903      	ldr	r1, [pc, #12]	; (8000a2c <_ZN5Score5resetEv+0x20>)
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff13 	bl	800084a <_ZN10GameObject10setTextureEPc>
	}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	08004e40 	.word	0x08004e40

08000a30 <_ZN4DinoC1EPA8_chh>:
    char textures_[2][8];

public:
    static const uint8_t FLY_TIME = 3;

    Dino(char textures[2][8], uint8_t xPos, uint8_t yPos) : GameObject(textures[1], xPos, yPos) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	460b      	mov	r3, r1
 8000a40:	71fb      	strb	r3, [r7, #7]
 8000a42:	4613      	mov	r3, r2
 8000a44:	71bb      	strb	r3, [r7, #6]
 8000a46:	68f8      	ldr	r0, [r7, #12]
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	f103 0108 	add.w	r1, r3, #8
 8000a4e:	79bb      	ldrb	r3, [r7, #6]
 8000a50:	79fa      	ldrb	r2, [r7, #7]
 8000a52:	f7ff fe89 	bl	8000768 <_ZN10GameObjectC1EPchh>
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <_ZN4DinoC1EPA8_chh+0x70>)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	601a      	str	r2, [r3, #0]
//    	textures_ = textures;
    	for (int i = 0; i < 2; i++) {
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	e010      	b.n	8000a84 <_ZN4DinoC1EPA8_chh+0x54>
			std::memcpy(textures_[i], textures[i], sizeof(textures[i]));
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3301      	adds	r3, #1
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	1d18      	adds	r0, r3, #4
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	4413      	add	r3, r2
 8000a76:	2208      	movs	r2, #8
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f003 fb06 	bl	800408a <memcpy>
    	for (int i = 0; i < 2; i++) {
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	ddeb      	ble.n	8000a62 <_ZN4DinoC1EPA8_chh+0x32>
		}
    	delay = 0;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	729a      	strb	r2, [r3, #10]
    	frame = 0;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2200      	movs	r2, #0
 8000a94:	72da      	strb	r2, [r3, #11]
      }
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	08004e90 	.word	0x08004e90

08000aa4 <_ZN4Dino4jumpEv>:

    void jump(){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
            GameObject::move(0, -1);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	22ff      	movs	r2, #255	; 0xff
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fead 	bl	8000812 <_ZN10GameObject4moveEhh>
            delay = FLY_TIME;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2203      	movs	r2, #3
 8000abc:	729a      	strb	r2, [r3, #10]
        }
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <_ZN4Dino4fallEv>:

    void fall(){
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
    	if(delay > 0){
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	7a9b      	ldrb	r3, [r3, #10]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d006      	beq.n	8000ae4 <_ZN4Dino4fallEv+0x1e>
    		delay--;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	7a9b      	ldrb	r3, [r3, #10]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	729a      	strb	r2, [r3, #10]
    	}
    	else {
    		GameObject::move(0, 1);
    	}
    }
 8000ae2:	e005      	b.n	8000af0 <_ZN4Dino4fallEv+0x2a>
    		GameObject::move(0, 1);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fe91 	bl	8000812 <_ZN10GameObject4moveEhh>
    }
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <_ZN4Dino4drawEv>:

    void draw() {
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
    	lcd_print(this->getY(), this->getX(), textures_[frame++]);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fe5c 	bl	80007c0 <_ZN10GameObject4getYEv>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	461c      	mov	r4, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fe4a 	bl	80007a8 <_ZN10GameObject4getXEv>
 8000b14:	4603      	mov	r3, r0
 8000b16:	4618      	mov	r0, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	7adb      	ldrb	r3, [r3, #11]
 8000b1c:	1c5a      	adds	r2, r3, #1
 8000b1e:	b2d1      	uxtb	r1, r2
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	72d1      	strb	r1, [r2, #11]
 8000b24:	3301      	adds	r3, #1
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4601      	mov	r1, r0
 8000b32:	4620      	mov	r0, r4
 8000b34:	f7ff fdf6 	bl	8000724 <_Z9lcd_printhhPc>
    	if (frame > 1) frame = 0;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	7adb      	ldrb	r3, [r3, #11]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d902      	bls.n	8000b46 <_ZN4Dino4drawEv+0x4e>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	72da      	strb	r2, [r3, #11]
    }
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd90      	pop	{r4, r7, pc}

08000b4e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <_Z14loadCustomCharhPKc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void loadCustomChar(uint8_t charNum, const char *pattern) {
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b084      	sub	sp, #16
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	6039      	str	r1, [r7, #0]
 8000b70:	71fb      	strb	r3, [r7, #7]
	lcd_cmd(0x40 | (charNum << 3)); // Set CGRAM address
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	b25b      	sxtb	r3, r3
 8000b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fb8f 	bl	80002a4 <_Z7lcd_cmdc>
	for (int i = 0; i < 8; ++i)
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	e009      	b.n	8000ba0 <_Z14loadCustomCharhPKc+0x3a>
	{
		lcd_char_cp(pattern[i]);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	4413      	add	r3, r2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fc5d 	bl	8000454 <_Z11lcd_char_cpc>
	for (int i = 0; i < 8; ++i)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2b07      	cmp	r3, #7
 8000ba4:	ddf2      	ble.n	8000b8c <_Z14loadCustomCharhPKc+0x26>
	}
}
 8000ba6:	bf00      	nop
 8000ba8:	bf00      	nop
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <_Z17load_custom_charsv>:

void load_custom_chars(){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
     loadCustomChar(0, dinosaur_1);
 8000bb4:	490c      	ldr	r1, [pc, #48]	; (8000be8 <_Z17load_custom_charsv+0x38>)
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f7ff ffd5 	bl	8000b66 <_Z14loadCustomCharhPKc>
     loadCustomChar(1, dinosaur_2);
 8000bbc:	490b      	ldr	r1, [pc, #44]	; (8000bec <_Z17load_custom_charsv+0x3c>)
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f7ff ffd1 	bl	8000b66 <_Z14loadCustomCharhPKc>
     loadCustomChar(2, cactus_1);
 8000bc4:	490a      	ldr	r1, [pc, #40]	; (8000bf0 <_Z17load_custom_charsv+0x40>)
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f7ff ffcd 	bl	8000b66 <_Z14loadCustomCharhPKc>
     loadCustomChar(3, cactus_2);
 8000bcc:	4909      	ldr	r1, [pc, #36]	; (8000bf4 <_Z17load_custom_charsv+0x44>)
 8000bce:	2003      	movs	r0, #3
 8000bd0:	f7ff ffc9 	bl	8000b66 <_Z14loadCustomCharhPKc>
     loadCustomChar(4, filledSquare);
 8000bd4:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <_Z17load_custom_charsv+0x48>)
 8000bd6:	2004      	movs	r0, #4
 8000bd8:	f7ff ffc5 	bl	8000b66 <_Z14loadCustomCharhPKc>
     loadCustomChar(5, notFilledSquare);
 8000bdc:	4907      	ldr	r1, [pc, #28]	; (8000bfc <_Z17load_custom_charsv+0x4c>)
 8000bde:	2005      	movs	r0, #5
 8000be0:	f7ff ffc1 	bl	8000b66 <_Z14loadCustomCharhPKc>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000000 	.word	0x20000000
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000020 	.word	0x20000020
 8000bf4:	20000028 	.word	0x20000028
 8000bf8:	20000030 	.word	0x20000030
 8000bfc:	200000bc 	.word	0x200000bc

08000c00 <_Z14lcd_transitionv>:

void lcd_transition(){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
	int mid = 7;
 8000c06:	2307      	movs	r3, #7
 8000c08:	607b      	str	r3, [r7, #4]

	for (int i=0; i <= mid; i++) {
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	e035      	b.n	8000c7c <_Z14lcd_transitionv+0x7c>
	//    lcd_print(1, mid+i+1, filledSquare);
		lcd_char(1, mid+i+1, 4);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4413      	add	r3, r2
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2204      	movs	r2, #4
 8000c22:	4619      	mov	r1, r3
 8000c24:	2001      	movs	r0, #1
 8000c26:	f7ff fd66 	bl	80006f6 <_Z8lcd_charhhc>
		lcd_char(1, mid-i, 4);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2204      	movs	r2, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f7ff fd5b 	bl	80006f6 <_Z8lcd_charhhc>
		lcd_char(2, mid-i, 4);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	4619      	mov	r1, r3
 8000c50:	2002      	movs	r0, #2
 8000c52:	f7ff fd50 	bl	80006f6 <_Z8lcd_charhhc>
		lcd_char(2, mid+i+1, 4);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4413      	add	r3, r2
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	3301      	adds	r3, #1
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2204      	movs	r2, #4
 8000c68:	4619      	mov	r1, r3
 8000c6a:	2002      	movs	r0, #2
 8000c6c:	f7ff fd43 	bl	80006f6 <_Z8lcd_charhhc>
		HAL_Delay(100);
 8000c70:	2064      	movs	r0, #100	; 0x64
 8000c72:	f001 fdaf 	bl	80027d4 <HAL_Delay>
	for (int i=0; i <= mid; i++) {
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	ddc5      	ble.n	8000c10 <_Z14lcd_transitionv+0x10>
	}

	for (int i=0; i <= mid; i++) {
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	e035      	b.n	8000cf6 <_Z14lcd_transitionv+0xf6>
		lcd_char(1, mid+i+1, 5);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	4413      	add	r3, r2
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	3301      	adds	r3, #1
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2205      	movs	r2, #5
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f7ff fd29 	bl	80006f6 <_Z8lcd_charhhc>
		lcd_char(1, mid-i, 5);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2205      	movs	r2, #5
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f7ff fd1e 	bl	80006f6 <_Z8lcd_charhhc>
		lcd_char(2, mid-i, 5);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2205      	movs	r2, #5
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2002      	movs	r0, #2
 8000ccc:	f7ff fd13 	bl	80006f6 <_Z8lcd_charhhc>
		lcd_char(2, mid+i+1, 5);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	4413      	add	r3, r2
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	3301      	adds	r3, #1
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2205      	movs	r2, #5
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	2002      	movs	r0, #2
 8000ce6:	f7ff fd06 	bl	80006f6 <_Z8lcd_charhhc>
		HAL_Delay(100);
 8000cea:	2064      	movs	r0, #100	; 0x64
 8000cec:	f001 fd72 	bl	80027d4 <HAL_Delay>
	for (int i=0; i <= mid; i++) {
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	ddc5      	ble.n	8000c8a <_Z14lcd_transitionv+0x8a>
	}

	lcd_clear();
 8000cfe:	f7ff fd29 	bl	8000754 <_Z9lcd_clearv>

}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE>:

void manage_obstacles(std::vector<Obstacle>& vec) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b092      	sub	sp, #72	; 0x48
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
    // проверка не пустой ли массив
    if(!vec.empty()){
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 fb2e 	bl	8001376 <_ZNKSt6vectorI8ObstacleSaIS0_EE5emptyEv>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	f083 0301 	eor.w	r3, r3, #1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d01d      	beq.n	8000d62 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x56>
        if(vec[0].getX() < 0){
 8000d26:	2100      	movs	r1, #0
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f000 fb3f 	bl	80013ac <_ZNSt6vectorI8ObstacleSaIS0_EEixEj>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fd39 	bl	80007a8 <_ZN10GameObject4getXEv>
 8000d36:	4603      	mov	r3, r0
 8000d38:	0fdb      	lsrs	r3, r3, #31
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d010      	beq.n	8000d62 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x56>
            vec.erase(vec.begin());
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 fb46 	bl	80013d2 <_ZNSt6vectorI8ObstacleSaIS0_EE5beginEv>
 8000d46:	4603      	mov	r3, r0
 8000d48:	61bb      	str	r3, [r7, #24]
 8000d4a:	f107 0218 	add.w	r2, r7, #24
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4611      	mov	r1, r2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 fb4c 	bl	80013f2 <_ZN9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 8000d5a:	6979      	ldr	r1, [r7, #20]
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 fb59 	bl	8001414 <_ZNSt6vectorI8ObstacleSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>
        }
    }

    // int prevX = 0 так как obst.getX() - prevX <= 2
    int prevX = -Dino::FLY_TIME;
 8000d62:	f06f 0302 	mvn.w	r3, #2
 8000d66:	647b      	str	r3, [r7, #68]	; 0x44
    int group_counter = 1;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	643b      	str	r3, [r7, #64]	; 0x40
    for (Obstacle& obst : vec) {
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d72:	f000 fb2e 	bl	80013d2 <_ZNSt6vectorI8ObstacleSaIS0_EE5beginEv>
 8000d76:	4603      	mov	r3, r0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d7c:	f000 fb71 	bl	8001462 <_ZNSt6vectorI8ObstacleSaIS0_EE3endEv>
 8000d80:	4603      	mov	r3, r0
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	e025      	b.n	8000dd2 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0xc6>
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 fba3 	bl	80014d6 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEdeEv>
 8000d90:	6378      	str	r0, [r7, #52]	; 0x34
        if(obst.getX() - prevX <= 2){
 8000d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fd07 	bl	80007a8 <_ZN10GameObject4getXEv>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	bfd4      	ite	le
 8000da6:	2301      	movle	r3, #1
 8000da8:	2300      	movgt	r3, #0
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0xac>
            group_counter++;
 8000db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000db2:	3301      	adds	r3, #1
 8000db4:	643b      	str	r3, [r7, #64]	; 0x40
 8000db6:	e001      	b.n	8000dbc <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0xb0>
        } else {
            group_counter = 1;
 8000db8:	2301      	movs	r3, #1
 8000dba:	643b      	str	r3, [r7, #64]	; 0x40
        }
        prevX = obst.getX();
 8000dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fcf2 	bl	80007a8 <_ZN10GameObject4getXEv>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	647b      	str	r3, [r7, #68]	; 0x44
    for (Obstacle& obst : vec) {
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 fb71 	bl	80014b4 <_ZN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEppEv>
 8000dd2:	f107 020c 	add.w	r2, r7, #12
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 fb51 	bl	8001484 <_ZN9__gnu_cxxneIP8ObstacleSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1ce      	bne.n	8000d86 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x7a>
    }

    int chanseToCreateObstacle = std::rand() % 10 + 1;
 8000de8:	f002 ff1c 	bl	8003c24 <rand>
 8000dec:	4601      	mov	r1, r0
 8000dee:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x15c>)
 8000df0:	fb83 2301 	smull	r2, r3, r3, r1
 8000df4:	109a      	asrs	r2, r3, #2
 8000df6:	17cb      	asrs	r3, r1, #31
 8000df8:	1ad2      	subs	r2, r2, r3
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	1aca      	subs	r2, r1, r3
 8000e04:	1c53      	adds	r3, r2, #1
 8000e06:	63bb      	str	r3, [r7, #56]	; 0x38

    if(group_counter < Dino::FLY_TIME){  // add new obstacles
 8000e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	dc28      	bgt.n	8000e60 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x154>
        if(chanseToCreateObstacle <= 1){
 8000e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	dc11      	bgt.n	8000e38 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x12c>
            vec.emplace_back(Obstacle(cactus_2));
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4914      	ldr	r1, [pc, #80]	; (8000e6c <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x160>)
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fd44 	bl	80008a8 <_ZN8ObstacleC1EPc>
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 fb61 	bl	80014ee <_ZNSt6vectorI8ObstacleSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4618      	mov	r0, r3
 8000e32:	f001 fae9 	bl	8002408 <_ZN8ObstacleD1Ev>
        } else if(chanseToCreateObstacle <= 4){
            vec.emplace_back(Obstacle(cactus_1));
        }
    }
}
 8000e36:	e013      	b.n	8000e60 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x154>
        } else if(chanseToCreateObstacle <= 4){
 8000e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	dc10      	bgt.n	8000e60 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x154>
            vec.emplace_back(Obstacle(cactus_1));
 8000e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e42:	490b      	ldr	r1, [pc, #44]	; (8000e70 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x164>)
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fd2f 	bl	80008a8 <_ZN8ObstacleC1EPc>
 8000e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f000 fb4c 	bl	80014ee <_ZNSt6vectorI8ObstacleSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8000e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 fad4 	bl	8002408 <_ZN8ObstacleD1Ev>
}
 8000e60:	bf00      	nop
 8000e62:	3748      	adds	r7, #72	; 0x48
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	66666667 	.word	0x66666667
 8000e6c:	20000028 	.word	0x20000028
 8000e70:	20000020 	.word	0x20000020

08000e74 <_Z8end_gameP5Score>:


void end_game(Score* score){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  lcd_transition();
 8000e7c:	f7ff fec0 	bl	8000c00 <_Z14lcd_transitionv>
  score->calculateMaxScore();
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff fdab 	bl	80009dc <_ZN5Score17calculateMaxScoreEv>

  char max_score[3];
  std::sprintf(max_score, "%d", score->MAX_SCORE);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	7adb      	ldrb	r3, [r3, #11]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	4918      	ldr	r1, [pc, #96]	; (8000ef4 <_Z8end_gameP5Score+0x80>)
 8000e92:	4618      	mov	r0, r3
 8000e94:	f002 ffc6 	bl	8003e24 <siprintf>

  lcd_print(1, 1, "MAX SCORE:");
 8000e98:	4a17      	ldr	r2, [pc, #92]	; (8000ef8 <_Z8end_gameP5Score+0x84>)
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f7ff fc41 	bl	8000724 <_Z9lcd_printhhPc>
  lcd_print(1, 14, max_score);
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	210e      	movs	r1, #14
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff fc3a 	bl	8000724 <_Z9lcd_printhhPc>
  lcd_print(2, 1, "CURRENT SCORE:");
 8000eb0:	4a12      	ldr	r2, [pc, #72]	; (8000efc <_Z8end_gameP5Score+0x88>)
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f7ff fc35 	bl	8000724 <_Z9lcd_printhhPc>
  lcd_print(2, 14, score->getTexture());
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fc8b 	bl	80007d8 <_ZN10GameObject10getTextureEv>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	210e      	movs	r1, #14
 8000ec8:	2002      	movs	r0, #2
 8000eca:	f7ff fc2b 	bl	8000724 <_Z9lcd_printhhPc>

  // Catch algorithm in the loop which breaks after the USER_BTN is pressed
  while (HAL_GPIO_ReadPin(USER_BTN_GPIO_Port, USER_BTN_Pin) == GPIO_PIN_SET) {}
 8000ece:	bf00      	nop
 8000ed0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed4:	480a      	ldr	r0, [pc, #40]	; (8000f00 <_Z8end_gameP5Score+0x8c>)
 8000ed6:	f001 ff31 	bl	8002d3c <HAL_GPIO_ReadPin>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	bf0c      	ite	eq
 8000ee0:	2301      	moveq	r3, #1
 8000ee2:	2300      	movne	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f2      	bne.n	8000ed0 <_Z8end_gameP5Score+0x5c>
}
 8000eea:	bf00      	nop
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	08004e4c 	.word	0x08004e4c
 8000ef8:	08004e50 	.word	0x08004e50
 8000efc:	08004e5c 	.word	0x08004e5c
 8000f00:	48000800 	.word	0x48000800

08000f04 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 fb2d 	bl	800156c <_ZNSaI8ObstacleED1Ev>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_ZNSt12_Vector_baseI8ObstacleSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fb10 	bl	800154c <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE12_Vector_implC1Ev>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <_ZNSt6vectorI8ObstacleSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ffeb 	bl	8000f1c <_ZNSt12_Vector_baseI8ObstacleSaIS0_EEC1Ev>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <_ZN10GameObjectC1ERKS_>:
class GameObject
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <_ZN10GameObjectC1ERKS_+0x38>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	7a1a      	ldrb	r2, [r3, #8]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	721a      	strb	r2, [r3, #8]
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	7a5a      	ldrb	r2, [r3, #9]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	725a      	strb	r2, [r3, #9]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	08004ecc 	.word	0x08004ecc

08000f8c <_Z4gameP5Score>:

void game(Score* score) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b09a      	sub	sp, #104	; 0x68
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	Dino dino(dinosaur_textures, 3, 2);
 8000f94:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000f98:	2302      	movs	r3, #2
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	496f      	ldr	r1, [pc, #444]	; (800115c <_Z4gameP5Score+0x1d0>)
 8000f9e:	f7ff fd47 	bl	8000a30 <_ZN4DinoC1EPA8_chh>
	std::vector<Obstacle> obstacles;
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ffc5 	bl	8000f36 <_ZNSt6vectorI8ObstacleSaIS0_EEC1Ev>
//	Score score();
	score->reset();
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff fd2d 	bl	8000a0c <_ZN5Score5resetEv>

	int delay = 600;
 8000fb2:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000fb6:	667b      	str	r3, [r7, #100]	; 0x64
	int gameOver = false;	// default: 0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	663b      	str	r3, [r7, #96]	; 0x60

	while (!gameOver) {
 8000fbc:	e0bc      	b.n	8001138 <_Z4gameP5Score+0x1ac>
		// Check if Dino is currently in the air
		if (dino.getY() == 1) dino.fall();
 8000fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fbfc 	bl	80007c0 <_ZN10GameObject4getYEv>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	bf0c      	ite	eq
 8000fce:	2301      	moveq	r3, #1
 8000fd0:	2300      	movne	r3, #0
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d005      	beq.n	8000fe4 <_Z4gameP5Score+0x58>
 8000fd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fd72 	bl	8000ac6 <_ZN4Dino4fallEv>
 8000fe2:	e011      	b.n	8001008 <_Z4gameP5Score+0x7c>
		// If Dino is on the ground and the USER_BTN is pressed – jump
		else if (HAL_GPIO_ReadPin(USER_BTN_GPIO_Port, USER_BTN_Pin) == GPIO_PIN_RESET) {
 8000fe4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe8:	485d      	ldr	r0, [pc, #372]	; (8001160 <_Z4gameP5Score+0x1d4>)
 8000fea:	f001 fea7 	bl	8002d3c <HAL_GPIO_ReadPin>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	bf0c      	ite	eq
 8000ff4:	2301      	moveq	r3, #1
 8000ff6:	2300      	movne	r3, #0
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d004      	beq.n	8001008 <_Z4gameP5Score+0x7c>
			dino.jump();
 8000ffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fd4e 	bl	8000aa4 <_ZN4Dino4jumpEv>
		}

		// Iterate through the obstacles
		for (Obstacle& obst : obstacles) {
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800100e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001010:	f000 f9df 	bl	80013d2 <_ZNSt6vectorI8ObstacleSaIS0_EE5beginEv>
 8001014:	4603      	mov	r3, r0
 8001016:	61bb      	str	r3, [r7, #24]
 8001018:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800101a:	f000 fa22 	bl	8001462 <_ZNSt6vectorI8ObstacleSaIS0_EE3endEv>
 800101e:	4603      	mov	r3, r0
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	e029      	b.n	8001078 <_Z4gameP5Score+0xec>
 8001024:	f107 0318 	add.w	r3, r7, #24
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fa54 	bl	80014d6 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEdeEv>
 800102e:	6538      	str	r0, [r7, #80]	; 0x50
			obst.move();						// Move the current obstacle
 8001030:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001032:	f7ff fc4f 	bl	80008d4 <_ZN8Obstacle4moveEv>
			gameOver = obst.collides(dino);		// Check if dino collides the obstacle
 8001036:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800103a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff85 	bl	8000f50 <_ZN10GameObjectC1ERKS_>
 8001046:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800104a:	4619      	mov	r1, r3
 800104c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800104e:	f7ff fc4f 	bl	80008f0 <_ZN8Obstacle8collidesE10GameObject>
 8001052:	4603      	mov	r3, r0
 8001054:	663b      	str	r3, [r7, #96]	; 0x60
 8001056:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fc04 	bl	8000868 <_ZN10GameObjectD1Ev>
			obst.draw();						// Draw the obstacle
 8001060:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3308      	adds	r3, #8
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4610      	mov	r0, r2
 800106c:	4798      	blx	r3
		for (Obstacle& obst : obstacles) {
 800106e:	f107 0318 	add.w	r3, r7, #24
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fa1e 	bl	80014b4 <_ZN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEppEv>
 8001078:	f107 0214 	add.w	r2, r7, #20
 800107c:	f107 0318 	add.w	r3, r7, #24
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f9fe 	bl	8001484 <_ZN9__gnu_cxxneIP8ObstacleSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1ca      	bne.n	8001024 <_Z4gameP5Score+0x98>
		}

		// Rise Player's score
		score->up();
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff fc84 	bl	800099c <_ZN5Score2upEv>
		// If score has reached it's max.value – game ends
		if (score->get() >= score->SCORE_LIMIT) gameOver = true;
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff fc75 	bl	8000984 <_ZN5Score3getEv>
 800109a:	4603      	mov	r3, r0
 800109c:	2b62      	cmp	r3, #98	; 0x62
 800109e:	bfcc      	ite	gt
 80010a0:	2301      	movgt	r3, #1
 80010a2:	2300      	movle	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <_Z4gameP5Score+0x122>
 80010aa:	2301      	movs	r3, #1
 80010ac:	663b      	str	r3, [r7, #96]	; 0x60

		manage_obstacles(obstacles);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fe2a 	bl	8000d0c <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE>

		// Clear the LCD screen before drawing objects
		lcd_clear();
 80010b8:	f7ff fb4c 	bl	8000754 <_Z9lcd_clearv>
		// Draw player charachter and score
		dino.draw();
 80010bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fd19 	bl	8000af8 <_ZN4Dino4drawEv>
		score->draw();
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	3308      	adds	r3, #8
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4610      	mov	r0, r2
 80010d2:	4798      	blx	r3
		// Draw all the obstacles
		for (Obstacle& obst : obstacles) {
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80010da:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80010dc:	f000 f979 	bl	80013d2 <_ZNSt6vectorI8ObstacleSaIS0_EE5beginEv>
 80010e0:	4603      	mov	r3, r0
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80010e6:	f000 f9bc 	bl	8001462 <_ZNSt6vectorI8ObstacleSaIS0_EE3endEv>
 80010ea:	4603      	mov	r3, r0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	e011      	b.n	8001114 <_Z4gameP5Score+0x188>
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 f9ee 	bl	80014d6 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEdeEv>
 80010fa:	6578      	str	r0, [r7, #84]	; 0x54
			obst.draw();
 80010fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3308      	adds	r3, #8
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4610      	mov	r0, r2
 8001108:	4798      	blx	r3
		for (Obstacle& obst : obstacles) {
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f9d0 	bl	80014b4 <_ZN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEppEv>
 8001114:	f107 020c 	add.w	r2, r7, #12
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f9b0 	bl	8001484 <_ZN9__gnu_cxxneIP8ObstacleSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1e2      	bne.n	80010f0 <_Z4gameP5Score+0x164>
		}

		// Delays before the next frame
		delay -= 5;
 800112a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800112c:	3b05      	subs	r3, #5
 800112e:	667b      	str	r3, [r7, #100]	; 0x64
		HAL_Delay(delay);
 8001130:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001132:	4618      	mov	r0, r3
 8001134:	f001 fb4e 	bl	80027d4 <HAL_Delay>
	while (!gameOver) {
 8001138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800113a:	2b00      	cmp	r3, #0
 800113c:	f43f af3f 	beq.w	8000fbe <_Z4gameP5Score+0x32>
	}
}
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4618      	mov	r0, r3
 8001146:	f000 fa3b 	bl	80015c0 <_ZNSt6vectorI8ObstacleSaIS0_EED1Ev>
 800114a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114e:	4618      	mov	r0, r3
 8001150:	f001 f916 	bl	8002380 <_ZN4DinoD1Ev>
 8001154:	3768      	adds	r7, #104	; 0x68
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000010 	.word	0x20000010
 8001160:	48000800 	.word	0x48000800

08001164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	lcd_init(8, 1, 2);
 800116a:	2202      	movs	r2, #2
 800116c:	2101      	movs	r1, #1
 800116e:	2008      	movs	r0, #8
 8001170:	f7ff fa61 	bl	8000636 <_Z8lcd_initccc>
	load_custom_chars();
 8001174:	f7ff fd1c 	bl	8000bb0 <_Z17load_custom_charsv>
	std::srand(static_cast<unsigned>(13));
 8001178:	200d      	movs	r0, #13
 800117a:	f002 fd25 	bl	8003bc8 <srand>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117e:	f001 fab4 	bl	80026ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001182:	f000 f817 	bl	80011b4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001186:	f000 f86b 	bl	8001260 <_ZL12MX_GPIO_Initv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Create score display at the (x:14, y:1)
	  Score score(14, 1);
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2201      	movs	r2, #1
 800118e:	210e      	movs	r1, #14
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fbd7 	bl	8000944 <_ZN5ScoreC1Ehh>
	  // Make smooth transition to the game start
	  lcd_transition();
 8001196:	f7ff fd33 	bl	8000c00 <_Z14lcd_transitionv>
	  // Starts the game
	  game(&score);
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fef5 	bl	8000f8c <_Z4gameP5Score>
	  // Shows endgame screen with the Top Score and the Current Score
	  end_game(&score);
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fe65 	bl	8000e74 <_Z8end_gameP5Score>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4618      	mov	r0, r3
 80011ae:	f001 f909 	bl	80023c4 <_ZN5ScoreD1Ev>
 80011b2:	e7ea      	b.n	800118a <main+0x26>

080011b4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b096      	sub	sp, #88	; 0x58
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	2244      	movs	r2, #68	; 0x44
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 fe91 	bl	8003eea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	463b      	mov	r3, r7
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011da:	f001 fded 	bl	8002db8 <HAL_PWREx_ControlVoltageScaling>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	bf14      	ite	ne
 80011e4:	2301      	movne	r3, #1
 80011e6:	2300      	moveq	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80011ee:	f000 f8bd 	bl	800136c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011f2:	2310      	movs	r3, #16
 80011f4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011f6:	2301      	movs	r3, #1
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011fe:	2360      	movs	r3, #96	; 0x60
 8001200:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001202:	2300      	movs	r3, #0
 8001204:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4618      	mov	r0, r3
 800120c:	f001 fe2a 	bl	8002e64 <HAL_RCC_OscConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	bf14      	ite	ne
 8001216:	2301      	movne	r3, #1
 8001218:	2300      	moveq	r3, #0
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001220:	f000 f8a4 	bl	800136c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001224:	230f      	movs	r3, #15
 8001226:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001228:	2300      	movs	r3, #0
 800122a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f002 f9ed 	bl	800361c <HAL_RCC_ClockConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf14      	ite	ne
 8001248:	2301      	movne	r3, #1
 800124a:	2300      	moveq	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001252:	f000 f88b 	bl	800136c <Error_Handler>
  }
}
 8001256:	bf00      	nop
 8001258:	3758      	adds	r7, #88	; 0x58
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <_ZL12MX_GPIO_Initv+0x100>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a39      	ldr	r2, [pc, #228]	; (8001360 <_ZL12MX_GPIO_Initv+0x100>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b37      	ldr	r3, [pc, #220]	; (8001360 <_ZL12MX_GPIO_Initv+0x100>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	4b34      	ldr	r3, [pc, #208]	; (8001360 <_ZL12MX_GPIO_Initv+0x100>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a33      	ldr	r2, [pc, #204]	; (8001360 <_ZL12MX_GPIO_Initv+0x100>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b31      	ldr	r3, [pc, #196]	; (8001360 <_ZL12MX_GPIO_Initv+0x100>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <_ZL12MX_GPIO_Initv+0x100>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	4a2d      	ldr	r2, [pc, #180]	; (8001360 <_ZL12MX_GPIO_Initv+0x100>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <_ZL12MX_GPIO_Initv+0x100>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80012c4:	4827      	ldr	r0, [pc, #156]	; (8001364 <_ZL12MX_GPIO_Initv+0x104>)
 80012c6:	f001 fd51 	bl	8002d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2180      	movs	r1, #128	; 0x80
 80012ce:	4826      	ldr	r0, [pc, #152]	; (8001368 <_ZL12MX_GPIO_Initv+0x108>)
 80012d0:	f001 fd4c 	bl	8002d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f001 fd45 	bl	8002d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	4619      	mov	r1, r3
 80012f6:	481c      	ldr	r0, [pc, #112]	; (8001368 <_ZL12MX_GPIO_Initv+0x108>)
 80012f8:	f001 fb76 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 80012fc:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001300:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001302:	2301      	movs	r3, #1
 8001304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4619      	mov	r1, r3
 8001314:	4813      	ldr	r0, [pc, #76]	; (8001364 <_ZL12MX_GPIO_Initv+0x104>)
 8001316:	f001 fb67 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	4619      	mov	r1, r3
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <_ZL12MX_GPIO_Initv+0x108>)
 8001332:	f001 fb59 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_RS_Pin;
 8001336:	f44f 7340 	mov.w	r3, #768	; 0x300
 800133a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	4619      	mov	r1, r3
 800134e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001352:	f001 fb49 	bl	80029e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001356:	bf00      	nop
 8001358:	3720      	adds	r7, #32
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	48000400 	.word	0x48000400
 8001368:	48000800 	.word	0x48000800

0800136c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
}
 8001372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001374:	e7fe      	b.n	8001374 <Error_Handler+0x8>

08001376 <_ZNKSt6vectorI8ObstacleSaIS0_EE5emptyEv>:
      /**
       *  Returns true if the %vector is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f939 	bl	80015f6 <_ZNKSt6vectorI8ObstacleSaIS0_EE5beginEv>
 8001384:	4603      	mov	r3, r0
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f944 	bl	8001616 <_ZNKSt6vectorI8ObstacleSaIS0_EE3endEv>
 800138e:	4603      	mov	r3, r0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	f107 020c 	add.w	r2, r7, #12
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f000 f94b 	bl	8001638 <_ZN9__gnu_cxxeqIPK8ObstacleSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <_ZNSt6vectorI8ObstacleSaIS0_EEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6819      	ldr	r1, [r3, #0]
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
      }
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <_ZNSt6vectorI8ObstacleSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f940 	bl	8001668 <_ZN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_ZN9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>:
      : _M_current(__i) { }

      // Allow iterator to const_iterator conversion
      template<typename _Iter>
        _GLIBCXX20_CONSTEXPR
        __normal_iterator(const __normal_iterator<_Iter,
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	6039      	str	r1, [r7, #0]
			  typename __enable_if<
      	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
        : _M_current(__i.base()) { }
 80013fc:	6838      	ldr	r0, [r7, #0]
 80013fe:	f000 f943 	bl	8001688 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 8001402:	4603      	mov	r3, r0
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <_ZNSt6vectorI8ObstacleSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>:
       *  the pointed-to memory is not touched in any way.  Managing
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ffd7 	bl	80013d2 <_ZNSt6vectorI8ObstacleSaIS0_EE5beginEv>
 8001424:	4603      	mov	r3, r0
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f938 	bl	800169e <_ZNKSt6vectorI8ObstacleSaIS0_EE6cbeginEv>
 800142e:	4603      	mov	r3, r0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	f107 020c 	add.w	r2, r7, #12
 8001436:	463b      	mov	r3, r7
 8001438:	4611      	mov	r1, r2
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f940 	bl	80016c0 <_ZN9__gnu_cxxmiIPK8ObstacleSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8001440:	4602      	mov	r2, r0
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f953 	bl	80016f4 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEplEi>
 800144e:	4603      	mov	r3, r0
 8001450:	4619      	mov	r1, r3
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f969 	bl	800172a <_ZNSt6vectorI8ObstacleSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
 8001458:	4603      	mov	r3, r0
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <_ZNSt6vectorI8ObstacleSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001462:	b580      	push	{r7, lr}
 8001464:	b084      	sub	sp, #16
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	1d1a      	adds	r2, r3, #4
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f000 f8f7 	bl	8001668 <_ZN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_ZN9__gnu_cxxneIP8ObstacleSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f8fa 	bl	8001688 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 8001494:	4603      	mov	r3, r0
 8001496:	681c      	ldr	r4, [r3, #0]
 8001498:	6838      	ldr	r0, [r7, #0]
 800149a:	f000 f8f5 	bl	8001688 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 800149e:	4603      	mov	r3, r0
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	429c      	cmp	r4, r3
 80014a4:	bf14      	ite	ne
 80014a6:	2301      	movne	r3, #1
 80014a8:	2300      	moveq	r3, #0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd90      	pop	{r4, r7, pc}

080014b4 <_ZN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	++_M_current;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f103 020c 	add.w	r2, r3, #12
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	601a      	str	r2, [r3, #0]
	return *this;
 80014c8:	687b      	ldr	r3, [r7, #4]
      }
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <_ZNSt6vectorI8ObstacleSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 80014ee:	b5b0      	push	{r4, r5, r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	429a      	cmp	r2, r3
 8001502:	d012      	beq.n	800152a <_ZNSt6vectorI8ObstacleSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3c>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8001504:	687c      	ldr	r4, [r7, #4]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685d      	ldr	r5, [r3, #4]
 800150a:	6838      	ldr	r0, [r7, #0]
 800150c:	f000 f94a 	bl	80017a4 <_ZSt7forwardI8ObstacleEOT_RNSt16remove_referenceIS1_E4typeE>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	4629      	mov	r1, r5
 8001516:	4620      	mov	r0, r4
 8001518:	f000 f94f 	bl	80017ba <_ZNSt16allocator_traitsISaI8ObstacleEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f103 020c 	add.w	r2, r3, #12
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8001528:	e00c      	b.n	8001544 <_ZNSt6vectorI8ObstacleSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff99 	bl	8001462 <_ZNSt6vectorI8ObstacleSaIS0_EE3endEv>
 8001530:	4604      	mov	r4, r0
 8001532:	6838      	ldr	r0, [r7, #0]
 8001534:	f000 f936 	bl	80017a4 <_ZSt7forwardI8ObstacleEOT_RNSt16remove_referenceIS1_E4typeE>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	4621      	mov	r1, r4
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f964 	bl	800180c <_ZNSt6vectorI8ObstacleSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bdb0      	pop	{r4, r5, r7, pc}

0800154c <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 fa21 	bl	800199c <_ZNSaI8ObstacleEC1Ev>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4618      	mov	r0, r3
 800155e:	f000 fa29 	bl	80019b4 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_ZNSaI8ObstacleED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 fa31 	bl	80019dc <_ZN9__gnu_cxx13new_allocatorI8ObstacleED1Ev>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	109b      	asrs	r3, r3, #2
 800159c:	4a07      	ldr	r2, [pc, #28]	; (80015bc <_ZNSt12_Vector_baseI8ObstacleSaIS0_EED1Ev+0x38>)
 800159e:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80015a2:	461a      	mov	r2, r3
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 fa24 	bl	80019f2 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE13_M_deallocateEPS0_j>
      }
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fca9 	bl	8000f04 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE12_Vector_implD1Ev>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	aaaaaaab 	.word	0xaaaaaaab

080015c0 <_ZNSt6vectorI8ObstacleSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80015c0:	b5b0      	push	{r4, r5, r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681c      	ldr	r4, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fa20 	bl	8001a18 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE19_M_get_Tp_allocatorEv>
 80015d8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80015da:	461a      	mov	r2, r3
 80015dc:	4629      	mov	r1, r5
 80015de:	4620      	mov	r0, r4
 80015e0:	f000 fa25 	bl	8001a2e <_ZSt8_DestroyIP8ObstacleS0_EvT_S2_RSaIT0_E>
      }
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ffcc 	bl	8001584 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EED1Ev>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bdb0      	pop	{r4, r5, r7, pc}

080015f6 <_ZNKSt6vectorI8ObstacleSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f000 fa1f 	bl	8001a4a <_ZN9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_ZNKSt6vectorI8ObstacleSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	1d1a      	adds	r2, r3, #4
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f000 fa0e 	bl	8001a4a <_ZN9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <_ZN9__gnu_cxxeqIPK8ObstacleSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fa11 	bl	8001a6a <_ZNK9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 8001648:	4603      	mov	r3, r0
 800164a:	681c      	ldr	r4, [r3, #0]
 800164c:	6838      	ldr	r0, [r7, #0]
 800164e:	f000 fa0c 	bl	8001a6a <_ZNK9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 8001652:	4603      	mov	r3, r0
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	429c      	cmp	r4, r3
 8001658:	bf0c      	ite	eq
 800165a:	2301      	moveq	r3, #1
 800165c:	2300      	movne	r3, #0
 800165e:	b2db      	uxtb	r3, r3
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bd90      	pop	{r4, r7, pc}

08001668 <_ZN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <_ZNKSt6vectorI8ObstacleSaIS0_EE6cbeginEv>:
      cbegin() const noexcept
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f9cb 	bl	8001a4a <_ZN9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <_ZN9__gnu_cxxmiIPK8ObstacleSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f9cd 	bl	8001a6a <_ZNK9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 80016d0:	4603      	mov	r3, r0
 80016d2:	681c      	ldr	r4, [r3, #0]
 80016d4:	6838      	ldr	r0, [r7, #0]
 80016d6:	f000 f9c8 	bl	8001a6a <_ZNK9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 80016da:	4603      	mov	r3, r0
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	1ae3      	subs	r3, r4, r3
 80016e0:	109b      	asrs	r3, r3, #2
 80016e2:	4a03      	ldr	r2, [pc, #12]	; (80016f0 <_ZN9__gnu_cxxmiIPK8ObstacleSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 80016e4:	fb02 f303 	mul.w	r3, r2, r3
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd90      	pop	{r4, r7, pc}
 80016f0:	aaaaaaab 	.word	0xaaaaaaab

080016f4 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6819      	ldr	r1, [r3, #0]
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	4613      	mov	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	f107 020c 	add.w	r2, r7, #12
 8001714:	f107 0308 	add.w	r3, r7, #8
 8001718:	4611      	mov	r1, r2
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ffa4 	bl	8001668 <_ZN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_ZNSt6vectorI8ObstacleSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
 800172a:	b590      	push	{r4, r7, lr}
 800172c:	b085      	sub	sp, #20
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 8001734:	463b      	mov	r3, r7
 8001736:	2101      	movs	r1, #1
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ffdb 	bl	80016f4 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEplEi>
 800173e:	4603      	mov	r3, r0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fe8d 	bl	8001462 <_ZNSt6vectorI8ObstacleSaIS0_EE3endEv>
 8001748:	4603      	mov	r3, r0
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	f107 020c 	add.w	r2, r7, #12
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	4611      	mov	r1, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fe94 	bl	8001484 <_ZN9__gnu_cxxneIP8ObstacleSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00e      	beq.n	8001780 <_ZNSt6vectorI8ObstacleSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 8001762:	463b      	mov	r3, r7
 8001764:	2101      	movs	r1, #1
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ffc4 	bl	80016f4 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEplEi>
 800176c:	4604      	mov	r4, r0
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff fe77 	bl	8001462 <_ZNSt6vectorI8ObstacleSaIS0_EE3endEv>
 8001774:	4603      	mov	r3, r0
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	4620      	mov	r0, r4
 800177c:	f000 f980 	bl	8001a80 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
      --this->_M_impl._M_finish;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f1a3 020c 	sub.w	r2, r3, #12
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4619      	mov	r1, r3
 8001794:	4610      	mov	r0, r2
 8001796:	f000 f98b 	bl	8001ab0 <_ZNSt16allocator_traitsISaI8ObstacleEE7destroyIS0_EEvRS1_PT_>
      _GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
      return __position;
 800179a:	683b      	ldr	r3, [r7, #0]
    }
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}

080017a4 <_ZSt7forwardI8ObstacleEOT_RNSt16remove_referenceIS1_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <_ZNSt16allocator_traitsISaI8ObstacleEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b084      	sub	sp, #16
 80017be:	af00      	add	r7, sp, #0
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffec 	bl	80017a4 <_ZSt7forwardI8ObstacleEOT_RNSt16remove_referenceIS1_E4typeE>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461a      	mov	r2, r3
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f990 	bl	8001af8 <_ZN9__gnu_cxx13new_allocatorI8ObstacleE9constructIS1_JS1_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_ZNSt6vectorI8ObstacleSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f805 	bl	80017f6 <_ZNSt6vectorI8ObstacleSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80017ec:	4603      	mov	r3, r0
      }
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_ZNSt6vectorI8ObstacleSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80017fe:	2301      	movs	r3, #1
      }
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_ZNSt6vectorI8ObstacleSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800180c:	b5b0      	push	{r4, r5, r7, lr}
 800180e:	b08c      	sub	sp, #48	; 0x30
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8001818:	4a5e      	ldr	r2, [pc, #376]	; (8001994 <_ZNSt6vectorI8ObstacleSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 800181a:	2101      	movs	r1, #1
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 f983 	bl	8001b28 <_ZNKSt6vectorI8ObstacleSaIS0_EE12_M_check_lenEjPKc>
 8001822:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f7ff fdce 	bl	80013d2 <_ZNSt6vectorI8ObstacleSaIS0_EE5beginEv>
 8001836:	4603      	mov	r3, r0
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	f107 0214 	add.w	r2, r7, #20
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f000 f9b7 	bl	8001bb8 <_ZN9__gnu_cxxmiIP8ObstacleSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 800184a:	4603      	mov	r3, r0
 800184c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f9ca 	bl	8001bec <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE11_M_allocateEj>
 8001858:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800185e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	189d      	adds	r5, r3, r2
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ff97 	bl	80017a4 <_ZSt7forwardI8ObstacleEOT_RNSt16remove_referenceIS1_E4typeE>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	4629      	mov	r1, r5
 800187c:	4620      	mov	r0, r4
 800187e:	f7ff ff9c 	bl	80017ba <_ZNSt16allocator_traitsISaI8ObstacleEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8001882:	2300      	movs	r3, #0
 8001884:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8001886:	f7ff ffab 	bl	80017e0 <_ZNSt6vectorI8ObstacleSaIS0_EE15_S_use_relocateEv>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d027      	beq.n	80018e0 <_ZNSt6vectorI8ObstacleSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001890:	f107 0308 	add.w	r3, r7, #8
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fef7 	bl	8001688 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 800189a:	4603      	mov	r3, r0
 800189c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 f8b9 	bl	8001a18 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE19_M_get_Tp_allocatorEv>
 80018a6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4621      	mov	r1, r4
 80018ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018ae:	f000 f9b1 	bl	8001c14 <_ZNSt6vectorI8ObstacleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80018b2:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80018b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b6:	330c      	adds	r3, #12
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80018ba:	f107 0308 	add.w	r3, r7, #8
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fee2 	bl	8001688 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 80018c4:	4603      	mov	r3, r0
 80018c6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f8a4 	bl	8001a18 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE19_M_get_Tp_allocatorEv>
 80018d0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80018d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d4:	6a39      	ldr	r1, [r7, #32]
 80018d6:	4620      	mov	r0, r4
 80018d8:	f000 f99c 	bl	8001c14 <_ZNSt6vectorI8ObstacleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80018dc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80018de:	e026      	b.n	800192e <_ZNSt6vectorI8ObstacleSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80018e0:	f107 0308 	add.w	r3, r7, #8
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fecf 	bl	8001688 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 80018ea:	4603      	mov	r3, r0
 80018ec:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 f891 	bl	8001a18 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE19_M_get_Tp_allocatorEv>
 80018f6:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4621      	mov	r1, r4
 80018fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018fe:	f000 f99d 	bl	8001c3c <_ZSt34__uninitialized_move_if_noexcept_aIP8ObstacleS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001902:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8001904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001906:	330c      	adds	r3, #12
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff feba 	bl	8001688 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 8001914:	4603      	mov	r3, r0
 8001916:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f87c 	bl	8001a18 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE19_M_get_Tp_allocatorEv>
 8001920:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8001922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001924:	6a39      	ldr	r1, [r7, #32]
 8001926:	4620      	mov	r0, r4
 8001928:	f000 f988 	bl	8001c3c <_ZSt34__uninitialized_move_if_noexcept_aIP8ObstacleS1_SaIS0_EET0_T_S4_S3_RT1_>
 800192c:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800192e:	f7ff ff57 	bl	80017e0 <_ZNSt6vectorI8ObstacleSaIS0_EE15_S_use_relocateEv>
 8001932:	4603      	mov	r3, r0
 8001934:	f083 0301 	eor.w	r3, r3, #1
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <_ZNSt6vectorI8ObstacleSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 f869 	bl	8001a18 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE19_M_get_Tp_allocatorEv>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	6a39      	ldr	r1, [r7, #32]
 800194c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800194e:	f000 f86e 	bl	8001a2e <_ZSt8_DestroyIP8ObstacleS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8001952:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	109b      	asrs	r3, r3, #2
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <_ZNSt6vectorI8ObstacleSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18c>)
 8001960:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8001964:	461a      	mov	r2, r3
 8001966:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001968:	f000 f843 	bl	80019f2 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001976:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	461a      	mov	r2, r3
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	441a      	add	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	609a      	str	r2, [r3, #8]
    }
 800198c:	bf00      	nop
 800198e:	3730      	adds	r7, #48	; 0x30
 8001990:	46bd      	mov	sp, r7
 8001992:	bdb0      	pop	{r4, r5, r7, pc}
 8001994:	08004e6c 	.word	0x08004e6c
 8001998:	aaaaaaab 	.word	0xaaaaaaab

0800199c <_ZNSaI8ObstacleEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f962 	bl	8001c6e <_ZN9__gnu_cxx13new_allocatorI8ObstacleEC1Ev>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
	{ }
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_ZN9__gnu_cxx13new_allocatorI8ObstacleED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
	if (__p)
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f93a 	bl	8001c84 <_ZNSt16allocator_traitsISaI8ObstacleEE10deallocateERS1_PS0_j>
      }
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <_ZSt8_DestroyIP8ObstacleS0_EvT_S2_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001a3a:	68b9      	ldr	r1, [r7, #8]
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 f930 	bl	8001ca2 <_ZSt8_DestroyIP8ObstacleEvT_S2_>
    }
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_ZN9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <_ZNK9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    move(_II __first, _II __last, _OI __result)
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<true>(std::__miter_base(__first),
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 f915 	bl	8001cbc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEEET_S8_>
 8001a92:	4604      	mov	r4, r0
 8001a94:	68b8      	ldr	r0, [r7, #8]
 8001a96:	f000 f911 	bl	8001cbc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEEET_S8_>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f000 f916 	bl	8001cd2 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 8001aa6:	4603      	mov	r3, r0
				      std::__miter_base(__last), __result);
    }
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd90      	pop	{r4, r7, pc}

08001ab0 <_ZNSt16allocator_traitsISaI8ObstacleEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8001aba:	6839      	ldr	r1, [r7, #0]
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f929 	bl	8001d14 <_ZN9__gnu_cxx13new_allocatorI8ObstacleE7destroyIS1_EEvPT_>
	}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <_ZN8ObstacleC1EOS_>:
class Obstacle : public GameObject {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fa37 	bl	8000f50 <_ZN10GameObjectC1ERKS_>
 8001ae2:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <_ZN8ObstacleC1EOS_+0x28>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	08004eb8 	.word	0x08004eb8

08001af8 <_ZN9__gnu_cxx13new_allocatorI8ObstacleE9constructIS1_JS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff fe4d 	bl	80017a4 <_ZSt7forwardI8ObstacleEOT_RNSt16remove_referenceIS1_E4typeE>
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	200c      	movs	r0, #12
 8001b12:	f7ff f81c 	bl	8000b4e <_ZnwjPv>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4621      	mov	r1, r4
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff ffd6 	bl	8001acc <_ZN8ObstacleC1EOS_>
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd90      	pop	{r4, r7, pc}

08001b28 <_ZNKSt6vectorI8ObstacleSaIS0_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 f8fb 	bl	8001d30 <_ZNKSt6vectorI8ObstacleSaIS0_EE8max_sizeEv>
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 f909 	bl	8001d54 <_ZNKSt6vectorI8ObstacleSaIS0_EE4sizeEv>
 8001b42:	4603      	mov	r3, r0
 8001b44:	1ae2      	subs	r2, r4, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	bf34      	ite	cc
 8001b4c:	2301      	movcc	r3, #1
 8001b4e:	2300      	movcs	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <_ZNKSt6vectorI8ObstacleSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f001 ff65 	bl	8003a26 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f000 f8f9 	bl	8001d54 <_ZNKSt6vectorI8ObstacleSaIS0_EE4sizeEv>
 8001b62:	4604      	mov	r4, r0
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 f8f5 	bl	8001d54 <_ZNKSt6vectorI8ObstacleSaIS0_EE4sizeEv>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	f107 0208 	add.w	r2, r7, #8
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 f901 	bl	8001d80 <_ZSt3maxIjERKT_S2_S2_>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4423      	add	r3, r4
 8001b84:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 f8e4 	bl	8001d54 <_ZNKSt6vectorI8ObstacleSaIS0_EE4sizeEv>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d306      	bcc.n	8001ba2 <_ZNKSt6vectorI8ObstacleSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 f8cb 	bl	8001d30 <_ZNKSt6vectorI8ObstacleSaIS0_EE8max_sizeEv>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d904      	bls.n	8001bac <_ZNKSt6vectorI8ObstacleSaIS0_EE12_M_check_lenEjPKc+0x84>
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 f8c4 	bl	8001d30 <_ZNKSt6vectorI8ObstacleSaIS0_EE8max_sizeEv>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	e000      	b.n	8001bae <_ZNKSt6vectorI8ObstacleSaIS0_EE12_M_check_lenEjPKc+0x86>
 8001bac:	697b      	ldr	r3, [r7, #20]
      }
 8001bae:	4618      	mov	r0, r3
 8001bb0:	371c      	adds	r7, #28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd90      	pop	{r4, r7, pc}
	...

08001bb8 <_ZN9__gnu_cxxmiIP8ObstacleSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff fd60 	bl	8001688 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	681c      	ldr	r4, [r3, #0]
 8001bcc:	6838      	ldr	r0, [r7, #0]
 8001bce:	f7ff fd5b 	bl	8001688 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	1ae3      	subs	r3, r4, r3
 8001bd8:	109b      	asrs	r3, r3, #2
 8001bda:	4a03      	ldr	r2, [pc, #12]	; (8001be8 <_ZN9__gnu_cxxmiIP8ObstacleSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd90      	pop	{r4, r7, pc}
 8001be8:	aaaaaaab 	.word	0xaaaaaaab

08001bec <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE11_M_allocateEj+0x1e>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6839      	ldr	r1, [r7, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 f8d1 	bl	8001da8 <_ZNSt16allocator_traitsISaI8ObstacleEE8allocateERS1_j>
 8001c06:	4603      	mov	r3, r0
 8001c08:	e000      	b.n	8001c0c <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE11_M_allocateEj+0x20>
 8001c0a:	2300      	movs	r3, #0
      }
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <_ZNSt6vectorI8ObstacleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8001c22:	f88d 4000 	strb.w	r4, [sp]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	68b9      	ldr	r1, [r7, #8]
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f000 f8ca 	bl	8001dc6 <_ZNSt6vectorI8ObstacleSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8001c32:	4603      	mov	r3, r0
      }
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd90      	pop	{r4, r7, pc}

08001c3c <_ZSt34__uninitialized_move_if_noexcept_aIP8ObstacleS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 f8cd 	bl	8001dea <_ZSt32__make_move_if_noexcept_iteratorI8ObstacleSt13move_iteratorIPS0_EET0_PT_>
 8001c50:	4604      	mov	r4, r0
 8001c52:	68b8      	ldr	r0, [r7, #8]
 8001c54:	f000 f8c9 	bl	8001dea <_ZSt32__make_move_if_noexcept_iteratorI8ObstacleSt13move_iteratorIPS0_EET0_PT_>
 8001c58:	4601      	mov	r1, r0
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f000 f8d2 	bl	8001e08 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8ObstacleES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8001c64:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd90      	pop	{r4, r7, pc}

08001c6e <_ZN9__gnu_cxx13new_allocatorI8ObstacleEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_ZNSt16allocator_traitsISaI8ObstacleEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 f8c8 	bl	8001e2a <_ZN9__gnu_cxx13new_allocatorI8ObstacleE10deallocateEPS1_j>
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_ZSt8_DestroyIP8ObstacleEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8001cac:	6839      	ldr	r1, [r7, #0]
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8ce 	bl	8001e50 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ObstacleEEvT_S4_>
    }
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8001cd2:	b5b0      	push	{r4, r5, r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 f8cf 	bl	8001e82 <_ZSt12__niter_baseIP8ObstacleSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8001ce4:	4604      	mov	r4, r0
 8001ce6:	68b8      	ldr	r0, [r7, #8]
 8001ce8:	f000 f8cb 	bl	8001e82 <_ZSt12__niter_baseIP8ObstacleSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8001cec:	4605      	mov	r5, r0
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f8c7 	bl	8001e82 <_ZSt12__niter_baseIP8ObstacleSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f000 f8cf 	bl	8001e9e <_ZSt14__copy_move_a1ILb1EP8ObstacleS1_ET1_T0_S3_S2_>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4619      	mov	r1, r3
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f8db 	bl	8001ec0 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>
 8001d0a:	4603      	mov	r3, r0
    }
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bdb0      	pop	{r4, r5, r7, pc}

08001d14 <_ZN9__gnu_cxx13new_allocatorI8ObstacleE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6838      	ldr	r0, [r7, #0]
 8001d26:	4798      	blx	r3
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_ZNKSt6vectorI8ObstacleSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f8f8 	bl	8001f30 <_ZNKSt12_Vector_baseI8ObstacleSaIS0_EE19_M_get_Tp_allocatorEv>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f8d8 	bl	8001ef8 <_ZNSt6vectorI8ObstacleSaIS0_EE11_S_max_sizeERKS1_>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <_ZNKSt6vectorI8ObstacleSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	109b      	asrs	r3, r3, #2
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <_ZNKSt6vectorI8ObstacleSaIS0_EE4sizeEv+0x28>)
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	aaaaaaab 	.word	0xaaaaaaab

08001d80 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d201      	bcs.n	8001d9a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	e000      	b.n	8001d9c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8001d9a:	687b      	ldr	r3, [r7, #4]
    }
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_ZNSt16allocator_traitsISaI8ObstacleEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001db2:	2200      	movs	r2, #0
 8001db4:	6839      	ldr	r1, [r7, #0]
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f8d4 	bl	8001f64 <_ZN9__gnu_cxx13new_allocatorI8ObstacleE8allocateEjPKv>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <_ZNSt6vectorI8ObstacleSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f8f0 	bl	8001fc0 <_ZSt12__relocate_aIP8ObstacleS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001de0:	4603      	mov	r3, r0
      }
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <_ZSt32__make_move_if_noexcept_iteratorI8ObstacleSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b084      	sub	sp, #16
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 f8fe 	bl	8001ffa <_ZNSt13move_iteratorIP8ObstacleEC1ES1_>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8ObstacleES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 f8ff 	bl	800201e <_ZSt18uninitialized_copyISt13move_iteratorIP8ObstacleES2_ET0_T_S5_S4_>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <_ZN9__gnu_cxx13new_allocatorI8ObstacleE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4619      	mov	r1, r3
 8001e42:	68b8      	ldr	r0, [r7, #8]
 8001e44:	f001 fdd6 	bl	80039f4 <_ZdlPvj>
      }
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ObstacleEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8001e5a:	e009      	b.n	8001e70 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ObstacleEEvT_S4_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f8f0 	bl	8002042 <_ZSt11__addressofI8ObstacleEPT_RS1_>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 f8f7 	bl	8002058 <_ZSt8_DestroyI8ObstacleEvPT_>
	  for (; __first != __last; ++__first)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	330c      	adds	r3, #12
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d1f1      	bne.n	8001e5c <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ObstacleEEvT_S4_+0xc>
	}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <_ZSt12__niter_baseIP8ObstacleSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fbfb 	bl	8001688 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 8001e92:	4603      	mov	r3, r0
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <_ZSt14__copy_move_a1ILb1EP8ObstacleS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68b9      	ldr	r1, [r7, #8]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f8df 	bl	8002072 <_ZSt14__copy_move_a2ILb1EP8ObstacleS1_ET1_T0_S3_S2_>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>:
    __niter_wrap(_From __from, _To __res)
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ffd9 	bl	8001e82 <_ZSt12__niter_baseIP8ObstacleSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	109b      	asrs	r3, r3, #2
 8001ed8:	4a06      	ldr	r2, [pc, #24]	; (8001ef4 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_+0x34>)
 8001eda:	fb02 f303 	mul.w	r3, r2, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fc05 	bl	80016f4 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEplEi>
 8001eea:	4603      	mov	r3, r0
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	aaaaaaab 	.word	0xaaaaaaab

08001ef8 <_ZNSt6vectorI8ObstacleSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8001f00:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <_ZNSt6vectorI8ObstacleSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8001f02:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f8c4 	bl	8002092 <_ZNSt16allocator_traitsISaI8ObstacleEE8max_sizeERKS1_>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001f0e:	f107 0208 	add.w	r2, r7, #8
 8001f12:	f107 030c 	add.w	r3, r7, #12
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 f8c6 	bl	80020aa <_ZSt3minIjERKT_S2_S2_>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	681b      	ldr	r3, [r3, #0]
      }
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	0aaaaaaa 	.word	0x0aaaaaaa

08001f30 <_ZNKSt12_Vector_baseI8ObstacleSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <_ZNK9__gnu_cxx13new_allocatorI8ObstacleE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <_ZNK9__gnu_cxx13new_allocatorI8ObstacleE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	0aaaaaaa 	.word	0x0aaaaaaa

08001f64 <_ZN9__gnu_cxx13new_allocatorI8ObstacleE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f7ff ffe9 	bl	8001f48 <_ZNK9__gnu_cxx13new_allocatorI8ObstacleE11_M_max_sizeEv>
 8001f76:	4602      	mov	r2, r0
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	bf8c      	ite	hi
 8001f7e:	2301      	movhi	r3, #1
 8001f80:	2300      	movls	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf14      	ite	ne
 8001f88:	2301      	movne	r3, #1
 8001f8a:	2300      	moveq	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <_ZN9__gnu_cxx13new_allocatorI8ObstacleE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	4a09      	ldr	r2, [pc, #36]	; (8001fbc <_ZN9__gnu_cxx13new_allocatorI8ObstacleE8allocateEjPKv+0x58>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <_ZN9__gnu_cxx13new_allocatorI8ObstacleE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8001f9a:	f001 fd41 	bl	8003a20 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8001f9e:	f001 fd3c 	bl	8003a1a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f001 fd23 	bl	80039f8 <_Znwj>
 8001fb2:	4603      	mov	r3, r0
      }
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	15555555 	.word	0x15555555

08001fc0 <_ZSt12__relocate_aIP8ObstacleS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f87f 	bl	80020d2 <_ZSt12__niter_baseIP8ObstacleET_S2_>
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	68b8      	ldr	r0, [r7, #8]
 8001fd8:	f000 f87b 	bl	80020d2 <_ZSt12__niter_baseIP8ObstacleET_S2_>
 8001fdc:	4605      	mov	r5, r0
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f877 	bl	80020d2 <_ZSt12__niter_baseIP8ObstacleET_S2_>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	4629      	mov	r1, r5
 8001fea:	4620      	mov	r0, r4
 8001fec:	f000 f87c 	bl	80020e8 <_ZSt14__relocate_a_1IP8ObstacleS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001ff0:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bdb0      	pop	{r4, r5, r7, pc}

08001ffa <_ZNSt13move_iteratorIP8ObstacleEC1ES1_>:
      move_iterator(iterator_type __i)
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8002004:	463b      	mov	r3, r7
 8002006:	4618      	mov	r0, r3
 8002008:	f000 f894 	bl	8002134 <_ZSt4moveIRP8ObstacleEONSt16remove_referenceIT_E4typeEOS4_>
 800200c:	4603      	mov	r3, r0
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <_ZSt18uninitialized_copyISt13move_iteratorIP8ObstacleES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800202a:	2301      	movs	r3, #1
 800202c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f889 	bl	800214a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP8ObstacleES4_EET0_T_S7_S6_>
 8002038:	4603      	mov	r3, r0
    }
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <_ZSt11__addressofI8ObstacleEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <_ZSt8_DestroyI8ObstacleEvPT_>:
    _Destroy(_Tp* __pointer)
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	4798      	blx	r3
    }
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <_ZSt14__copy_move_a2ILb1EP8ObstacleS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 f8b8 	bl	80021f8 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIP8ObstacleS4_EET0_T_S6_S5_>
 8002088:	4603      	mov	r3, r0
    }
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <_ZNSt16allocator_traitsISaI8ObstacleEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f8d6 	bl	800224c <_ZNK9__gnu_cxx13new_allocatorI8ObstacleE8max_sizeEv>
 80020a0:	4603      	mov	r3, r0
      }
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d201      	bcs.n	80020c4 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	e000      	b.n	80020c6 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80020c4:	687b      	ldr	r3, [r7, #4]
    }
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <_ZSt12__niter_baseIP8ObstacleET_S2_>:
    __niter_base(_Iterator __it)
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <_ZSt14__relocate_a_1IP8ObstacleS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80020fa:	e012      	b.n	8002122 <_ZSt14__relocate_a_1IP8ObstacleS1_SaIS0_EET0_T_S4_S3_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 80020fc:	6978      	ldr	r0, [r7, #20]
 80020fe:	f7ff ffa0 	bl	8002042 <_ZSt11__addressofI8ObstacleEPT_RS1_>
 8002102:	4604      	mov	r4, r0
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f7ff ff9c 	bl	8002042 <_ZSt11__addressofI8ObstacleEPT_RS1_>
 800210a:	4603      	mov	r3, r0
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	4619      	mov	r1, r3
 8002110:	4620      	mov	r0, r4
 8002112:	f000 f8a7 	bl	8002264 <_ZSt19__relocate_object_aI8ObstacleS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	330c      	adds	r3, #12
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	330c      	adds	r3, #12
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	429a      	cmp	r2, r3
 8002128:	d1e8      	bne.n	80020fc <_ZSt14__relocate_a_1IP8ObstacleS1_SaIS0_EET0_T_S4_S3_RT1_+0x14>
      return __cur;
 800212a:	697b      	ldr	r3, [r7, #20]
    }
 800212c:	4618      	mov	r0, r3
 800212e:	371c      	adds	r7, #28
 8002130:	46bd      	mov	sp, r7
 8002132:	bd90      	pop	{r4, r7, pc}

08002134 <_ZSt4moveIRP8ObstacleEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP8ObstacleES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800214a:	b590      	push	{r4, r7, lr}
 800214c:	b087      	sub	sp, #28
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800215a:	e015      	b.n	8002188 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP8ObstacleES4_EET0_T_S7_S6_+0x3e>
		std::_Construct(std::__addressof(*__cur), *__first);
 800215c:	6978      	ldr	r0, [r7, #20]
 800215e:	f7ff ff70 	bl	8002042 <_ZSt11__addressofI8ObstacleEPT_RS1_>
 8002162:	4604      	mov	r4, r0
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	4618      	mov	r0, r3
 800216a:	f000 f8b8 	bl	80022de <_ZNKSt13move_iteratorIP8ObstacleEdeEv>
 800216e:	4603      	mov	r3, r0
 8002170:	4619      	mov	r1, r3
 8002172:	4620      	mov	r0, r4
 8002174:	f000 f8bf 	bl	80022f6 <_ZSt10_ConstructI8ObstacleJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8002178:	f107 030c 	add.w	r3, r7, #12
 800217c:	4618      	mov	r0, r3
 800217e:	f000 f89d 	bl	80022bc <_ZNSt13move_iteratorIP8ObstacleEppEv>
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	330c      	adds	r3, #12
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	f107 0208 	add.w	r2, r7, #8
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f881 	bl	800229a <_ZStneIP8ObstacleEbRKSt13move_iteratorIT_ES6_>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1de      	bne.n	800215c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP8ObstacleES4_EET0_T_S7_S6_+0x12>
	      return __cur;
 800219e:	697b      	ldr	r3, [r7, #20]
	}
 80021a0:	4618      	mov	r0, r3
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd90      	pop	{r4, r7, pc}

080021a8 <_ZN10GameObjectaSERKS_>:
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	7a1a      	ldrb	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	721a      	strb	r2, [r3, #8]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	7a5a      	ldrb	r2, [r3, #9]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	725a      	strb	r2, [r3, #9]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <_ZN8ObstacleaSEOS_>:
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ffdd 	bl	80021a8 <_ZN10GameObjectaSERKS_>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIP8ObstacleS4_EET0_T_S6_S5_>:
	__copy_m(_II __first, _II __last, _OI __result)
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	109b      	asrs	r3, r3, #2
 800220c:	4a0e      	ldr	r2, [pc, #56]	; (8002248 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIP8ObstacleS4_EET0_T_S6_S5_+0x50>)
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	e010      	b.n	8002238 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIP8ObstacleS4_EET0_T_S6_S5_+0x40>
	      *__result = std::move(*__first);
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f884 	bl	8002324 <_ZSt4moveIR8ObstacleEONSt16remove_referenceIT_E4typeEOS3_>
 800221c:	4603      	mov	r3, r0
 800221e:	4619      	mov	r1, r3
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ffd9 	bl	80021d8 <_ZN8ObstacleaSEOS_>
	      ++__first;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	330c      	adds	r3, #12
 800222a:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	330c      	adds	r3, #12
 8002230:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	3b01      	subs	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2b00      	cmp	r3, #0
 800223c:	dceb      	bgt.n	8002216 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIP8ObstacleS4_EET0_T_S6_S5_+0x1e>
	  return __result;
 800223e:	687b      	ldr	r3, [r7, #4]
	}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	aaaaaaab 	.word	0xaaaaaaab

0800224c <_ZNK9__gnu_cxx13new_allocatorI8ObstacleE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff fe77 	bl	8001f48 <_ZNK9__gnu_cxx13new_allocatorI8ObstacleE11_M_max_sizeEv>
 800225a:	4603      	mov	r3, r0
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <_ZSt19__relocate_object_aI8ObstacleS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8002270:	68b8      	ldr	r0, [r7, #8]
 8002272:	f000 f857 	bl	8002324 <_ZSt4moveIR8ObstacleEONSt16remove_referenceIT_E4typeEOS3_>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	68f9      	ldr	r1, [r7, #12]
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff fa9c 	bl	80017ba <_ZNSt16allocator_traitsISaI8ObstacleEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8002282:	68b8      	ldr	r0, [r7, #8]
 8002284:	f7ff fedd 	bl	8002042 <_ZSt11__addressofI8ObstacleEPT_RS1_>
 8002288:	4603      	mov	r3, r0
 800228a:	4619      	mov	r1, r3
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff fc0f 	bl	8001ab0 <_ZNSt16allocator_traitsISaI8ObstacleEE7destroyIS0_EEvRS1_PT_>
    }
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <_ZStneIP8ObstacleEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 80022a4:	6839      	ldr	r1, [r7, #0]
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f847 	bl	800233a <_ZSteqIP8ObstacleEbRKSt13move_iteratorIT_ES6_>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f083 0301 	eor.w	r3, r3, #1
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <_ZNSt13move_iteratorIP8ObstacleEppEv>:
      operator++()
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	++_M_current;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f103 020c 	add.w	r2, r3, #12
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	601a      	str	r2, [r3, #0]
	return *this;
 80022d0:	687b      	ldr	r3, [r7, #4]
      }
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <_ZNKSt13move_iteratorIP8ObstacleEdeEv>:
      operator*() const
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <_ZSt10_ConstructI8ObstacleJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80022f6:	b590      	push	{r4, r7, lr}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8002300:	6838      	ldr	r0, [r7, #0]
 8002302:	f7ff fa4f 	bl	80017a4 <_ZSt7forwardI8ObstacleEOT_RNSt16remove_referenceIS1_E4typeE>
 8002306:	4604      	mov	r4, r0
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4619      	mov	r1, r3
 800230c:	200c      	movs	r0, #12
 800230e:	f7fe fc1e 	bl	8000b4e <_ZnwjPv>
 8002312:	4603      	mov	r3, r0
 8002314:	4621      	mov	r1, r4
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fbd8 	bl	8001acc <_ZN8ObstacleC1EOS_>
    }
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bd90      	pop	{r4, r7, pc}

08002324 <_ZSt4moveIR8ObstacleEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <_ZSteqIP8ObstacleEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 800233a:	b590      	push	{r4, r7, lr}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f80e 	bl	8002366 <_ZNKSt13move_iteratorIP8ObstacleE4baseEv>
 800234a:	4604      	mov	r4, r0
 800234c:	6838      	ldr	r0, [r7, #0]
 800234e:	f000 f80a 	bl	8002366 <_ZNKSt13move_iteratorIP8ObstacleE4baseEv>
 8002352:	4603      	mov	r3, r0
 8002354:	429c      	cmp	r4, r3
 8002356:	bf0c      	ite	eq
 8002358:	2301      	moveq	r3, #1
 800235a:	2300      	movne	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bd90      	pop	{r4, r7, pc}

08002366 <_ZNKSt13move_iteratorIP8ObstacleE4baseEv>:
      base() const
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <_ZN4DinoD1Ev>:
class Dino : public GameObject
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <_ZN4DinoD1Ev+0x20>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe fa69 	bl	8000868 <_ZN10GameObjectD1Ev>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	08004e90 	.word	0x08004e90

080023a4 <_ZN4DinoD0Ev>:
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ffe7 	bl	8002380 <_ZN4DinoD1Ev>
 80023b2:	211c      	movs	r1, #28
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f001 fb1d 	bl	80039f4 <_ZdlPvj>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <_ZN5ScoreD1Ev>:
class Score : public GameObject {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <_ZN5ScoreD1Ev+0x20>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe fa47 	bl	8000868 <_ZN10GameObjectD1Ev>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	08004ea4 	.word	0x08004ea4

080023e8 <_ZN5ScoreD0Ev>:
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ffe7 	bl	80023c4 <_ZN5ScoreD1Ev>
 80023f6:	210c      	movs	r1, #12
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f001 fafb 	bl	80039f4 <_ZdlPvj>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_ZN8ObstacleD1Ev>:
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	4a05      	ldr	r2, [pc, #20]	; (8002428 <_ZN8ObstacleD1Ev+0x20>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fa25 	bl	8000868 <_ZN10GameObjectD1Ev>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	08004eb8 	.word	0x08004eb8

0800242c <_ZN8ObstacleD0Ev>:
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ffe7 	bl	8002408 <_ZN8ObstacleD1Ev>
 800243a:	210c      	movs	r1, #12
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f001 fad9 	bl	80039f4 <_ZdlPvj>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002452:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <HAL_MspInit+0x44>)
 8002454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002456:	4a0e      	ldr	r2, [pc, #56]	; (8002490 <HAL_MspInit+0x44>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6613      	str	r3, [r2, #96]	; 0x60
 800245e:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_MspInit+0x44>)
 8002460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	607b      	str	r3, [r7, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_MspInit+0x44>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246e:	4a08      	ldr	r2, [pc, #32]	; (8002490 <HAL_MspInit+0x44>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002474:	6593      	str	r3, [r2, #88]	; 0x58
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_MspInit+0x44>)
 8002478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000

08002494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002498:	e7fe      	b.n	8002498 <NMI_Handler+0x4>

0800249a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800249e:	e7fe      	b.n	800249e <HardFault_Handler+0x4>

080024a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a4:	e7fe      	b.n	80024a4 <MemManage_Handler+0x4>

080024a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024aa:	e7fe      	b.n	80024aa <BusFault_Handler+0x4>

080024ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <UsageFault_Handler+0x4>

080024b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e0:	f000 f958 	bl	8002794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return 1;
 80024ec:	2301      	movs	r3, #1
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <_kill>:

int _kill(int pid, int sig)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002502:	f001 fd95 	bl	8004030 <__errno>
 8002506:	4603      	mov	r3, r0
 8002508:	2216      	movs	r2, #22
 800250a:	601a      	str	r2, [r3, #0]
  return -1;
 800250c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <_exit>:

void _exit (int status)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002520:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ffe7 	bl	80024f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800252a:	e7fe      	b.n	800252a <_exit+0x12>

0800252c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	e00a      	b.n	8002554 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800253e:	f3af 8000 	nop.w
 8002542:	4601      	mov	r1, r0
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	60ba      	str	r2, [r7, #8]
 800254a:	b2ca      	uxtb	r2, r1
 800254c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	3301      	adds	r3, #1
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	429a      	cmp	r2, r3
 800255a:	dbf0      	blt.n	800253e <_read+0x12>
  }

  return len;
 800255c:	687b      	ldr	r3, [r7, #4]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b086      	sub	sp, #24
 800256a:	af00      	add	r7, sp, #0
 800256c:	60f8      	str	r0, [r7, #12]
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	e009      	b.n	800258c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	60ba      	str	r2, [r7, #8]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	3301      	adds	r3, #1
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	dbf1      	blt.n	8002578 <_write+0x12>
  }
  return len;
 8002594:	687b      	ldr	r3, [r7, #4]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <_close>:

int _close(int file)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025c6:	605a      	str	r2, [r3, #4]
  return 0;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <_isatty>:

int _isatty(int file)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025de:	2301      	movs	r3, #1
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002610:	4a14      	ldr	r2, [pc, #80]	; (8002664 <_sbrk+0x5c>)
 8002612:	4b15      	ldr	r3, [pc, #84]	; (8002668 <_sbrk+0x60>)
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800261c:	4b13      	ldr	r3, [pc, #76]	; (800266c <_sbrk+0x64>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d102      	bne.n	800262a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <_sbrk+0x64>)
 8002626:	4a12      	ldr	r2, [pc, #72]	; (8002670 <_sbrk+0x68>)
 8002628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <_sbrk+0x64>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4413      	add	r3, r2
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	429a      	cmp	r2, r3
 8002636:	d207      	bcs.n	8002648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002638:	f001 fcfa 	bl	8004030 <__errno>
 800263c:	4603      	mov	r3, r0
 800263e:	220c      	movs	r2, #12
 8002640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002646:	e009      	b.n	800265c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <_sbrk+0x64>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800264e:	4b07      	ldr	r3, [pc, #28]	; (800266c <_sbrk+0x64>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	4a05      	ldr	r2, [pc, #20]	; (800266c <_sbrk+0x64>)
 8002658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800265a:	68fb      	ldr	r3, [r7, #12]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20018000 	.word	0x20018000
 8002668:	00000400 	.word	0x00000400
 800266c:	200000c4 	.word	0x200000c4
 8002670:	20000220 	.word	0x20000220

08002674 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <SystemInit+0x20>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267e:	4a05      	ldr	r2, [pc, #20]	; (8002694 <SystemInit+0x20>)
 8002680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800269c:	f7ff ffea 	bl	8002674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a0:	480c      	ldr	r0, [pc, #48]	; (80026d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80026a2:	490d      	ldr	r1, [pc, #52]	; (80026d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026a4:	4a0d      	ldr	r2, [pc, #52]	; (80026dc <LoopForever+0xe>)
  movs r3, #0
 80026a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026a8:	e002      	b.n	80026b0 <LoopCopyDataInit>

080026aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ae:	3304      	adds	r3, #4

080026b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b4:	d3f9      	bcc.n	80026aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026b8:	4c0a      	ldr	r4, [pc, #40]	; (80026e4 <LoopForever+0x16>)
  movs r3, #0
 80026ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026bc:	e001      	b.n	80026c2 <LoopFillZerobss>

080026be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c0:	3204      	adds	r2, #4

080026c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c4:	d3fb      	bcc.n	80026be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026c6:	f001 fcb9 	bl	800403c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026ca:	f7fe fd4b 	bl	8001164 <main>

080026ce <LoopForever>:

LoopForever:
    b LoopForever
 80026ce:	e7fe      	b.n	80026ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80026d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026d8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80026dc:	08005000 	.word	0x08005000
  ldr r2, =_sbss
 80026e0:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80026e4:	2000021c 	.word	0x2000021c

080026e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026e8:	e7fe      	b.n	80026e8 <ADC1_2_IRQHandler>

080026ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f4:	2003      	movs	r0, #3
 80026f6:	f000 f943 	bl	8002980 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026fa:	200f      	movs	r0, #15
 80026fc:	f000 f80e 	bl	800271c <HAL_InitTick>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	71fb      	strb	r3, [r7, #7]
 800270a:	e001      	b.n	8002710 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800270c:	f7ff fe9e 	bl	800244c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002710:	79fb      	ldrb	r3, [r7, #7]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002728:	4b17      	ldr	r3, [pc, #92]	; (8002788 <HAL_InitTick+0x6c>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d023      	beq.n	8002778 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002730:	4b16      	ldr	r3, [pc, #88]	; (800278c <HAL_InitTick+0x70>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b14      	ldr	r3, [pc, #80]	; (8002788 <HAL_InitTick+0x6c>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	4619      	mov	r1, r3
 800273a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800273e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	4618      	mov	r0, r3
 8002748:	f000 f941 	bl	80029ce <HAL_SYSTICK_Config>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10f      	bne.n	8002772 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b0f      	cmp	r3, #15
 8002756:	d809      	bhi.n	800276c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002758:	2200      	movs	r2, #0
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002760:	f000 f919 	bl	8002996 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002764:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <HAL_InitTick+0x74>)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	e007      	b.n	800277c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
 8002770:	e004      	b.n	800277c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	73fb      	strb	r3, [r7, #15]
 8002776:	e001      	b.n	800277c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800277c:	7bfb      	ldrb	r3, [r7, #15]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000040 	.word	0x20000040
 800278c:	20000038 	.word	0x20000038
 8002790:	2000003c 	.word	0x2000003c

08002794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_IncTick+0x20>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_IncTick+0x24>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <HAL_IncTick+0x24>)
 80027a6:	6013      	str	r3, [r2, #0]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000040 	.word	0x20000040
 80027b8:	200000c8 	.word	0x200000c8

080027bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return uwTick;
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_GetTick+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	200000c8 	.word	0x200000c8

080027d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027dc:	f7ff ffee 	bl	80027bc <HAL_GetTick>
 80027e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027ec:	d005      	beq.n	80027fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <HAL_Delay+0x44>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027fa:	bf00      	nop
 80027fc:	f7ff ffde 	bl	80027bc <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	429a      	cmp	r2, r3
 800280a:	d8f7      	bhi.n	80027fc <HAL_Delay+0x28>
  {
  }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000040 	.word	0x20000040

0800281c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <__NVIC_SetPriorityGrouping+0x44>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002838:	4013      	ands	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800284c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284e:	4a04      	ldr	r2, [pc, #16]	; (8002860 <__NVIC_SetPriorityGrouping+0x44>)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	60d3      	str	r3, [r2, #12]
}
 8002854:	bf00      	nop
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <__NVIC_GetPriorityGrouping+0x18>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	f003 0307 	and.w	r3, r3, #7
}
 8002872:	4618      	mov	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	6039      	str	r1, [r7, #0]
 800288a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002890:	2b00      	cmp	r3, #0
 8002892:	db0a      	blt.n	80028aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	b2da      	uxtb	r2, r3
 8002898:	490c      	ldr	r1, [pc, #48]	; (80028cc <__NVIC_SetPriority+0x4c>)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	0112      	lsls	r2, r2, #4
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	440b      	add	r3, r1
 80028a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a8:	e00a      	b.n	80028c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4908      	ldr	r1, [pc, #32]	; (80028d0 <__NVIC_SetPriority+0x50>)
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	3b04      	subs	r3, #4
 80028b8:	0112      	lsls	r2, r2, #4
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	440b      	add	r3, r1
 80028be:	761a      	strb	r2, [r3, #24]
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000e100 	.word	0xe000e100
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b089      	sub	sp, #36	; 0x24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f1c3 0307 	rsb	r3, r3, #7
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	bf28      	it	cs
 80028f2:	2304      	movcs	r3, #4
 80028f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3304      	adds	r3, #4
 80028fa:	2b06      	cmp	r3, #6
 80028fc:	d902      	bls.n	8002904 <NVIC_EncodePriority+0x30>
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3b03      	subs	r3, #3
 8002902:	e000      	b.n	8002906 <NVIC_EncodePriority+0x32>
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43da      	mvns	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	401a      	ands	r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800291c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
 8002926:	43d9      	mvns	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800292c:	4313      	orrs	r3, r2
         );
}
 800292e:	4618      	mov	r0, r3
 8002930:	3724      	adds	r7, #36	; 0x24
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800294c:	d301      	bcc.n	8002952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800294e:	2301      	movs	r3, #1
 8002950:	e00f      	b.n	8002972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002952:	4a0a      	ldr	r2, [pc, #40]	; (800297c <SysTick_Config+0x40>)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3b01      	subs	r3, #1
 8002958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800295a:	210f      	movs	r1, #15
 800295c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002960:	f7ff ff8e 	bl	8002880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <SysTick_Config+0x40>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800296a:	4b04      	ldr	r3, [pc, #16]	; (800297c <SysTick_Config+0x40>)
 800296c:	2207      	movs	r2, #7
 800296e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	e000e010 	.word	0xe000e010

08002980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff ff47 	bl	800281c <__NVIC_SetPriorityGrouping>
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b086      	sub	sp, #24
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029a8:	f7ff ff5c 	bl	8002864 <__NVIC_GetPriorityGrouping>
 80029ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	6978      	ldr	r0, [r7, #20]
 80029b4:	f7ff ff8e 	bl	80028d4 <NVIC_EncodePriority>
 80029b8:	4602      	mov	r2, r0
 80029ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff5d 	bl	8002880 <__NVIC_SetPriority>
}
 80029c6:	bf00      	nop
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff ffb0 	bl	800293c <SysTick_Config>
 80029dc:	4603      	mov	r3, r0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029f6:	e17f      	b.n	8002cf8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	2101      	movs	r1, #1
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	4013      	ands	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8171 	beq.w	8002cf2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d005      	beq.n	8002a28 <HAL_GPIO_Init+0x40>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d130      	bne.n	8002a8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	2203      	movs	r2, #3
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a5e:	2201      	movs	r2, #1
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	f003 0201 	and.w	r2, r3, #1
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d118      	bne.n	8002ac8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	08db      	lsrs	r3, r3, #3
 8002ab2:	f003 0201 	and.w	r2, r3, #1
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d017      	beq.n	8002b04 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	2203      	movs	r2, #3
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d123      	bne.n	8002b58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	08da      	lsrs	r2, r3, #3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3208      	adds	r2, #8
 8002b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	220f      	movs	r2, #15
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	08da      	lsrs	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3208      	adds	r2, #8
 8002b52:	6939      	ldr	r1, [r7, #16]
 8002b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	2203      	movs	r2, #3
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0203 	and.w	r2, r3, #3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80ac 	beq.w	8002cf2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9a:	4b5f      	ldr	r3, [pc, #380]	; (8002d18 <HAL_GPIO_Init+0x330>)
 8002b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9e:	4a5e      	ldr	r2, [pc, #376]	; (8002d18 <HAL_GPIO_Init+0x330>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ba6:	4b5c      	ldr	r3, [pc, #368]	; (8002d18 <HAL_GPIO_Init+0x330>)
 8002ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bb2:	4a5a      	ldr	r2, [pc, #360]	; (8002d1c <HAL_GPIO_Init+0x334>)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	089b      	lsrs	r3, r3, #2
 8002bb8:	3302      	adds	r3, #2
 8002bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	220f      	movs	r2, #15
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bdc:	d025      	beq.n	8002c2a <HAL_GPIO_Init+0x242>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a4f      	ldr	r2, [pc, #316]	; (8002d20 <HAL_GPIO_Init+0x338>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d01f      	beq.n	8002c26 <HAL_GPIO_Init+0x23e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a4e      	ldr	r2, [pc, #312]	; (8002d24 <HAL_GPIO_Init+0x33c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d019      	beq.n	8002c22 <HAL_GPIO_Init+0x23a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a4d      	ldr	r2, [pc, #308]	; (8002d28 <HAL_GPIO_Init+0x340>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <HAL_GPIO_Init+0x236>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a4c      	ldr	r2, [pc, #304]	; (8002d2c <HAL_GPIO_Init+0x344>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00d      	beq.n	8002c1a <HAL_GPIO_Init+0x232>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a4b      	ldr	r2, [pc, #300]	; (8002d30 <HAL_GPIO_Init+0x348>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d007      	beq.n	8002c16 <HAL_GPIO_Init+0x22e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a4a      	ldr	r2, [pc, #296]	; (8002d34 <HAL_GPIO_Init+0x34c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d101      	bne.n	8002c12 <HAL_GPIO_Init+0x22a>
 8002c0e:	2306      	movs	r3, #6
 8002c10:	e00c      	b.n	8002c2c <HAL_GPIO_Init+0x244>
 8002c12:	2307      	movs	r3, #7
 8002c14:	e00a      	b.n	8002c2c <HAL_GPIO_Init+0x244>
 8002c16:	2305      	movs	r3, #5
 8002c18:	e008      	b.n	8002c2c <HAL_GPIO_Init+0x244>
 8002c1a:	2304      	movs	r3, #4
 8002c1c:	e006      	b.n	8002c2c <HAL_GPIO_Init+0x244>
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e004      	b.n	8002c2c <HAL_GPIO_Init+0x244>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e002      	b.n	8002c2c <HAL_GPIO_Init+0x244>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_GPIO_Init+0x244>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	f002 0203 	and.w	r2, r2, #3
 8002c32:	0092      	lsls	r2, r2, #2
 8002c34:	4093      	lsls	r3, r2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c3c:	4937      	ldr	r1, [pc, #220]	; (8002d1c <HAL_GPIO_Init+0x334>)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	089b      	lsrs	r3, r3, #2
 8002c42:	3302      	adds	r3, #2
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c4a:	4b3b      	ldr	r3, [pc, #236]	; (8002d38 <HAL_GPIO_Init+0x350>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c6e:	4a32      	ldr	r2, [pc, #200]	; (8002d38 <HAL_GPIO_Init+0x350>)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c74:	4b30      	ldr	r3, [pc, #192]	; (8002d38 <HAL_GPIO_Init+0x350>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c98:	4a27      	ldr	r2, [pc, #156]	; (8002d38 <HAL_GPIO_Init+0x350>)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c9e:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <HAL_GPIO_Init+0x350>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cc2:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <HAL_GPIO_Init+0x350>)
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_GPIO_Init+0x350>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cec:	4a12      	ldr	r2, [pc, #72]	; (8002d38 <HAL_GPIO_Init+0x350>)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f47f ae78 	bne.w	80029f8 <HAL_GPIO_Init+0x10>
  }
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40010000 	.word	0x40010000
 8002d20:	48000400 	.word	0x48000400
 8002d24:	48000800 	.word	0x48000800
 8002d28:	48000c00 	.word	0x48000c00
 8002d2c:	48001000 	.word	0x48001000
 8002d30:	48001400 	.word	0x48001400
 8002d34:	48001800 	.word	0x48001800
 8002d38:	40010400 	.word	0x40010400

08002d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	887b      	ldrh	r3, [r7, #2]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	e001      	b.n	8002d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	807b      	strh	r3, [r7, #2]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d7c:	787b      	ldrb	r3, [r7, #1]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d82:	887a      	ldrh	r2, [r7, #2]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d88:	e002      	b.n	8002d90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d8a:	887a      	ldrh	r2, [r7, #2]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002da0:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40007000 	.word	0x40007000

08002db8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dc6:	d130      	bne.n	8002e2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dc8:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dd4:	d038      	beq.n	8002e48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dd6:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dde:	4a1e      	ldr	r2, [pc, #120]	; (8002e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002de4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002de6:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2232      	movs	r2, #50	; 0x32
 8002dec:	fb02 f303 	mul.w	r3, r2, r3
 8002df0:	4a1b      	ldr	r2, [pc, #108]	; (8002e60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	0c9b      	lsrs	r3, r3, #18
 8002df8:	3301      	adds	r3, #1
 8002dfa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dfc:	e002      	b.n	8002e04 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e04:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e10:	d102      	bne.n	8002e18 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f2      	bne.n	8002dfe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e18:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e24:	d110      	bne.n	8002e48 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e00f      	b.n	8002e4a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e36:	d007      	beq.n	8002e48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e38:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e40:	4a05      	ldr	r2, [pc, #20]	; (8002e58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e46:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40007000 	.word	0x40007000
 8002e5c:	20000038 	.word	0x20000038
 8002e60:	431bde83 	.word	0x431bde83

08002e64 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e3ca      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e76:	4b97      	ldr	r3, [pc, #604]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e80:	4b94      	ldr	r3, [pc, #592]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 80e4 	beq.w	8003060 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <HAL_RCC_OscConfig+0x4a>
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	2b0c      	cmp	r3, #12
 8002ea2:	f040 808b 	bne.w	8002fbc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	f040 8087 	bne.w	8002fbc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eae:	4b89      	ldr	r3, [pc, #548]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x62>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e3a2      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1a      	ldr	r2, [r3, #32]
 8002eca:	4b82      	ldr	r3, [pc, #520]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d004      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x7c>
 8002ed6:	4b7f      	ldr	r3, [pc, #508]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ede:	e005      	b.n	8002eec <HAL_RCC_OscConfig+0x88>
 8002ee0:	4b7c      	ldr	r3, [pc, #496]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee6:	091b      	lsrs	r3, r3, #4
 8002ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d223      	bcs.n	8002f38 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fd1d 	bl	8003934 <RCC_SetFlashLatencyFromMSIRange>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e383      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f04:	4b73      	ldr	r3, [pc, #460]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a72      	ldr	r2, [pc, #456]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002f0a:	f043 0308 	orr.w	r3, r3, #8
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	4b70      	ldr	r3, [pc, #448]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	496d      	ldr	r1, [pc, #436]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f22:	4b6c      	ldr	r3, [pc, #432]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	021b      	lsls	r3, r3, #8
 8002f30:	4968      	ldr	r1, [pc, #416]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]
 8002f36:	e025      	b.n	8002f84 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f38:	4b66      	ldr	r3, [pc, #408]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a65      	ldr	r2, [pc, #404]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002f3e:	f043 0308 	orr.w	r3, r3, #8
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4b63      	ldr	r3, [pc, #396]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	4960      	ldr	r1, [pc, #384]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f56:	4b5f      	ldr	r3, [pc, #380]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	021b      	lsls	r3, r3, #8
 8002f64:	495b      	ldr	r1, [pc, #364]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d109      	bne.n	8002f84 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fcdd 	bl	8003934 <RCC_SetFlashLatencyFromMSIRange>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e343      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f84:	f000 fc4a 	bl	800381c <HAL_RCC_GetSysClockFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b52      	ldr	r3, [pc, #328]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	4950      	ldr	r1, [pc, #320]	; (80030d8 <HAL_RCC_OscConfig+0x274>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa0:	4a4e      	ldr	r2, [pc, #312]	; (80030dc <HAL_RCC_OscConfig+0x278>)
 8002fa2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fa4:	4b4e      	ldr	r3, [pc, #312]	; (80030e0 <HAL_RCC_OscConfig+0x27c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff fbb7 	bl	800271c <HAL_InitTick>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d052      	beq.n	800305e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	e327      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d032      	beq.n	800302a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fc4:	4b43      	ldr	r3, [pc, #268]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a42      	ldr	r2, [pc, #264]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fd0:	f7ff fbf4 	bl	80027bc <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fd8:	f7ff fbf0 	bl	80027bc <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e310      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fea:	4b3a      	ldr	r3, [pc, #232]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ff6:	4b37      	ldr	r3, [pc, #220]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a36      	ldr	r2, [pc, #216]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8002ffc:	f043 0308 	orr.w	r3, r3, #8
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	4b34      	ldr	r3, [pc, #208]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	4931      	ldr	r1, [pc, #196]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8003010:	4313      	orrs	r3, r2
 8003012:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003014:	4b2f      	ldr	r3, [pc, #188]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	492c      	ldr	r1, [pc, #176]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
 8003028:	e01a      	b.n	8003060 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800302a:	4b2a      	ldr	r3, [pc, #168]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a29      	ldr	r2, [pc, #164]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003036:	f7ff fbc1 	bl	80027bc <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800303e:	f7ff fbbd 	bl	80027bc <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e2dd      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003050:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f0      	bne.n	800303e <HAL_RCC_OscConfig+0x1da>
 800305c:	e000      	b.n	8003060 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800305e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d074      	beq.n	8003156 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b08      	cmp	r3, #8
 8003070:	d005      	beq.n	800307e <HAL_RCC_OscConfig+0x21a>
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b0c      	cmp	r3, #12
 8003076:	d10e      	bne.n	8003096 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d10b      	bne.n	8003096 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307e:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d064      	beq.n	8003154 <HAL_RCC_OscConfig+0x2f0>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d160      	bne.n	8003154 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e2ba      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309e:	d106      	bne.n	80030ae <HAL_RCC_OscConfig+0x24a>
 80030a0:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 80030a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	e026      	b.n	80030fc <HAL_RCC_OscConfig+0x298>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030b6:	d115      	bne.n	80030e4 <HAL_RCC_OscConfig+0x280>
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a05      	ldr	r2, [pc, #20]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 80030be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a02      	ldr	r2, [pc, #8]	; (80030d4 <HAL_RCC_OscConfig+0x270>)
 80030ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	e014      	b.n	80030fc <HAL_RCC_OscConfig+0x298>
 80030d2:	bf00      	nop
 80030d4:	40021000 	.word	0x40021000
 80030d8:	08004ed8 	.word	0x08004ed8
 80030dc:	20000038 	.word	0x20000038
 80030e0:	2000003c 	.word	0x2000003c
 80030e4:	4ba0      	ldr	r3, [pc, #640]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a9f      	ldr	r2, [pc, #636]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 80030ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	4b9d      	ldr	r3, [pc, #628]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a9c      	ldr	r2, [pc, #624]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 80030f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d013      	beq.n	800312c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7ff fb5a 	bl	80027bc <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800310c:	f7ff fb56 	bl	80027bc <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	; 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e276      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800311e:	4b92      	ldr	r3, [pc, #584]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x2a8>
 800312a:	e014      	b.n	8003156 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7ff fb46 	bl	80027bc <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003134:	f7ff fb42 	bl	80027bc <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b64      	cmp	r3, #100	; 0x64
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e262      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003146:	4b88      	ldr	r3, [pc, #544]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x2d0>
 8003152:	e000      	b.n	8003156 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d060      	beq.n	8003224 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	2b04      	cmp	r3, #4
 8003166:	d005      	beq.n	8003174 <HAL_RCC_OscConfig+0x310>
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	2b0c      	cmp	r3, #12
 800316c:	d119      	bne.n	80031a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2b02      	cmp	r3, #2
 8003172:	d116      	bne.n	80031a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003174:	4b7c      	ldr	r3, [pc, #496]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_OscConfig+0x328>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e23f      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318c:	4b76      	ldr	r3, [pc, #472]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	061b      	lsls	r3, r3, #24
 800319a:	4973      	ldr	r1, [pc, #460]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 800319c:	4313      	orrs	r3, r2
 800319e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031a0:	e040      	b.n	8003224 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d023      	beq.n	80031f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031aa:	4b6f      	ldr	r3, [pc, #444]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a6e      	ldr	r2, [pc, #440]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 80031b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b6:	f7ff fb01 	bl	80027bc <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031be:	f7ff fafd 	bl	80027bc <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e21d      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031d0:	4b65      	ldr	r3, [pc, #404]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031dc:	4b62      	ldr	r3, [pc, #392]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	061b      	lsls	r3, r3, #24
 80031ea:	495f      	ldr	r1, [pc, #380]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]
 80031f0:	e018      	b.n	8003224 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f2:	4b5d      	ldr	r3, [pc, #372]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a5c      	ldr	r2, [pc, #368]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 80031f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fe:	f7ff fadd 	bl	80027bc <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003206:	f7ff fad9 	bl	80027bc <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e1f9      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003218:	4b53      	ldr	r3, [pc, #332]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1f0      	bne.n	8003206 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d03c      	beq.n	80032aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d01c      	beq.n	8003272 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003238:	4b4b      	ldr	r3, [pc, #300]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 800323a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323e:	4a4a      	ldr	r2, [pc, #296]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003248:	f7ff fab8 	bl	80027bc <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003250:	f7ff fab4 	bl	80027bc <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e1d4      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003262:	4b41      	ldr	r3, [pc, #260]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 8003264:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0ef      	beq.n	8003250 <HAL_RCC_OscConfig+0x3ec>
 8003270:	e01b      	b.n	80032aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003272:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 8003274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003278:	4a3b      	ldr	r2, [pc, #236]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 800327a:	f023 0301 	bic.w	r3, r3, #1
 800327e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003282:	f7ff fa9b 	bl	80027bc <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800328a:	f7ff fa97 	bl	80027bc <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e1b7      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800329c:	4b32      	ldr	r3, [pc, #200]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 800329e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1ef      	bne.n	800328a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80a6 	beq.w	8003404 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b8:	2300      	movs	r3, #0
 80032ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032bc:	4b2a      	ldr	r3, [pc, #168]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 80032be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10d      	bne.n	80032e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c8:	4b27      	ldr	r3, [pc, #156]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 80032ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032cc:	4a26      	ldr	r2, [pc, #152]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 80032ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d2:	6593      	str	r3, [r2, #88]	; 0x58
 80032d4:	4b24      	ldr	r3, [pc, #144]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 80032d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e0:	2301      	movs	r3, #1
 80032e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e4:	4b21      	ldr	r3, [pc, #132]	; (800336c <HAL_RCC_OscConfig+0x508>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d118      	bne.n	8003322 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f0:	4b1e      	ldr	r3, [pc, #120]	; (800336c <HAL_RCC_OscConfig+0x508>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1d      	ldr	r2, [pc, #116]	; (800336c <HAL_RCC_OscConfig+0x508>)
 80032f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fc:	f7ff fa5e 	bl	80027bc <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003304:	f7ff fa5a 	bl	80027bc <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e17a      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003316:	4b15      	ldr	r3, [pc, #84]	; (800336c <HAL_RCC_OscConfig+0x508>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d108      	bne.n	800333c <HAL_RCC_OscConfig+0x4d8>
 800332a:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 800332c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003330:	4a0d      	ldr	r2, [pc, #52]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800333a:	e029      	b.n	8003390 <HAL_RCC_OscConfig+0x52c>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b05      	cmp	r3, #5
 8003342:	d115      	bne.n	8003370 <HAL_RCC_OscConfig+0x50c>
 8003344:	4b08      	ldr	r3, [pc, #32]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 8003346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334a:	4a07      	ldr	r2, [pc, #28]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 800334c:	f043 0304 	orr.w	r3, r3, #4
 8003350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003354:	4b04      	ldr	r3, [pc, #16]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335a:	4a03      	ldr	r2, [pc, #12]	; (8003368 <HAL_RCC_OscConfig+0x504>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003364:	e014      	b.n	8003390 <HAL_RCC_OscConfig+0x52c>
 8003366:	bf00      	nop
 8003368:	40021000 	.word	0x40021000
 800336c:	40007000 	.word	0x40007000
 8003370:	4b9c      	ldr	r3, [pc, #624]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003376:	4a9b      	ldr	r2, [pc, #620]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003380:	4b98      	ldr	r3, [pc, #608]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003386:	4a97      	ldr	r2, [pc, #604]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 8003388:	f023 0304 	bic.w	r3, r3, #4
 800338c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d016      	beq.n	80033c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003398:	f7ff fa10 	bl	80027bc <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a0:	f7ff fa0c 	bl	80027bc <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e12a      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033b6:	4b8b      	ldr	r3, [pc, #556]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0ed      	beq.n	80033a0 <HAL_RCC_OscConfig+0x53c>
 80033c4:	e015      	b.n	80033f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c6:	f7ff f9f9 	bl	80027bc <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033cc:	e00a      	b.n	80033e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ce:	f7ff f9f5 	bl	80027bc <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033dc:	4293      	cmp	r3, r2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e113      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033e4:	4b7f      	ldr	r3, [pc, #508]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1ed      	bne.n	80033ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033f2:	7ffb      	ldrb	r3, [r7, #31]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d105      	bne.n	8003404 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f8:	4b7a      	ldr	r3, [pc, #488]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fc:	4a79      	ldr	r2, [pc, #484]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 80033fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003402:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80fe 	beq.w	800360a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	2b02      	cmp	r3, #2
 8003414:	f040 80d0 	bne.w	80035b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003418:	4b72      	ldr	r3, [pc, #456]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f003 0203 	and.w	r2, r3, #3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	429a      	cmp	r2, r3
 800342a:	d130      	bne.n	800348e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	3b01      	subs	r3, #1
 8003438:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800343a:	429a      	cmp	r2, r3
 800343c:	d127      	bne.n	800348e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003448:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800344a:	429a      	cmp	r2, r3
 800344c:	d11f      	bne.n	800348e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003458:	2a07      	cmp	r2, #7
 800345a:	bf14      	ite	ne
 800345c:	2201      	movne	r2, #1
 800345e:	2200      	moveq	r2, #0
 8003460:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003462:	4293      	cmp	r3, r2
 8003464:	d113      	bne.n	800348e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003470:	085b      	lsrs	r3, r3, #1
 8003472:	3b01      	subs	r3, #1
 8003474:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d109      	bne.n	800348e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	085b      	lsrs	r3, r3, #1
 8003486:	3b01      	subs	r3, #1
 8003488:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800348a:	429a      	cmp	r2, r3
 800348c:	d06e      	beq.n	800356c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	2b0c      	cmp	r3, #12
 8003492:	d069      	beq.n	8003568 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003494:	4b53      	ldr	r3, [pc, #332]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d105      	bne.n	80034ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80034a0:	4b50      	ldr	r3, [pc, #320]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0ad      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034b0:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a4b      	ldr	r2, [pc, #300]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 80034b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034bc:	f7ff f97e 	bl	80027bc <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c4:	f7ff f97a 	bl	80027bc <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e09a      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034d6:	4b43      	ldr	r3, [pc, #268]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034e2:	4b40      	ldr	r3, [pc, #256]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	4b40      	ldr	r3, [pc, #256]	; (80035e8 <HAL_RCC_OscConfig+0x784>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034f2:	3a01      	subs	r2, #1
 80034f4:	0112      	lsls	r2, r2, #4
 80034f6:	4311      	orrs	r1, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034fc:	0212      	lsls	r2, r2, #8
 80034fe:	4311      	orrs	r1, r2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003504:	0852      	lsrs	r2, r2, #1
 8003506:	3a01      	subs	r2, #1
 8003508:	0552      	lsls	r2, r2, #21
 800350a:	4311      	orrs	r1, r2
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003510:	0852      	lsrs	r2, r2, #1
 8003512:	3a01      	subs	r2, #1
 8003514:	0652      	lsls	r2, r2, #25
 8003516:	4311      	orrs	r1, r2
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800351c:	0912      	lsrs	r2, r2, #4
 800351e:	0452      	lsls	r2, r2, #17
 8003520:	430a      	orrs	r2, r1
 8003522:	4930      	ldr	r1, [pc, #192]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 8003524:	4313      	orrs	r3, r2
 8003526:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003528:	4b2e      	ldr	r3, [pc, #184]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a2d      	ldr	r2, [pc, #180]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 800352e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003532:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003534:	4b2b      	ldr	r3, [pc, #172]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4a2a      	ldr	r2, [pc, #168]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 800353a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800353e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003540:	f7ff f93c 	bl	80027bc <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003548:	f7ff f938 	bl	80027bc <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e058      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355a:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003566:	e050      	b.n	800360a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e04f      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356c:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d148      	bne.n	800360a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003578:	4b1a      	ldr	r3, [pc, #104]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a19      	ldr	r2, [pc, #100]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 800357e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003582:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003584:	4b17      	ldr	r3, [pc, #92]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4a16      	ldr	r2, [pc, #88]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 800358a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800358e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003590:	f7ff f914 	bl	80027bc <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003598:	f7ff f910 	bl	80027bc <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e030      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035aa:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0x734>
 80035b6:	e028      	b.n	800360a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b0c      	cmp	r3, #12
 80035bc:	d023      	beq.n	8003606 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035be:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a08      	ldr	r2, [pc, #32]	; (80035e4 <HAL_RCC_OscConfig+0x780>)
 80035c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ca:	f7ff f8f7 	bl	80027bc <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d0:	e00c      	b.n	80035ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d2:	f7ff f8f3 	bl	80027bc <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d905      	bls.n	80035ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e013      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
 80035e4:	40021000 	.word	0x40021000
 80035e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ec:	4b09      	ldr	r3, [pc, #36]	; (8003614 <HAL_RCC_OscConfig+0x7b0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1ec      	bne.n	80035d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035f8:	4b06      	ldr	r3, [pc, #24]	; (8003614 <HAL_RCC_OscConfig+0x7b0>)
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	4905      	ldr	r1, [pc, #20]	; (8003614 <HAL_RCC_OscConfig+0x7b0>)
 80035fe:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_RCC_OscConfig+0x7b4>)
 8003600:	4013      	ands	r3, r2
 8003602:	60cb      	str	r3, [r1, #12]
 8003604:	e001      	b.n	800360a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3720      	adds	r7, #32
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40021000 	.word	0x40021000
 8003618:	feeefffc 	.word	0xfeeefffc

0800361c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0e7      	b.n	8003800 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003630:	4b75      	ldr	r3, [pc, #468]	; (8003808 <HAL_RCC_ClockConfig+0x1ec>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d910      	bls.n	8003660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363e:	4b72      	ldr	r3, [pc, #456]	; (8003808 <HAL_RCC_ClockConfig+0x1ec>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 0207 	bic.w	r2, r3, #7
 8003646:	4970      	ldr	r1, [pc, #448]	; (8003808 <HAL_RCC_ClockConfig+0x1ec>)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b6e      	ldr	r3, [pc, #440]	; (8003808 <HAL_RCC_ClockConfig+0x1ec>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d001      	beq.n	8003660 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0cf      	b.n	8003800 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d010      	beq.n	800368e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	4b66      	ldr	r3, [pc, #408]	; (800380c <HAL_RCC_ClockConfig+0x1f0>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003678:	429a      	cmp	r2, r3
 800367a:	d908      	bls.n	800368e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800367c:	4b63      	ldr	r3, [pc, #396]	; (800380c <HAL_RCC_ClockConfig+0x1f0>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4960      	ldr	r1, [pc, #384]	; (800380c <HAL_RCC_ClockConfig+0x1f0>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d04c      	beq.n	8003734 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d107      	bne.n	80036b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a2:	4b5a      	ldr	r3, [pc, #360]	; (800380c <HAL_RCC_ClockConfig+0x1f0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d121      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e0a6      	b.n	8003800 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d107      	bne.n	80036ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ba:	4b54      	ldr	r3, [pc, #336]	; (800380c <HAL_RCC_ClockConfig+0x1f0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d115      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e09a      	b.n	8003800 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d107      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036d2:	4b4e      	ldr	r3, [pc, #312]	; (800380c <HAL_RCC_ClockConfig+0x1f0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e08e      	b.n	8003800 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036e2:	4b4a      	ldr	r3, [pc, #296]	; (800380c <HAL_RCC_ClockConfig+0x1f0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e086      	b.n	8003800 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036f2:	4b46      	ldr	r3, [pc, #280]	; (800380c <HAL_RCC_ClockConfig+0x1f0>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f023 0203 	bic.w	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4943      	ldr	r1, [pc, #268]	; (800380c <HAL_RCC_ClockConfig+0x1f0>)
 8003700:	4313      	orrs	r3, r2
 8003702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003704:	f7ff f85a 	bl	80027bc <HAL_GetTick>
 8003708:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370a:	e00a      	b.n	8003722 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800370c:	f7ff f856 	bl	80027bc <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	f241 3288 	movw	r2, #5000	; 0x1388
 800371a:	4293      	cmp	r3, r2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e06e      	b.n	8003800 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003722:	4b3a      	ldr	r3, [pc, #232]	; (800380c <HAL_RCC_ClockConfig+0x1f0>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 020c 	and.w	r2, r3, #12
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	429a      	cmp	r2, r3
 8003732:	d1eb      	bne.n	800370c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d010      	beq.n	8003762 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	4b31      	ldr	r3, [pc, #196]	; (800380c <HAL_RCC_ClockConfig+0x1f0>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800374c:	429a      	cmp	r2, r3
 800374e:	d208      	bcs.n	8003762 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003750:	4b2e      	ldr	r3, [pc, #184]	; (800380c <HAL_RCC_ClockConfig+0x1f0>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	492b      	ldr	r1, [pc, #172]	; (800380c <HAL_RCC_ClockConfig+0x1f0>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003762:	4b29      	ldr	r3, [pc, #164]	; (8003808 <HAL_RCC_ClockConfig+0x1ec>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d210      	bcs.n	8003792 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003770:	4b25      	ldr	r3, [pc, #148]	; (8003808 <HAL_RCC_ClockConfig+0x1ec>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f023 0207 	bic.w	r2, r3, #7
 8003778:	4923      	ldr	r1, [pc, #140]	; (8003808 <HAL_RCC_ClockConfig+0x1ec>)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	4313      	orrs	r3, r2
 800377e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003780:	4b21      	ldr	r3, [pc, #132]	; (8003808 <HAL_RCC_ClockConfig+0x1ec>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d001      	beq.n	8003792 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e036      	b.n	8003800 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	d008      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800379e:	4b1b      	ldr	r3, [pc, #108]	; (800380c <HAL_RCC_ClockConfig+0x1f0>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	4918      	ldr	r1, [pc, #96]	; (800380c <HAL_RCC_ClockConfig+0x1f0>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d009      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037bc:	4b13      	ldr	r3, [pc, #76]	; (800380c <HAL_RCC_ClockConfig+0x1f0>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	4910      	ldr	r1, [pc, #64]	; (800380c <HAL_RCC_ClockConfig+0x1f0>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037d0:	f000 f824 	bl	800381c <HAL_RCC_GetSysClockFreq>
 80037d4:	4602      	mov	r2, r0
 80037d6:	4b0d      	ldr	r3, [pc, #52]	; (800380c <HAL_RCC_ClockConfig+0x1f0>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	091b      	lsrs	r3, r3, #4
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	490b      	ldr	r1, [pc, #44]	; (8003810 <HAL_RCC_ClockConfig+0x1f4>)
 80037e2:	5ccb      	ldrb	r3, [r1, r3]
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	fa22 f303 	lsr.w	r3, r2, r3
 80037ec:	4a09      	ldr	r2, [pc, #36]	; (8003814 <HAL_RCC_ClockConfig+0x1f8>)
 80037ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <HAL_RCC_ClockConfig+0x1fc>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fe ff91 	bl	800271c <HAL_InitTick>
 80037fa:	4603      	mov	r3, r0
 80037fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80037fe:	7afb      	ldrb	r3, [r7, #11]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40022000 	.word	0x40022000
 800380c:	40021000 	.word	0x40021000
 8003810:	08004ed8 	.word	0x08004ed8
 8003814:	20000038 	.word	0x20000038
 8003818:	2000003c 	.word	0x2000003c

0800381c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800381c:	b480      	push	{r7}
 800381e:	b089      	sub	sp, #36	; 0x24
 8003820:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	2300      	movs	r3, #0
 8003828:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800382a:	4b3e      	ldr	r3, [pc, #248]	; (8003924 <HAL_RCC_GetSysClockFreq+0x108>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003834:	4b3b      	ldr	r3, [pc, #236]	; (8003924 <HAL_RCC_GetSysClockFreq+0x108>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_RCC_GetSysClockFreq+0x34>
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	2b0c      	cmp	r3, #12
 8003848:	d121      	bne.n	800388e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d11e      	bne.n	800388e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003850:	4b34      	ldr	r3, [pc, #208]	; (8003924 <HAL_RCC_GetSysClockFreq+0x108>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d107      	bne.n	800386c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800385c:	4b31      	ldr	r3, [pc, #196]	; (8003924 <HAL_RCC_GetSysClockFreq+0x108>)
 800385e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003862:	0a1b      	lsrs	r3, r3, #8
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	61fb      	str	r3, [r7, #28]
 800386a:	e005      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800386c:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <HAL_RCC_GetSysClockFreq+0x108>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003878:	4a2b      	ldr	r2, [pc, #172]	; (8003928 <HAL_RCC_GetSysClockFreq+0x10c>)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003880:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10d      	bne.n	80038a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800388c:	e00a      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b04      	cmp	r3, #4
 8003892:	d102      	bne.n	800389a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003894:	4b25      	ldr	r3, [pc, #148]	; (800392c <HAL_RCC_GetSysClockFreq+0x110>)
 8003896:	61bb      	str	r3, [r7, #24]
 8003898:	e004      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	2b08      	cmp	r3, #8
 800389e:	d101      	bne.n	80038a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038a0:	4b23      	ldr	r3, [pc, #140]	; (8003930 <HAL_RCC_GetSysClockFreq+0x114>)
 80038a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	2b0c      	cmp	r3, #12
 80038a8:	d134      	bne.n	8003914 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038aa:	4b1e      	ldr	r3, [pc, #120]	; (8003924 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d003      	beq.n	80038c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d003      	beq.n	80038c8 <HAL_RCC_GetSysClockFreq+0xac>
 80038c0:	e005      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038c2:	4b1a      	ldr	r3, [pc, #104]	; (800392c <HAL_RCC_GetSysClockFreq+0x110>)
 80038c4:	617b      	str	r3, [r7, #20]
      break;
 80038c6:	e005      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <HAL_RCC_GetSysClockFreq+0x114>)
 80038ca:	617b      	str	r3, [r7, #20]
      break;
 80038cc:	e002      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	617b      	str	r3, [r7, #20]
      break;
 80038d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038d4:	4b13      	ldr	r3, [pc, #76]	; (8003924 <HAL_RCC_GetSysClockFreq+0x108>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	3301      	adds	r3, #1
 80038e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <HAL_RCC_GetSysClockFreq+0x108>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	0a1b      	lsrs	r3, r3, #8
 80038e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	fb03 f202 	mul.w	r2, r3, r2
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <HAL_RCC_GetSysClockFreq+0x108>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	0e5b      	lsrs	r3, r3, #25
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	3301      	adds	r3, #1
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003912:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003914:	69bb      	ldr	r3, [r7, #24]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3724      	adds	r7, #36	; 0x24
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	40021000 	.word	0x40021000
 8003928:	08004ee8 	.word	0x08004ee8
 800392c:	00f42400 	.word	0x00f42400
 8003930:	007a1200 	.word	0x007a1200

08003934 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800393c:	2300      	movs	r3, #0
 800393e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003940:	4b2a      	ldr	r3, [pc, #168]	; (80039ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800394c:	f7ff fa26 	bl	8002d9c <HAL_PWREx_GetVoltageRange>
 8003950:	6178      	str	r0, [r7, #20]
 8003952:	e014      	b.n	800397e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003954:	4b25      	ldr	r3, [pc, #148]	; (80039ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003958:	4a24      	ldr	r2, [pc, #144]	; (80039ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800395a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395e:	6593      	str	r3, [r2, #88]	; 0x58
 8003960:	4b22      	ldr	r3, [pc, #136]	; (80039ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800396c:	f7ff fa16 	bl	8002d9c <HAL_PWREx_GetVoltageRange>
 8003970:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003972:	4b1e      	ldr	r3, [pc, #120]	; (80039ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003976:	4a1d      	ldr	r2, [pc, #116]	; (80039ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003984:	d10b      	bne.n	800399e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b80      	cmp	r3, #128	; 0x80
 800398a:	d919      	bls.n	80039c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2ba0      	cmp	r3, #160	; 0xa0
 8003990:	d902      	bls.n	8003998 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003992:	2302      	movs	r3, #2
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	e013      	b.n	80039c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003998:	2301      	movs	r3, #1
 800399a:	613b      	str	r3, [r7, #16]
 800399c:	e010      	b.n	80039c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b80      	cmp	r3, #128	; 0x80
 80039a2:	d902      	bls.n	80039aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039a4:	2303      	movs	r3, #3
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	e00a      	b.n	80039c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b80      	cmp	r3, #128	; 0x80
 80039ae:	d102      	bne.n	80039b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039b0:	2302      	movs	r3, #2
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	e004      	b.n	80039c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b70      	cmp	r3, #112	; 0x70
 80039ba:	d101      	bne.n	80039c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039bc:	2301      	movs	r3, #1
 80039be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f023 0207 	bic.w	r2, r3, #7
 80039c8:	4909      	ldr	r1, [pc, #36]	; (80039f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039d0:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d001      	beq.n	80039e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40022000 	.word	0x40022000

080039f4 <_ZdlPvj>:
 80039f4:	f000 b81a 	b.w	8003a2c <_ZdlPv>

080039f8 <_Znwj>:
 80039f8:	2801      	cmp	r0, #1
 80039fa:	bf38      	it	cc
 80039fc:	2001      	movcc	r0, #1
 80039fe:	b510      	push	{r4, lr}
 8003a00:	4604      	mov	r4, r0
 8003a02:	4620      	mov	r0, r4
 8003a04:	f000 f824 	bl	8003a50 <malloc>
 8003a08:	b100      	cbz	r0, 8003a0c <_Znwj+0x14>
 8003a0a:	bd10      	pop	{r4, pc}
 8003a0c:	f000 f810 	bl	8003a30 <_ZSt15get_new_handlerv>
 8003a10:	b908      	cbnz	r0, 8003a16 <_Znwj+0x1e>
 8003a12:	f000 f815 	bl	8003a40 <abort>
 8003a16:	4780      	blx	r0
 8003a18:	e7f3      	b.n	8003a02 <_Znwj+0xa>

08003a1a <_ZSt17__throw_bad_allocv>:
 8003a1a:	b508      	push	{r3, lr}
 8003a1c:	f000 f810 	bl	8003a40 <abort>

08003a20 <_ZSt28__throw_bad_array_new_lengthv>:
 8003a20:	b508      	push	{r3, lr}
 8003a22:	f000 f80d 	bl	8003a40 <abort>

08003a26 <_ZSt20__throw_length_errorPKc>:
 8003a26:	b508      	push	{r3, lr}
 8003a28:	f000 f80a 	bl	8003a40 <abort>

08003a2c <_ZdlPv>:
 8003a2c:	f000 b818 	b.w	8003a60 <free>

08003a30 <_ZSt15get_new_handlerv>:
 8003a30:	4b02      	ldr	r3, [pc, #8]	; (8003a3c <_ZSt15get_new_handlerv+0xc>)
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	f3bf 8f5b 	dmb	ish
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	200000cc 	.word	0x200000cc

08003a40 <abort>:
 8003a40:	b508      	push	{r3, lr}
 8003a42:	2006      	movs	r0, #6
 8003a44:	f000 fa82 	bl	8003f4c <raise>
 8003a48:	2001      	movs	r0, #1
 8003a4a:	f7fe fd65 	bl	8002518 <_exit>
	...

08003a50 <malloc>:
 8003a50:	4b02      	ldr	r3, [pc, #8]	; (8003a5c <malloc+0xc>)
 8003a52:	4601      	mov	r1, r0
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	f000 b82b 	b.w	8003ab0 <_malloc_r>
 8003a5a:	bf00      	nop
 8003a5c:	2000009c 	.word	0x2000009c

08003a60 <free>:
 8003a60:	4b02      	ldr	r3, [pc, #8]	; (8003a6c <free+0xc>)
 8003a62:	4601      	mov	r1, r0
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	f000 bb3d 	b.w	80040e4 <_free_r>
 8003a6a:	bf00      	nop
 8003a6c:	2000009c 	.word	0x2000009c

08003a70 <sbrk_aligned>:
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	4e0e      	ldr	r6, [pc, #56]	; (8003aac <sbrk_aligned+0x3c>)
 8003a74:	460c      	mov	r4, r1
 8003a76:	6831      	ldr	r1, [r6, #0]
 8003a78:	4605      	mov	r5, r0
 8003a7a:	b911      	cbnz	r1, 8003a82 <sbrk_aligned+0x12>
 8003a7c:	f000 fab6 	bl	8003fec <_sbrk_r>
 8003a80:	6030      	str	r0, [r6, #0]
 8003a82:	4621      	mov	r1, r4
 8003a84:	4628      	mov	r0, r5
 8003a86:	f000 fab1 	bl	8003fec <_sbrk_r>
 8003a8a:	1c43      	adds	r3, r0, #1
 8003a8c:	d00a      	beq.n	8003aa4 <sbrk_aligned+0x34>
 8003a8e:	1cc4      	adds	r4, r0, #3
 8003a90:	f024 0403 	bic.w	r4, r4, #3
 8003a94:	42a0      	cmp	r0, r4
 8003a96:	d007      	beq.n	8003aa8 <sbrk_aligned+0x38>
 8003a98:	1a21      	subs	r1, r4, r0
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	f000 faa6 	bl	8003fec <_sbrk_r>
 8003aa0:	3001      	adds	r0, #1
 8003aa2:	d101      	bne.n	8003aa8 <sbrk_aligned+0x38>
 8003aa4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	bd70      	pop	{r4, r5, r6, pc}
 8003aac:	200000d4 	.word	0x200000d4

08003ab0 <_malloc_r>:
 8003ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ab4:	1ccd      	adds	r5, r1, #3
 8003ab6:	f025 0503 	bic.w	r5, r5, #3
 8003aba:	3508      	adds	r5, #8
 8003abc:	2d0c      	cmp	r5, #12
 8003abe:	bf38      	it	cc
 8003ac0:	250c      	movcc	r5, #12
 8003ac2:	2d00      	cmp	r5, #0
 8003ac4:	4607      	mov	r7, r0
 8003ac6:	db01      	blt.n	8003acc <_malloc_r+0x1c>
 8003ac8:	42a9      	cmp	r1, r5
 8003aca:	d905      	bls.n	8003ad8 <_malloc_r+0x28>
 8003acc:	230c      	movs	r3, #12
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	2600      	movs	r6, #0
 8003ad2:	4630      	mov	r0, r6
 8003ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ad8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003bac <_malloc_r+0xfc>
 8003adc:	f000 f868 	bl	8003bb0 <__malloc_lock>
 8003ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8003ae4:	461c      	mov	r4, r3
 8003ae6:	bb5c      	cbnz	r4, 8003b40 <_malloc_r+0x90>
 8003ae8:	4629      	mov	r1, r5
 8003aea:	4638      	mov	r0, r7
 8003aec:	f7ff ffc0 	bl	8003a70 <sbrk_aligned>
 8003af0:	1c43      	adds	r3, r0, #1
 8003af2:	4604      	mov	r4, r0
 8003af4:	d155      	bne.n	8003ba2 <_malloc_r+0xf2>
 8003af6:	f8d8 4000 	ldr.w	r4, [r8]
 8003afa:	4626      	mov	r6, r4
 8003afc:	2e00      	cmp	r6, #0
 8003afe:	d145      	bne.n	8003b8c <_malloc_r+0xdc>
 8003b00:	2c00      	cmp	r4, #0
 8003b02:	d048      	beq.n	8003b96 <_malloc_r+0xe6>
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	4631      	mov	r1, r6
 8003b08:	4638      	mov	r0, r7
 8003b0a:	eb04 0903 	add.w	r9, r4, r3
 8003b0e:	f000 fa6d 	bl	8003fec <_sbrk_r>
 8003b12:	4581      	cmp	r9, r0
 8003b14:	d13f      	bne.n	8003b96 <_malloc_r+0xe6>
 8003b16:	6821      	ldr	r1, [r4, #0]
 8003b18:	1a6d      	subs	r5, r5, r1
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	4638      	mov	r0, r7
 8003b1e:	f7ff ffa7 	bl	8003a70 <sbrk_aligned>
 8003b22:	3001      	adds	r0, #1
 8003b24:	d037      	beq.n	8003b96 <_malloc_r+0xe6>
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	442b      	add	r3, r5
 8003b2a:	6023      	str	r3, [r4, #0]
 8003b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d038      	beq.n	8003ba6 <_malloc_r+0xf6>
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	42a2      	cmp	r2, r4
 8003b38:	d12b      	bne.n	8003b92 <_malloc_r+0xe2>
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	e00f      	b.n	8003b60 <_malloc_r+0xb0>
 8003b40:	6822      	ldr	r2, [r4, #0]
 8003b42:	1b52      	subs	r2, r2, r5
 8003b44:	d41f      	bmi.n	8003b86 <_malloc_r+0xd6>
 8003b46:	2a0b      	cmp	r2, #11
 8003b48:	d917      	bls.n	8003b7a <_malloc_r+0xca>
 8003b4a:	1961      	adds	r1, r4, r5
 8003b4c:	42a3      	cmp	r3, r4
 8003b4e:	6025      	str	r5, [r4, #0]
 8003b50:	bf18      	it	ne
 8003b52:	6059      	strne	r1, [r3, #4]
 8003b54:	6863      	ldr	r3, [r4, #4]
 8003b56:	bf08      	it	eq
 8003b58:	f8c8 1000 	streq.w	r1, [r8]
 8003b5c:	5162      	str	r2, [r4, r5]
 8003b5e:	604b      	str	r3, [r1, #4]
 8003b60:	4638      	mov	r0, r7
 8003b62:	f104 060b 	add.w	r6, r4, #11
 8003b66:	f000 f829 	bl	8003bbc <__malloc_unlock>
 8003b6a:	f026 0607 	bic.w	r6, r6, #7
 8003b6e:	1d23      	adds	r3, r4, #4
 8003b70:	1af2      	subs	r2, r6, r3
 8003b72:	d0ae      	beq.n	8003ad2 <_malloc_r+0x22>
 8003b74:	1b9b      	subs	r3, r3, r6
 8003b76:	50a3      	str	r3, [r4, r2]
 8003b78:	e7ab      	b.n	8003ad2 <_malloc_r+0x22>
 8003b7a:	42a3      	cmp	r3, r4
 8003b7c:	6862      	ldr	r2, [r4, #4]
 8003b7e:	d1dd      	bne.n	8003b3c <_malloc_r+0x8c>
 8003b80:	f8c8 2000 	str.w	r2, [r8]
 8003b84:	e7ec      	b.n	8003b60 <_malloc_r+0xb0>
 8003b86:	4623      	mov	r3, r4
 8003b88:	6864      	ldr	r4, [r4, #4]
 8003b8a:	e7ac      	b.n	8003ae6 <_malloc_r+0x36>
 8003b8c:	4634      	mov	r4, r6
 8003b8e:	6876      	ldr	r6, [r6, #4]
 8003b90:	e7b4      	b.n	8003afc <_malloc_r+0x4c>
 8003b92:	4613      	mov	r3, r2
 8003b94:	e7cc      	b.n	8003b30 <_malloc_r+0x80>
 8003b96:	230c      	movs	r3, #12
 8003b98:	603b      	str	r3, [r7, #0]
 8003b9a:	4638      	mov	r0, r7
 8003b9c:	f000 f80e 	bl	8003bbc <__malloc_unlock>
 8003ba0:	e797      	b.n	8003ad2 <_malloc_r+0x22>
 8003ba2:	6025      	str	r5, [r4, #0]
 8003ba4:	e7dc      	b.n	8003b60 <_malloc_r+0xb0>
 8003ba6:	605b      	str	r3, [r3, #4]
 8003ba8:	deff      	udf	#255	; 0xff
 8003baa:	bf00      	nop
 8003bac:	200000d0 	.word	0x200000d0

08003bb0 <__malloc_lock>:
 8003bb0:	4801      	ldr	r0, [pc, #4]	; (8003bb8 <__malloc_lock+0x8>)
 8003bb2:	f000 ba68 	b.w	8004086 <__retarget_lock_acquire_recursive>
 8003bb6:	bf00      	nop
 8003bb8:	20000218 	.word	0x20000218

08003bbc <__malloc_unlock>:
 8003bbc:	4801      	ldr	r0, [pc, #4]	; (8003bc4 <__malloc_unlock+0x8>)
 8003bbe:	f000 ba63 	b.w	8004088 <__retarget_lock_release_recursive>
 8003bc2:	bf00      	nop
 8003bc4:	20000218 	.word	0x20000218

08003bc8 <srand>:
 8003bc8:	b538      	push	{r3, r4, r5, lr}
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <srand+0x44>)
 8003bcc:	681d      	ldr	r5, [r3, #0]
 8003bce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003bd0:	4604      	mov	r4, r0
 8003bd2:	b9b3      	cbnz	r3, 8003c02 <srand+0x3a>
 8003bd4:	2018      	movs	r0, #24
 8003bd6:	f7ff ff3b 	bl	8003a50 <malloc>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	6328      	str	r0, [r5, #48]	; 0x30
 8003bde:	b920      	cbnz	r0, 8003bea <srand+0x22>
 8003be0:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <srand+0x48>)
 8003be2:	480c      	ldr	r0, [pc, #48]	; (8003c14 <srand+0x4c>)
 8003be4:	2146      	movs	r1, #70	; 0x46
 8003be6:	f000 fa5f 	bl	80040a8 <__assert_func>
 8003bea:	490b      	ldr	r1, [pc, #44]	; (8003c18 <srand+0x50>)
 8003bec:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <srand+0x54>)
 8003bee:	e9c0 1300 	strd	r1, r3, [r0]
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <srand+0x58>)
 8003bf4:	6083      	str	r3, [r0, #8]
 8003bf6:	230b      	movs	r3, #11
 8003bf8:	8183      	strh	r3, [r0, #12]
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003c02:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003c04:	2200      	movs	r2, #0
 8003c06:	611c      	str	r4, [r3, #16]
 8003c08:	615a      	str	r2, [r3, #20]
 8003c0a:	bd38      	pop	{r3, r4, r5, pc}
 8003c0c:	2000009c 	.word	0x2000009c
 8003c10:	08004f18 	.word	0x08004f18
 8003c14:	08004f2f 	.word	0x08004f2f
 8003c18:	abcd330e 	.word	0xabcd330e
 8003c1c:	e66d1234 	.word	0xe66d1234
 8003c20:	0005deec 	.word	0x0005deec

08003c24 <rand>:
 8003c24:	4b16      	ldr	r3, [pc, #88]	; (8003c80 <rand+0x5c>)
 8003c26:	b510      	push	{r4, lr}
 8003c28:	681c      	ldr	r4, [r3, #0]
 8003c2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c2c:	b9b3      	cbnz	r3, 8003c5c <rand+0x38>
 8003c2e:	2018      	movs	r0, #24
 8003c30:	f7ff ff0e 	bl	8003a50 <malloc>
 8003c34:	4602      	mov	r2, r0
 8003c36:	6320      	str	r0, [r4, #48]	; 0x30
 8003c38:	b920      	cbnz	r0, 8003c44 <rand+0x20>
 8003c3a:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <rand+0x60>)
 8003c3c:	4812      	ldr	r0, [pc, #72]	; (8003c88 <rand+0x64>)
 8003c3e:	2152      	movs	r1, #82	; 0x52
 8003c40:	f000 fa32 	bl	80040a8 <__assert_func>
 8003c44:	4911      	ldr	r1, [pc, #68]	; (8003c8c <rand+0x68>)
 8003c46:	4b12      	ldr	r3, [pc, #72]	; (8003c90 <rand+0x6c>)
 8003c48:	e9c0 1300 	strd	r1, r3, [r0]
 8003c4c:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <rand+0x70>)
 8003c4e:	6083      	str	r3, [r0, #8]
 8003c50:	230b      	movs	r3, #11
 8003c52:	8183      	strh	r3, [r0, #12]
 8003c54:	2100      	movs	r1, #0
 8003c56:	2001      	movs	r0, #1
 8003c58:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003c5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003c5e:	480e      	ldr	r0, [pc, #56]	; (8003c98 <rand+0x74>)
 8003c60:	690b      	ldr	r3, [r1, #16]
 8003c62:	694c      	ldr	r4, [r1, #20]
 8003c64:	4a0d      	ldr	r2, [pc, #52]	; (8003c9c <rand+0x78>)
 8003c66:	4358      	muls	r0, r3
 8003c68:	fb02 0004 	mla	r0, r2, r4, r0
 8003c6c:	fba3 3202 	umull	r3, r2, r3, r2
 8003c70:	3301      	adds	r3, #1
 8003c72:	eb40 0002 	adc.w	r0, r0, r2
 8003c76:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003c7a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003c7e:	bd10      	pop	{r4, pc}
 8003c80:	2000009c 	.word	0x2000009c
 8003c84:	08004f18 	.word	0x08004f18
 8003c88:	08004f2f 	.word	0x08004f2f
 8003c8c:	abcd330e 	.word	0xabcd330e
 8003c90:	e66d1234 	.word	0xe66d1234
 8003c94:	0005deec 	.word	0x0005deec
 8003c98:	5851f42d 	.word	0x5851f42d
 8003c9c:	4c957f2d 	.word	0x4c957f2d

08003ca0 <std>:
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	b510      	push	{r4, lr}
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8003caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cae:	6083      	str	r3, [r0, #8]
 8003cb0:	8181      	strh	r1, [r0, #12]
 8003cb2:	6643      	str	r3, [r0, #100]	; 0x64
 8003cb4:	81c2      	strh	r2, [r0, #14]
 8003cb6:	6183      	str	r3, [r0, #24]
 8003cb8:	4619      	mov	r1, r3
 8003cba:	2208      	movs	r2, #8
 8003cbc:	305c      	adds	r0, #92	; 0x5c
 8003cbe:	f000 f914 	bl	8003eea <memset>
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <std+0x58>)
 8003cc4:	6263      	str	r3, [r4, #36]	; 0x24
 8003cc6:	4b0d      	ldr	r3, [pc, #52]	; (8003cfc <std+0x5c>)
 8003cc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cca:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <std+0x60>)
 8003ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003cce:	4b0d      	ldr	r3, [pc, #52]	; (8003d04 <std+0x64>)
 8003cd0:	6323      	str	r3, [r4, #48]	; 0x30
 8003cd2:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <std+0x68>)
 8003cd4:	6224      	str	r4, [r4, #32]
 8003cd6:	429c      	cmp	r4, r3
 8003cd8:	d006      	beq.n	8003ce8 <std+0x48>
 8003cda:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003cde:	4294      	cmp	r4, r2
 8003ce0:	d002      	beq.n	8003ce8 <std+0x48>
 8003ce2:	33d0      	adds	r3, #208	; 0xd0
 8003ce4:	429c      	cmp	r4, r3
 8003ce6:	d105      	bne.n	8003cf4 <std+0x54>
 8003ce8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cf0:	f000 b9c8 	b.w	8004084 <__retarget_lock_init_recursive>
 8003cf4:	bd10      	pop	{r4, pc}
 8003cf6:	bf00      	nop
 8003cf8:	08003e65 	.word	0x08003e65
 8003cfc:	08003e87 	.word	0x08003e87
 8003d00:	08003ebf 	.word	0x08003ebf
 8003d04:	08003ee3 	.word	0x08003ee3
 8003d08:	200000d8 	.word	0x200000d8

08003d0c <stdio_exit_handler>:
 8003d0c:	4a02      	ldr	r2, [pc, #8]	; (8003d18 <stdio_exit_handler+0xc>)
 8003d0e:	4903      	ldr	r1, [pc, #12]	; (8003d1c <stdio_exit_handler+0x10>)
 8003d10:	4803      	ldr	r0, [pc, #12]	; (8003d20 <stdio_exit_handler+0x14>)
 8003d12:	f000 b869 	b.w	8003de8 <_fwalk_sglue>
 8003d16:	bf00      	nop
 8003d18:	20000044 	.word	0x20000044
 8003d1c:	08004859 	.word	0x08004859
 8003d20:	20000050 	.word	0x20000050

08003d24 <cleanup_stdio>:
 8003d24:	6841      	ldr	r1, [r0, #4]
 8003d26:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <cleanup_stdio+0x34>)
 8003d28:	4299      	cmp	r1, r3
 8003d2a:	b510      	push	{r4, lr}
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	d001      	beq.n	8003d34 <cleanup_stdio+0x10>
 8003d30:	f000 fd92 	bl	8004858 <_fflush_r>
 8003d34:	68a1      	ldr	r1, [r4, #8]
 8003d36:	4b09      	ldr	r3, [pc, #36]	; (8003d5c <cleanup_stdio+0x38>)
 8003d38:	4299      	cmp	r1, r3
 8003d3a:	d002      	beq.n	8003d42 <cleanup_stdio+0x1e>
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	f000 fd8b 	bl	8004858 <_fflush_r>
 8003d42:	68e1      	ldr	r1, [r4, #12]
 8003d44:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <cleanup_stdio+0x3c>)
 8003d46:	4299      	cmp	r1, r3
 8003d48:	d004      	beq.n	8003d54 <cleanup_stdio+0x30>
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d50:	f000 bd82 	b.w	8004858 <_fflush_r>
 8003d54:	bd10      	pop	{r4, pc}
 8003d56:	bf00      	nop
 8003d58:	200000d8 	.word	0x200000d8
 8003d5c:	20000140 	.word	0x20000140
 8003d60:	200001a8 	.word	0x200001a8

08003d64 <global_stdio_init.part.0>:
 8003d64:	b510      	push	{r4, lr}
 8003d66:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <global_stdio_init.part.0+0x30>)
 8003d68:	4c0b      	ldr	r4, [pc, #44]	; (8003d98 <global_stdio_init.part.0+0x34>)
 8003d6a:	4a0c      	ldr	r2, [pc, #48]	; (8003d9c <global_stdio_init.part.0+0x38>)
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	4620      	mov	r0, r4
 8003d70:	2200      	movs	r2, #0
 8003d72:	2104      	movs	r1, #4
 8003d74:	f7ff ff94 	bl	8003ca0 <std>
 8003d78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	2109      	movs	r1, #9
 8003d80:	f7ff ff8e 	bl	8003ca0 <std>
 8003d84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d88:	2202      	movs	r2, #2
 8003d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d8e:	2112      	movs	r1, #18
 8003d90:	f7ff bf86 	b.w	8003ca0 <std>
 8003d94:	20000210 	.word	0x20000210
 8003d98:	200000d8 	.word	0x200000d8
 8003d9c:	08003d0d 	.word	0x08003d0d

08003da0 <__sfp_lock_acquire>:
 8003da0:	4801      	ldr	r0, [pc, #4]	; (8003da8 <__sfp_lock_acquire+0x8>)
 8003da2:	f000 b970 	b.w	8004086 <__retarget_lock_acquire_recursive>
 8003da6:	bf00      	nop
 8003da8:	20000219 	.word	0x20000219

08003dac <__sfp_lock_release>:
 8003dac:	4801      	ldr	r0, [pc, #4]	; (8003db4 <__sfp_lock_release+0x8>)
 8003dae:	f000 b96b 	b.w	8004088 <__retarget_lock_release_recursive>
 8003db2:	bf00      	nop
 8003db4:	20000219 	.word	0x20000219

08003db8 <__sinit>:
 8003db8:	b510      	push	{r4, lr}
 8003dba:	4604      	mov	r4, r0
 8003dbc:	f7ff fff0 	bl	8003da0 <__sfp_lock_acquire>
 8003dc0:	6a23      	ldr	r3, [r4, #32]
 8003dc2:	b11b      	cbz	r3, 8003dcc <__sinit+0x14>
 8003dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dc8:	f7ff bff0 	b.w	8003dac <__sfp_lock_release>
 8003dcc:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <__sinit+0x28>)
 8003dce:	6223      	str	r3, [r4, #32]
 8003dd0:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <__sinit+0x2c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f5      	bne.n	8003dc4 <__sinit+0xc>
 8003dd8:	f7ff ffc4 	bl	8003d64 <global_stdio_init.part.0>
 8003ddc:	e7f2      	b.n	8003dc4 <__sinit+0xc>
 8003dde:	bf00      	nop
 8003de0:	08003d25 	.word	0x08003d25
 8003de4:	20000210 	.word	0x20000210

08003de8 <_fwalk_sglue>:
 8003de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dec:	4607      	mov	r7, r0
 8003dee:	4688      	mov	r8, r1
 8003df0:	4614      	mov	r4, r2
 8003df2:	2600      	movs	r6, #0
 8003df4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003df8:	f1b9 0901 	subs.w	r9, r9, #1
 8003dfc:	d505      	bpl.n	8003e0a <_fwalk_sglue+0x22>
 8003dfe:	6824      	ldr	r4, [r4, #0]
 8003e00:	2c00      	cmp	r4, #0
 8003e02:	d1f7      	bne.n	8003df4 <_fwalk_sglue+0xc>
 8003e04:	4630      	mov	r0, r6
 8003e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e0a:	89ab      	ldrh	r3, [r5, #12]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d907      	bls.n	8003e20 <_fwalk_sglue+0x38>
 8003e10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e14:	3301      	adds	r3, #1
 8003e16:	d003      	beq.n	8003e20 <_fwalk_sglue+0x38>
 8003e18:	4629      	mov	r1, r5
 8003e1a:	4638      	mov	r0, r7
 8003e1c:	47c0      	blx	r8
 8003e1e:	4306      	orrs	r6, r0
 8003e20:	3568      	adds	r5, #104	; 0x68
 8003e22:	e7e9      	b.n	8003df8 <_fwalk_sglue+0x10>

08003e24 <siprintf>:
 8003e24:	b40e      	push	{r1, r2, r3}
 8003e26:	b500      	push	{lr}
 8003e28:	b09c      	sub	sp, #112	; 0x70
 8003e2a:	ab1d      	add	r3, sp, #116	; 0x74
 8003e2c:	9002      	str	r0, [sp, #8]
 8003e2e:	9006      	str	r0, [sp, #24]
 8003e30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e34:	4809      	ldr	r0, [pc, #36]	; (8003e5c <siprintf+0x38>)
 8003e36:	9107      	str	r1, [sp, #28]
 8003e38:	9104      	str	r1, [sp, #16]
 8003e3a:	4909      	ldr	r1, [pc, #36]	; (8003e60 <siprintf+0x3c>)
 8003e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e40:	9105      	str	r1, [sp, #20]
 8003e42:	6800      	ldr	r0, [r0, #0]
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	a902      	add	r1, sp, #8
 8003e48:	f000 f9f2 	bl	8004230 <_svfiprintf_r>
 8003e4c:	9b02      	ldr	r3, [sp, #8]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	b01c      	add	sp, #112	; 0x70
 8003e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e58:	b003      	add	sp, #12
 8003e5a:	4770      	bx	lr
 8003e5c:	2000009c 	.word	0x2000009c
 8003e60:	ffff0208 	.word	0xffff0208

08003e64 <__sread>:
 8003e64:	b510      	push	{r4, lr}
 8003e66:	460c      	mov	r4, r1
 8003e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e6c:	f000 f898 	bl	8003fa0 <_read_r>
 8003e70:	2800      	cmp	r0, #0
 8003e72:	bfab      	itete	ge
 8003e74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e76:	89a3      	ldrhlt	r3, [r4, #12]
 8003e78:	181b      	addge	r3, r3, r0
 8003e7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e7e:	bfac      	ite	ge
 8003e80:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e82:	81a3      	strhlt	r3, [r4, #12]
 8003e84:	bd10      	pop	{r4, pc}

08003e86 <__swrite>:
 8003e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8a:	461f      	mov	r7, r3
 8003e8c:	898b      	ldrh	r3, [r1, #12]
 8003e8e:	05db      	lsls	r3, r3, #23
 8003e90:	4605      	mov	r5, r0
 8003e92:	460c      	mov	r4, r1
 8003e94:	4616      	mov	r6, r2
 8003e96:	d505      	bpl.n	8003ea4 <__swrite+0x1e>
 8003e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f000 f86c 	bl	8003f7c <_lseek_r>
 8003ea4:	89a3      	ldrh	r3, [r4, #12]
 8003ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eae:	81a3      	strh	r3, [r4, #12]
 8003eb0:	4632      	mov	r2, r6
 8003eb2:	463b      	mov	r3, r7
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003eba:	f000 b8a7 	b.w	800400c <_write_r>

08003ebe <__sseek>:
 8003ebe:	b510      	push	{r4, lr}
 8003ec0:	460c      	mov	r4, r1
 8003ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec6:	f000 f859 	bl	8003f7c <_lseek_r>
 8003eca:	1c43      	adds	r3, r0, #1
 8003ecc:	89a3      	ldrh	r3, [r4, #12]
 8003ece:	bf15      	itete	ne
 8003ed0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ed2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ed6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003eda:	81a3      	strheq	r3, [r4, #12]
 8003edc:	bf18      	it	ne
 8003ede:	81a3      	strhne	r3, [r4, #12]
 8003ee0:	bd10      	pop	{r4, pc}

08003ee2 <__sclose>:
 8003ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee6:	f000 b839 	b.w	8003f5c <_close_r>

08003eea <memset>:
 8003eea:	4402      	add	r2, r0
 8003eec:	4603      	mov	r3, r0
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d100      	bne.n	8003ef4 <memset+0xa>
 8003ef2:	4770      	bx	lr
 8003ef4:	f803 1b01 	strb.w	r1, [r3], #1
 8003ef8:	e7f9      	b.n	8003eee <memset+0x4>

08003efa <_raise_r>:
 8003efa:	291f      	cmp	r1, #31
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	4604      	mov	r4, r0
 8003f00:	460d      	mov	r5, r1
 8003f02:	d904      	bls.n	8003f0e <_raise_r+0x14>
 8003f04:	2316      	movs	r3, #22
 8003f06:	6003      	str	r3, [r0, #0]
 8003f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f0c:	bd38      	pop	{r3, r4, r5, pc}
 8003f0e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003f10:	b112      	cbz	r2, 8003f18 <_raise_r+0x1e>
 8003f12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003f16:	b94b      	cbnz	r3, 8003f2c <_raise_r+0x32>
 8003f18:	4620      	mov	r0, r4
 8003f1a:	f000 f865 	bl	8003fe8 <_getpid_r>
 8003f1e:	462a      	mov	r2, r5
 8003f20:	4601      	mov	r1, r0
 8003f22:	4620      	mov	r0, r4
 8003f24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f28:	f000 b84c 	b.w	8003fc4 <_kill_r>
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d00a      	beq.n	8003f46 <_raise_r+0x4c>
 8003f30:	1c59      	adds	r1, r3, #1
 8003f32:	d103      	bne.n	8003f3c <_raise_r+0x42>
 8003f34:	2316      	movs	r3, #22
 8003f36:	6003      	str	r3, [r0, #0]
 8003f38:	2001      	movs	r0, #1
 8003f3a:	e7e7      	b.n	8003f0c <_raise_r+0x12>
 8003f3c:	2400      	movs	r4, #0
 8003f3e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003f42:	4628      	mov	r0, r5
 8003f44:	4798      	blx	r3
 8003f46:	2000      	movs	r0, #0
 8003f48:	e7e0      	b.n	8003f0c <_raise_r+0x12>
	...

08003f4c <raise>:
 8003f4c:	4b02      	ldr	r3, [pc, #8]	; (8003f58 <raise+0xc>)
 8003f4e:	4601      	mov	r1, r0
 8003f50:	6818      	ldr	r0, [r3, #0]
 8003f52:	f7ff bfd2 	b.w	8003efa <_raise_r>
 8003f56:	bf00      	nop
 8003f58:	2000009c 	.word	0x2000009c

08003f5c <_close_r>:
 8003f5c:	b538      	push	{r3, r4, r5, lr}
 8003f5e:	4d06      	ldr	r5, [pc, #24]	; (8003f78 <_close_r+0x1c>)
 8003f60:	2300      	movs	r3, #0
 8003f62:	4604      	mov	r4, r0
 8003f64:	4608      	mov	r0, r1
 8003f66:	602b      	str	r3, [r5, #0]
 8003f68:	f7fe fb19 	bl	800259e <_close>
 8003f6c:	1c43      	adds	r3, r0, #1
 8003f6e:	d102      	bne.n	8003f76 <_close_r+0x1a>
 8003f70:	682b      	ldr	r3, [r5, #0]
 8003f72:	b103      	cbz	r3, 8003f76 <_close_r+0x1a>
 8003f74:	6023      	str	r3, [r4, #0]
 8003f76:	bd38      	pop	{r3, r4, r5, pc}
 8003f78:	20000214 	.word	0x20000214

08003f7c <_lseek_r>:
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	4d07      	ldr	r5, [pc, #28]	; (8003f9c <_lseek_r+0x20>)
 8003f80:	4604      	mov	r4, r0
 8003f82:	4608      	mov	r0, r1
 8003f84:	4611      	mov	r1, r2
 8003f86:	2200      	movs	r2, #0
 8003f88:	602a      	str	r2, [r5, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f7fe fb2e 	bl	80025ec <_lseek>
 8003f90:	1c43      	adds	r3, r0, #1
 8003f92:	d102      	bne.n	8003f9a <_lseek_r+0x1e>
 8003f94:	682b      	ldr	r3, [r5, #0]
 8003f96:	b103      	cbz	r3, 8003f9a <_lseek_r+0x1e>
 8003f98:	6023      	str	r3, [r4, #0]
 8003f9a:	bd38      	pop	{r3, r4, r5, pc}
 8003f9c:	20000214 	.word	0x20000214

08003fa0 <_read_r>:
 8003fa0:	b538      	push	{r3, r4, r5, lr}
 8003fa2:	4d07      	ldr	r5, [pc, #28]	; (8003fc0 <_read_r+0x20>)
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	4608      	mov	r0, r1
 8003fa8:	4611      	mov	r1, r2
 8003faa:	2200      	movs	r2, #0
 8003fac:	602a      	str	r2, [r5, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f7fe fabc 	bl	800252c <_read>
 8003fb4:	1c43      	adds	r3, r0, #1
 8003fb6:	d102      	bne.n	8003fbe <_read_r+0x1e>
 8003fb8:	682b      	ldr	r3, [r5, #0]
 8003fba:	b103      	cbz	r3, 8003fbe <_read_r+0x1e>
 8003fbc:	6023      	str	r3, [r4, #0]
 8003fbe:	bd38      	pop	{r3, r4, r5, pc}
 8003fc0:	20000214 	.word	0x20000214

08003fc4 <_kill_r>:
 8003fc4:	b538      	push	{r3, r4, r5, lr}
 8003fc6:	4d07      	ldr	r5, [pc, #28]	; (8003fe4 <_kill_r+0x20>)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	4604      	mov	r4, r0
 8003fcc:	4608      	mov	r0, r1
 8003fce:	4611      	mov	r1, r2
 8003fd0:	602b      	str	r3, [r5, #0]
 8003fd2:	f7fe fa91 	bl	80024f8 <_kill>
 8003fd6:	1c43      	adds	r3, r0, #1
 8003fd8:	d102      	bne.n	8003fe0 <_kill_r+0x1c>
 8003fda:	682b      	ldr	r3, [r5, #0]
 8003fdc:	b103      	cbz	r3, 8003fe0 <_kill_r+0x1c>
 8003fde:	6023      	str	r3, [r4, #0]
 8003fe0:	bd38      	pop	{r3, r4, r5, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000214 	.word	0x20000214

08003fe8 <_getpid_r>:
 8003fe8:	f7fe ba7e 	b.w	80024e8 <_getpid>

08003fec <_sbrk_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	4d06      	ldr	r5, [pc, #24]	; (8004008 <_sbrk_r+0x1c>)
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	4608      	mov	r0, r1
 8003ff6:	602b      	str	r3, [r5, #0]
 8003ff8:	f7fe fb06 	bl	8002608 <_sbrk>
 8003ffc:	1c43      	adds	r3, r0, #1
 8003ffe:	d102      	bne.n	8004006 <_sbrk_r+0x1a>
 8004000:	682b      	ldr	r3, [r5, #0]
 8004002:	b103      	cbz	r3, 8004006 <_sbrk_r+0x1a>
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	bd38      	pop	{r3, r4, r5, pc}
 8004008:	20000214 	.word	0x20000214

0800400c <_write_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4d07      	ldr	r5, [pc, #28]	; (800402c <_write_r+0x20>)
 8004010:	4604      	mov	r4, r0
 8004012:	4608      	mov	r0, r1
 8004014:	4611      	mov	r1, r2
 8004016:	2200      	movs	r2, #0
 8004018:	602a      	str	r2, [r5, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	f7fe faa3 	bl	8002566 <_write>
 8004020:	1c43      	adds	r3, r0, #1
 8004022:	d102      	bne.n	800402a <_write_r+0x1e>
 8004024:	682b      	ldr	r3, [r5, #0]
 8004026:	b103      	cbz	r3, 800402a <_write_r+0x1e>
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	bd38      	pop	{r3, r4, r5, pc}
 800402c:	20000214 	.word	0x20000214

08004030 <__errno>:
 8004030:	4b01      	ldr	r3, [pc, #4]	; (8004038 <__errno+0x8>)
 8004032:	6818      	ldr	r0, [r3, #0]
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	2000009c 	.word	0x2000009c

0800403c <__libc_init_array>:
 800403c:	b570      	push	{r4, r5, r6, lr}
 800403e:	4d0d      	ldr	r5, [pc, #52]	; (8004074 <__libc_init_array+0x38>)
 8004040:	4c0d      	ldr	r4, [pc, #52]	; (8004078 <__libc_init_array+0x3c>)
 8004042:	1b64      	subs	r4, r4, r5
 8004044:	10a4      	asrs	r4, r4, #2
 8004046:	2600      	movs	r6, #0
 8004048:	42a6      	cmp	r6, r4
 800404a:	d109      	bne.n	8004060 <__libc_init_array+0x24>
 800404c:	4d0b      	ldr	r5, [pc, #44]	; (800407c <__libc_init_array+0x40>)
 800404e:	4c0c      	ldr	r4, [pc, #48]	; (8004080 <__libc_init_array+0x44>)
 8004050:	f000 feea 	bl	8004e28 <_init>
 8004054:	1b64      	subs	r4, r4, r5
 8004056:	10a4      	asrs	r4, r4, #2
 8004058:	2600      	movs	r6, #0
 800405a:	42a6      	cmp	r6, r4
 800405c:	d105      	bne.n	800406a <__libc_init_array+0x2e>
 800405e:	bd70      	pop	{r4, r5, r6, pc}
 8004060:	f855 3b04 	ldr.w	r3, [r5], #4
 8004064:	4798      	blx	r3
 8004066:	3601      	adds	r6, #1
 8004068:	e7ee      	b.n	8004048 <__libc_init_array+0xc>
 800406a:	f855 3b04 	ldr.w	r3, [r5], #4
 800406e:	4798      	blx	r3
 8004070:	3601      	adds	r6, #1
 8004072:	e7f2      	b.n	800405a <__libc_init_array+0x1e>
 8004074:	08004ff8 	.word	0x08004ff8
 8004078:	08004ff8 	.word	0x08004ff8
 800407c:	08004ff8 	.word	0x08004ff8
 8004080:	08004ffc 	.word	0x08004ffc

08004084 <__retarget_lock_init_recursive>:
 8004084:	4770      	bx	lr

08004086 <__retarget_lock_acquire_recursive>:
 8004086:	4770      	bx	lr

08004088 <__retarget_lock_release_recursive>:
 8004088:	4770      	bx	lr

0800408a <memcpy>:
 800408a:	440a      	add	r2, r1
 800408c:	4291      	cmp	r1, r2
 800408e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004092:	d100      	bne.n	8004096 <memcpy+0xc>
 8004094:	4770      	bx	lr
 8004096:	b510      	push	{r4, lr}
 8004098:	f811 4b01 	ldrb.w	r4, [r1], #1
 800409c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040a0:	4291      	cmp	r1, r2
 80040a2:	d1f9      	bne.n	8004098 <memcpy+0xe>
 80040a4:	bd10      	pop	{r4, pc}
	...

080040a8 <__assert_func>:
 80040a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80040aa:	4614      	mov	r4, r2
 80040ac:	461a      	mov	r2, r3
 80040ae:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <__assert_func+0x2c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4605      	mov	r5, r0
 80040b4:	68d8      	ldr	r0, [r3, #12]
 80040b6:	b14c      	cbz	r4, 80040cc <__assert_func+0x24>
 80040b8:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <__assert_func+0x30>)
 80040ba:	9100      	str	r1, [sp, #0]
 80040bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80040c0:	4906      	ldr	r1, [pc, #24]	; (80040dc <__assert_func+0x34>)
 80040c2:	462b      	mov	r3, r5
 80040c4:	f000 fbf0 	bl	80048a8 <fiprintf>
 80040c8:	f7ff fcba 	bl	8003a40 <abort>
 80040cc:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <__assert_func+0x38>)
 80040ce:	461c      	mov	r4, r3
 80040d0:	e7f3      	b.n	80040ba <__assert_func+0x12>
 80040d2:	bf00      	nop
 80040d4:	2000009c 	.word	0x2000009c
 80040d8:	08004f87 	.word	0x08004f87
 80040dc:	08004f94 	.word	0x08004f94
 80040e0:	08004fc2 	.word	0x08004fc2

080040e4 <_free_r>:
 80040e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040e6:	2900      	cmp	r1, #0
 80040e8:	d044      	beq.n	8004174 <_free_r+0x90>
 80040ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ee:	9001      	str	r0, [sp, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f1a1 0404 	sub.w	r4, r1, #4
 80040f6:	bfb8      	it	lt
 80040f8:	18e4      	addlt	r4, r4, r3
 80040fa:	f7ff fd59 	bl	8003bb0 <__malloc_lock>
 80040fe:	4a1e      	ldr	r2, [pc, #120]	; (8004178 <_free_r+0x94>)
 8004100:	9801      	ldr	r0, [sp, #4]
 8004102:	6813      	ldr	r3, [r2, #0]
 8004104:	b933      	cbnz	r3, 8004114 <_free_r+0x30>
 8004106:	6063      	str	r3, [r4, #4]
 8004108:	6014      	str	r4, [r2, #0]
 800410a:	b003      	add	sp, #12
 800410c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004110:	f7ff bd54 	b.w	8003bbc <__malloc_unlock>
 8004114:	42a3      	cmp	r3, r4
 8004116:	d908      	bls.n	800412a <_free_r+0x46>
 8004118:	6825      	ldr	r5, [r4, #0]
 800411a:	1961      	adds	r1, r4, r5
 800411c:	428b      	cmp	r3, r1
 800411e:	bf01      	itttt	eq
 8004120:	6819      	ldreq	r1, [r3, #0]
 8004122:	685b      	ldreq	r3, [r3, #4]
 8004124:	1949      	addeq	r1, r1, r5
 8004126:	6021      	streq	r1, [r4, #0]
 8004128:	e7ed      	b.n	8004106 <_free_r+0x22>
 800412a:	461a      	mov	r2, r3
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	b10b      	cbz	r3, 8004134 <_free_r+0x50>
 8004130:	42a3      	cmp	r3, r4
 8004132:	d9fa      	bls.n	800412a <_free_r+0x46>
 8004134:	6811      	ldr	r1, [r2, #0]
 8004136:	1855      	adds	r5, r2, r1
 8004138:	42a5      	cmp	r5, r4
 800413a:	d10b      	bne.n	8004154 <_free_r+0x70>
 800413c:	6824      	ldr	r4, [r4, #0]
 800413e:	4421      	add	r1, r4
 8004140:	1854      	adds	r4, r2, r1
 8004142:	42a3      	cmp	r3, r4
 8004144:	6011      	str	r1, [r2, #0]
 8004146:	d1e0      	bne.n	800410a <_free_r+0x26>
 8004148:	681c      	ldr	r4, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	6053      	str	r3, [r2, #4]
 800414e:	440c      	add	r4, r1
 8004150:	6014      	str	r4, [r2, #0]
 8004152:	e7da      	b.n	800410a <_free_r+0x26>
 8004154:	d902      	bls.n	800415c <_free_r+0x78>
 8004156:	230c      	movs	r3, #12
 8004158:	6003      	str	r3, [r0, #0]
 800415a:	e7d6      	b.n	800410a <_free_r+0x26>
 800415c:	6825      	ldr	r5, [r4, #0]
 800415e:	1961      	adds	r1, r4, r5
 8004160:	428b      	cmp	r3, r1
 8004162:	bf04      	itt	eq
 8004164:	6819      	ldreq	r1, [r3, #0]
 8004166:	685b      	ldreq	r3, [r3, #4]
 8004168:	6063      	str	r3, [r4, #4]
 800416a:	bf04      	itt	eq
 800416c:	1949      	addeq	r1, r1, r5
 800416e:	6021      	streq	r1, [r4, #0]
 8004170:	6054      	str	r4, [r2, #4]
 8004172:	e7ca      	b.n	800410a <_free_r+0x26>
 8004174:	b003      	add	sp, #12
 8004176:	bd30      	pop	{r4, r5, pc}
 8004178:	200000d0 	.word	0x200000d0

0800417c <__ssputs_r>:
 800417c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004180:	688e      	ldr	r6, [r1, #8]
 8004182:	461f      	mov	r7, r3
 8004184:	42be      	cmp	r6, r7
 8004186:	680b      	ldr	r3, [r1, #0]
 8004188:	4682      	mov	sl, r0
 800418a:	460c      	mov	r4, r1
 800418c:	4690      	mov	r8, r2
 800418e:	d82c      	bhi.n	80041ea <__ssputs_r+0x6e>
 8004190:	898a      	ldrh	r2, [r1, #12]
 8004192:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004196:	d026      	beq.n	80041e6 <__ssputs_r+0x6a>
 8004198:	6965      	ldr	r5, [r4, #20]
 800419a:	6909      	ldr	r1, [r1, #16]
 800419c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041a0:	eba3 0901 	sub.w	r9, r3, r1
 80041a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041a8:	1c7b      	adds	r3, r7, #1
 80041aa:	444b      	add	r3, r9
 80041ac:	106d      	asrs	r5, r5, #1
 80041ae:	429d      	cmp	r5, r3
 80041b0:	bf38      	it	cc
 80041b2:	461d      	movcc	r5, r3
 80041b4:	0553      	lsls	r3, r2, #21
 80041b6:	d527      	bpl.n	8004208 <__ssputs_r+0x8c>
 80041b8:	4629      	mov	r1, r5
 80041ba:	f7ff fc79 	bl	8003ab0 <_malloc_r>
 80041be:	4606      	mov	r6, r0
 80041c0:	b360      	cbz	r0, 800421c <__ssputs_r+0xa0>
 80041c2:	6921      	ldr	r1, [r4, #16]
 80041c4:	464a      	mov	r2, r9
 80041c6:	f7ff ff60 	bl	800408a <memcpy>
 80041ca:	89a3      	ldrh	r3, [r4, #12]
 80041cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d4:	81a3      	strh	r3, [r4, #12]
 80041d6:	6126      	str	r6, [r4, #16]
 80041d8:	6165      	str	r5, [r4, #20]
 80041da:	444e      	add	r6, r9
 80041dc:	eba5 0509 	sub.w	r5, r5, r9
 80041e0:	6026      	str	r6, [r4, #0]
 80041e2:	60a5      	str	r5, [r4, #8]
 80041e4:	463e      	mov	r6, r7
 80041e6:	42be      	cmp	r6, r7
 80041e8:	d900      	bls.n	80041ec <__ssputs_r+0x70>
 80041ea:	463e      	mov	r6, r7
 80041ec:	6820      	ldr	r0, [r4, #0]
 80041ee:	4632      	mov	r2, r6
 80041f0:	4641      	mov	r1, r8
 80041f2:	f000 fb6b 	bl	80048cc <memmove>
 80041f6:	68a3      	ldr	r3, [r4, #8]
 80041f8:	1b9b      	subs	r3, r3, r6
 80041fa:	60a3      	str	r3, [r4, #8]
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	4433      	add	r3, r6
 8004200:	6023      	str	r3, [r4, #0]
 8004202:	2000      	movs	r0, #0
 8004204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004208:	462a      	mov	r2, r5
 800420a:	f000 fb79 	bl	8004900 <_realloc_r>
 800420e:	4606      	mov	r6, r0
 8004210:	2800      	cmp	r0, #0
 8004212:	d1e0      	bne.n	80041d6 <__ssputs_r+0x5a>
 8004214:	6921      	ldr	r1, [r4, #16]
 8004216:	4650      	mov	r0, sl
 8004218:	f7ff ff64 	bl	80040e4 <_free_r>
 800421c:	230c      	movs	r3, #12
 800421e:	f8ca 3000 	str.w	r3, [sl]
 8004222:	89a3      	ldrh	r3, [r4, #12]
 8004224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004228:	81a3      	strh	r3, [r4, #12]
 800422a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800422e:	e7e9      	b.n	8004204 <__ssputs_r+0x88>

08004230 <_svfiprintf_r>:
 8004230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004234:	4698      	mov	r8, r3
 8004236:	898b      	ldrh	r3, [r1, #12]
 8004238:	061b      	lsls	r3, r3, #24
 800423a:	b09d      	sub	sp, #116	; 0x74
 800423c:	4607      	mov	r7, r0
 800423e:	460d      	mov	r5, r1
 8004240:	4614      	mov	r4, r2
 8004242:	d50e      	bpl.n	8004262 <_svfiprintf_r+0x32>
 8004244:	690b      	ldr	r3, [r1, #16]
 8004246:	b963      	cbnz	r3, 8004262 <_svfiprintf_r+0x32>
 8004248:	2140      	movs	r1, #64	; 0x40
 800424a:	f7ff fc31 	bl	8003ab0 <_malloc_r>
 800424e:	6028      	str	r0, [r5, #0]
 8004250:	6128      	str	r0, [r5, #16]
 8004252:	b920      	cbnz	r0, 800425e <_svfiprintf_r+0x2e>
 8004254:	230c      	movs	r3, #12
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800425c:	e0d0      	b.n	8004400 <_svfiprintf_r+0x1d0>
 800425e:	2340      	movs	r3, #64	; 0x40
 8004260:	616b      	str	r3, [r5, #20]
 8004262:	2300      	movs	r3, #0
 8004264:	9309      	str	r3, [sp, #36]	; 0x24
 8004266:	2320      	movs	r3, #32
 8004268:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800426c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004270:	2330      	movs	r3, #48	; 0x30
 8004272:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004418 <_svfiprintf_r+0x1e8>
 8004276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800427a:	f04f 0901 	mov.w	r9, #1
 800427e:	4623      	mov	r3, r4
 8004280:	469a      	mov	sl, r3
 8004282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004286:	b10a      	cbz	r2, 800428c <_svfiprintf_r+0x5c>
 8004288:	2a25      	cmp	r2, #37	; 0x25
 800428a:	d1f9      	bne.n	8004280 <_svfiprintf_r+0x50>
 800428c:	ebba 0b04 	subs.w	fp, sl, r4
 8004290:	d00b      	beq.n	80042aa <_svfiprintf_r+0x7a>
 8004292:	465b      	mov	r3, fp
 8004294:	4622      	mov	r2, r4
 8004296:	4629      	mov	r1, r5
 8004298:	4638      	mov	r0, r7
 800429a:	f7ff ff6f 	bl	800417c <__ssputs_r>
 800429e:	3001      	adds	r0, #1
 80042a0:	f000 80a9 	beq.w	80043f6 <_svfiprintf_r+0x1c6>
 80042a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042a6:	445a      	add	r2, fp
 80042a8:	9209      	str	r2, [sp, #36]	; 0x24
 80042aa:	f89a 3000 	ldrb.w	r3, [sl]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 80a1 	beq.w	80043f6 <_svfiprintf_r+0x1c6>
 80042b4:	2300      	movs	r3, #0
 80042b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042be:	f10a 0a01 	add.w	sl, sl, #1
 80042c2:	9304      	str	r3, [sp, #16]
 80042c4:	9307      	str	r3, [sp, #28]
 80042c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042ca:	931a      	str	r3, [sp, #104]	; 0x68
 80042cc:	4654      	mov	r4, sl
 80042ce:	2205      	movs	r2, #5
 80042d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042d4:	4850      	ldr	r0, [pc, #320]	; (8004418 <_svfiprintf_r+0x1e8>)
 80042d6:	f7fb ff7b 	bl	80001d0 <memchr>
 80042da:	9a04      	ldr	r2, [sp, #16]
 80042dc:	b9d8      	cbnz	r0, 8004316 <_svfiprintf_r+0xe6>
 80042de:	06d0      	lsls	r0, r2, #27
 80042e0:	bf44      	itt	mi
 80042e2:	2320      	movmi	r3, #32
 80042e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042e8:	0711      	lsls	r1, r2, #28
 80042ea:	bf44      	itt	mi
 80042ec:	232b      	movmi	r3, #43	; 0x2b
 80042ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042f2:	f89a 3000 	ldrb.w	r3, [sl]
 80042f6:	2b2a      	cmp	r3, #42	; 0x2a
 80042f8:	d015      	beq.n	8004326 <_svfiprintf_r+0xf6>
 80042fa:	9a07      	ldr	r2, [sp, #28]
 80042fc:	4654      	mov	r4, sl
 80042fe:	2000      	movs	r0, #0
 8004300:	f04f 0c0a 	mov.w	ip, #10
 8004304:	4621      	mov	r1, r4
 8004306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800430a:	3b30      	subs	r3, #48	; 0x30
 800430c:	2b09      	cmp	r3, #9
 800430e:	d94d      	bls.n	80043ac <_svfiprintf_r+0x17c>
 8004310:	b1b0      	cbz	r0, 8004340 <_svfiprintf_r+0x110>
 8004312:	9207      	str	r2, [sp, #28]
 8004314:	e014      	b.n	8004340 <_svfiprintf_r+0x110>
 8004316:	eba0 0308 	sub.w	r3, r0, r8
 800431a:	fa09 f303 	lsl.w	r3, r9, r3
 800431e:	4313      	orrs	r3, r2
 8004320:	9304      	str	r3, [sp, #16]
 8004322:	46a2      	mov	sl, r4
 8004324:	e7d2      	b.n	80042cc <_svfiprintf_r+0x9c>
 8004326:	9b03      	ldr	r3, [sp, #12]
 8004328:	1d19      	adds	r1, r3, #4
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	9103      	str	r1, [sp, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	bfbb      	ittet	lt
 8004332:	425b      	neglt	r3, r3
 8004334:	f042 0202 	orrlt.w	r2, r2, #2
 8004338:	9307      	strge	r3, [sp, #28]
 800433a:	9307      	strlt	r3, [sp, #28]
 800433c:	bfb8      	it	lt
 800433e:	9204      	strlt	r2, [sp, #16]
 8004340:	7823      	ldrb	r3, [r4, #0]
 8004342:	2b2e      	cmp	r3, #46	; 0x2e
 8004344:	d10c      	bne.n	8004360 <_svfiprintf_r+0x130>
 8004346:	7863      	ldrb	r3, [r4, #1]
 8004348:	2b2a      	cmp	r3, #42	; 0x2a
 800434a:	d134      	bne.n	80043b6 <_svfiprintf_r+0x186>
 800434c:	9b03      	ldr	r3, [sp, #12]
 800434e:	1d1a      	adds	r2, r3, #4
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	9203      	str	r2, [sp, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	bfb8      	it	lt
 8004358:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800435c:	3402      	adds	r4, #2
 800435e:	9305      	str	r3, [sp, #20]
 8004360:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004428 <_svfiprintf_r+0x1f8>
 8004364:	7821      	ldrb	r1, [r4, #0]
 8004366:	2203      	movs	r2, #3
 8004368:	4650      	mov	r0, sl
 800436a:	f7fb ff31 	bl	80001d0 <memchr>
 800436e:	b138      	cbz	r0, 8004380 <_svfiprintf_r+0x150>
 8004370:	9b04      	ldr	r3, [sp, #16]
 8004372:	eba0 000a 	sub.w	r0, r0, sl
 8004376:	2240      	movs	r2, #64	; 0x40
 8004378:	4082      	lsls	r2, r0
 800437a:	4313      	orrs	r3, r2
 800437c:	3401      	adds	r4, #1
 800437e:	9304      	str	r3, [sp, #16]
 8004380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004384:	4825      	ldr	r0, [pc, #148]	; (800441c <_svfiprintf_r+0x1ec>)
 8004386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800438a:	2206      	movs	r2, #6
 800438c:	f7fb ff20 	bl	80001d0 <memchr>
 8004390:	2800      	cmp	r0, #0
 8004392:	d038      	beq.n	8004406 <_svfiprintf_r+0x1d6>
 8004394:	4b22      	ldr	r3, [pc, #136]	; (8004420 <_svfiprintf_r+0x1f0>)
 8004396:	bb1b      	cbnz	r3, 80043e0 <_svfiprintf_r+0x1b0>
 8004398:	9b03      	ldr	r3, [sp, #12]
 800439a:	3307      	adds	r3, #7
 800439c:	f023 0307 	bic.w	r3, r3, #7
 80043a0:	3308      	adds	r3, #8
 80043a2:	9303      	str	r3, [sp, #12]
 80043a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043a6:	4433      	add	r3, r6
 80043a8:	9309      	str	r3, [sp, #36]	; 0x24
 80043aa:	e768      	b.n	800427e <_svfiprintf_r+0x4e>
 80043ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80043b0:	460c      	mov	r4, r1
 80043b2:	2001      	movs	r0, #1
 80043b4:	e7a6      	b.n	8004304 <_svfiprintf_r+0xd4>
 80043b6:	2300      	movs	r3, #0
 80043b8:	3401      	adds	r4, #1
 80043ba:	9305      	str	r3, [sp, #20]
 80043bc:	4619      	mov	r1, r3
 80043be:	f04f 0c0a 	mov.w	ip, #10
 80043c2:	4620      	mov	r0, r4
 80043c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043c8:	3a30      	subs	r2, #48	; 0x30
 80043ca:	2a09      	cmp	r2, #9
 80043cc:	d903      	bls.n	80043d6 <_svfiprintf_r+0x1a6>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0c6      	beq.n	8004360 <_svfiprintf_r+0x130>
 80043d2:	9105      	str	r1, [sp, #20]
 80043d4:	e7c4      	b.n	8004360 <_svfiprintf_r+0x130>
 80043d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80043da:	4604      	mov	r4, r0
 80043dc:	2301      	movs	r3, #1
 80043de:	e7f0      	b.n	80043c2 <_svfiprintf_r+0x192>
 80043e0:	ab03      	add	r3, sp, #12
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	462a      	mov	r2, r5
 80043e6:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <_svfiprintf_r+0x1f4>)
 80043e8:	a904      	add	r1, sp, #16
 80043ea:	4638      	mov	r0, r7
 80043ec:	f3af 8000 	nop.w
 80043f0:	1c42      	adds	r2, r0, #1
 80043f2:	4606      	mov	r6, r0
 80043f4:	d1d6      	bne.n	80043a4 <_svfiprintf_r+0x174>
 80043f6:	89ab      	ldrh	r3, [r5, #12]
 80043f8:	065b      	lsls	r3, r3, #25
 80043fa:	f53f af2d 	bmi.w	8004258 <_svfiprintf_r+0x28>
 80043fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004400:	b01d      	add	sp, #116	; 0x74
 8004402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004406:	ab03      	add	r3, sp, #12
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	462a      	mov	r2, r5
 800440c:	4b05      	ldr	r3, [pc, #20]	; (8004424 <_svfiprintf_r+0x1f4>)
 800440e:	a904      	add	r1, sp, #16
 8004410:	4638      	mov	r0, r7
 8004412:	f000 f879 	bl	8004508 <_printf_i>
 8004416:	e7eb      	b.n	80043f0 <_svfiprintf_r+0x1c0>
 8004418:	08004fc3 	.word	0x08004fc3
 800441c:	08004fcd 	.word	0x08004fcd
 8004420:	00000000 	.word	0x00000000
 8004424:	0800417d 	.word	0x0800417d
 8004428:	08004fc9 	.word	0x08004fc9

0800442c <_printf_common>:
 800442c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004430:	4616      	mov	r6, r2
 8004432:	4699      	mov	r9, r3
 8004434:	688a      	ldr	r2, [r1, #8]
 8004436:	690b      	ldr	r3, [r1, #16]
 8004438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800443c:	4293      	cmp	r3, r2
 800443e:	bfb8      	it	lt
 8004440:	4613      	movlt	r3, r2
 8004442:	6033      	str	r3, [r6, #0]
 8004444:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004448:	4607      	mov	r7, r0
 800444a:	460c      	mov	r4, r1
 800444c:	b10a      	cbz	r2, 8004452 <_printf_common+0x26>
 800444e:	3301      	adds	r3, #1
 8004450:	6033      	str	r3, [r6, #0]
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	0699      	lsls	r1, r3, #26
 8004456:	bf42      	ittt	mi
 8004458:	6833      	ldrmi	r3, [r6, #0]
 800445a:	3302      	addmi	r3, #2
 800445c:	6033      	strmi	r3, [r6, #0]
 800445e:	6825      	ldr	r5, [r4, #0]
 8004460:	f015 0506 	ands.w	r5, r5, #6
 8004464:	d106      	bne.n	8004474 <_printf_common+0x48>
 8004466:	f104 0a19 	add.w	sl, r4, #25
 800446a:	68e3      	ldr	r3, [r4, #12]
 800446c:	6832      	ldr	r2, [r6, #0]
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	42ab      	cmp	r3, r5
 8004472:	dc26      	bgt.n	80044c2 <_printf_common+0x96>
 8004474:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004478:	1e13      	subs	r3, r2, #0
 800447a:	6822      	ldr	r2, [r4, #0]
 800447c:	bf18      	it	ne
 800447e:	2301      	movne	r3, #1
 8004480:	0692      	lsls	r2, r2, #26
 8004482:	d42b      	bmi.n	80044dc <_printf_common+0xb0>
 8004484:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004488:	4649      	mov	r1, r9
 800448a:	4638      	mov	r0, r7
 800448c:	47c0      	blx	r8
 800448e:	3001      	adds	r0, #1
 8004490:	d01e      	beq.n	80044d0 <_printf_common+0xa4>
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	6922      	ldr	r2, [r4, #16]
 8004496:	f003 0306 	and.w	r3, r3, #6
 800449a:	2b04      	cmp	r3, #4
 800449c:	bf02      	ittt	eq
 800449e:	68e5      	ldreq	r5, [r4, #12]
 80044a0:	6833      	ldreq	r3, [r6, #0]
 80044a2:	1aed      	subeq	r5, r5, r3
 80044a4:	68a3      	ldr	r3, [r4, #8]
 80044a6:	bf0c      	ite	eq
 80044a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044ac:	2500      	movne	r5, #0
 80044ae:	4293      	cmp	r3, r2
 80044b0:	bfc4      	itt	gt
 80044b2:	1a9b      	subgt	r3, r3, r2
 80044b4:	18ed      	addgt	r5, r5, r3
 80044b6:	2600      	movs	r6, #0
 80044b8:	341a      	adds	r4, #26
 80044ba:	42b5      	cmp	r5, r6
 80044bc:	d11a      	bne.n	80044f4 <_printf_common+0xc8>
 80044be:	2000      	movs	r0, #0
 80044c0:	e008      	b.n	80044d4 <_printf_common+0xa8>
 80044c2:	2301      	movs	r3, #1
 80044c4:	4652      	mov	r2, sl
 80044c6:	4649      	mov	r1, r9
 80044c8:	4638      	mov	r0, r7
 80044ca:	47c0      	blx	r8
 80044cc:	3001      	adds	r0, #1
 80044ce:	d103      	bne.n	80044d8 <_printf_common+0xac>
 80044d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d8:	3501      	adds	r5, #1
 80044da:	e7c6      	b.n	800446a <_printf_common+0x3e>
 80044dc:	18e1      	adds	r1, r4, r3
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	2030      	movs	r0, #48	; 0x30
 80044e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044e6:	4422      	add	r2, r4
 80044e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044f0:	3302      	adds	r3, #2
 80044f2:	e7c7      	b.n	8004484 <_printf_common+0x58>
 80044f4:	2301      	movs	r3, #1
 80044f6:	4622      	mov	r2, r4
 80044f8:	4649      	mov	r1, r9
 80044fa:	4638      	mov	r0, r7
 80044fc:	47c0      	blx	r8
 80044fe:	3001      	adds	r0, #1
 8004500:	d0e6      	beq.n	80044d0 <_printf_common+0xa4>
 8004502:	3601      	adds	r6, #1
 8004504:	e7d9      	b.n	80044ba <_printf_common+0x8e>
	...

08004508 <_printf_i>:
 8004508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800450c:	7e0f      	ldrb	r7, [r1, #24]
 800450e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004510:	2f78      	cmp	r7, #120	; 0x78
 8004512:	4691      	mov	r9, r2
 8004514:	4680      	mov	r8, r0
 8004516:	460c      	mov	r4, r1
 8004518:	469a      	mov	sl, r3
 800451a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800451e:	d807      	bhi.n	8004530 <_printf_i+0x28>
 8004520:	2f62      	cmp	r7, #98	; 0x62
 8004522:	d80a      	bhi.n	800453a <_printf_i+0x32>
 8004524:	2f00      	cmp	r7, #0
 8004526:	f000 80d4 	beq.w	80046d2 <_printf_i+0x1ca>
 800452a:	2f58      	cmp	r7, #88	; 0x58
 800452c:	f000 80c0 	beq.w	80046b0 <_printf_i+0x1a8>
 8004530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004534:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004538:	e03a      	b.n	80045b0 <_printf_i+0xa8>
 800453a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800453e:	2b15      	cmp	r3, #21
 8004540:	d8f6      	bhi.n	8004530 <_printf_i+0x28>
 8004542:	a101      	add	r1, pc, #4	; (adr r1, 8004548 <_printf_i+0x40>)
 8004544:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004548:	080045a1 	.word	0x080045a1
 800454c:	080045b5 	.word	0x080045b5
 8004550:	08004531 	.word	0x08004531
 8004554:	08004531 	.word	0x08004531
 8004558:	08004531 	.word	0x08004531
 800455c:	08004531 	.word	0x08004531
 8004560:	080045b5 	.word	0x080045b5
 8004564:	08004531 	.word	0x08004531
 8004568:	08004531 	.word	0x08004531
 800456c:	08004531 	.word	0x08004531
 8004570:	08004531 	.word	0x08004531
 8004574:	080046b9 	.word	0x080046b9
 8004578:	080045e1 	.word	0x080045e1
 800457c:	08004673 	.word	0x08004673
 8004580:	08004531 	.word	0x08004531
 8004584:	08004531 	.word	0x08004531
 8004588:	080046db 	.word	0x080046db
 800458c:	08004531 	.word	0x08004531
 8004590:	080045e1 	.word	0x080045e1
 8004594:	08004531 	.word	0x08004531
 8004598:	08004531 	.word	0x08004531
 800459c:	0800467b 	.word	0x0800467b
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	1d1a      	adds	r2, r3, #4
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	602a      	str	r2, [r5, #0]
 80045a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045b0:	2301      	movs	r3, #1
 80045b2:	e09f      	b.n	80046f4 <_printf_i+0x1ec>
 80045b4:	6820      	ldr	r0, [r4, #0]
 80045b6:	682b      	ldr	r3, [r5, #0]
 80045b8:	0607      	lsls	r7, r0, #24
 80045ba:	f103 0104 	add.w	r1, r3, #4
 80045be:	6029      	str	r1, [r5, #0]
 80045c0:	d501      	bpl.n	80045c6 <_printf_i+0xbe>
 80045c2:	681e      	ldr	r6, [r3, #0]
 80045c4:	e003      	b.n	80045ce <_printf_i+0xc6>
 80045c6:	0646      	lsls	r6, r0, #25
 80045c8:	d5fb      	bpl.n	80045c2 <_printf_i+0xba>
 80045ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80045ce:	2e00      	cmp	r6, #0
 80045d0:	da03      	bge.n	80045da <_printf_i+0xd2>
 80045d2:	232d      	movs	r3, #45	; 0x2d
 80045d4:	4276      	negs	r6, r6
 80045d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045da:	485a      	ldr	r0, [pc, #360]	; (8004744 <_printf_i+0x23c>)
 80045dc:	230a      	movs	r3, #10
 80045de:	e012      	b.n	8004606 <_printf_i+0xfe>
 80045e0:	682b      	ldr	r3, [r5, #0]
 80045e2:	6820      	ldr	r0, [r4, #0]
 80045e4:	1d19      	adds	r1, r3, #4
 80045e6:	6029      	str	r1, [r5, #0]
 80045e8:	0605      	lsls	r5, r0, #24
 80045ea:	d501      	bpl.n	80045f0 <_printf_i+0xe8>
 80045ec:	681e      	ldr	r6, [r3, #0]
 80045ee:	e002      	b.n	80045f6 <_printf_i+0xee>
 80045f0:	0641      	lsls	r1, r0, #25
 80045f2:	d5fb      	bpl.n	80045ec <_printf_i+0xe4>
 80045f4:	881e      	ldrh	r6, [r3, #0]
 80045f6:	4853      	ldr	r0, [pc, #332]	; (8004744 <_printf_i+0x23c>)
 80045f8:	2f6f      	cmp	r7, #111	; 0x6f
 80045fa:	bf0c      	ite	eq
 80045fc:	2308      	moveq	r3, #8
 80045fe:	230a      	movne	r3, #10
 8004600:	2100      	movs	r1, #0
 8004602:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004606:	6865      	ldr	r5, [r4, #4]
 8004608:	60a5      	str	r5, [r4, #8]
 800460a:	2d00      	cmp	r5, #0
 800460c:	bfa2      	ittt	ge
 800460e:	6821      	ldrge	r1, [r4, #0]
 8004610:	f021 0104 	bicge.w	r1, r1, #4
 8004614:	6021      	strge	r1, [r4, #0]
 8004616:	b90e      	cbnz	r6, 800461c <_printf_i+0x114>
 8004618:	2d00      	cmp	r5, #0
 800461a:	d04b      	beq.n	80046b4 <_printf_i+0x1ac>
 800461c:	4615      	mov	r5, r2
 800461e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004622:	fb03 6711 	mls	r7, r3, r1, r6
 8004626:	5dc7      	ldrb	r7, [r0, r7]
 8004628:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800462c:	4637      	mov	r7, r6
 800462e:	42bb      	cmp	r3, r7
 8004630:	460e      	mov	r6, r1
 8004632:	d9f4      	bls.n	800461e <_printf_i+0x116>
 8004634:	2b08      	cmp	r3, #8
 8004636:	d10b      	bne.n	8004650 <_printf_i+0x148>
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	07de      	lsls	r6, r3, #31
 800463c:	d508      	bpl.n	8004650 <_printf_i+0x148>
 800463e:	6923      	ldr	r3, [r4, #16]
 8004640:	6861      	ldr	r1, [r4, #4]
 8004642:	4299      	cmp	r1, r3
 8004644:	bfde      	ittt	le
 8004646:	2330      	movle	r3, #48	; 0x30
 8004648:	f805 3c01 	strble.w	r3, [r5, #-1]
 800464c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004650:	1b52      	subs	r2, r2, r5
 8004652:	6122      	str	r2, [r4, #16]
 8004654:	f8cd a000 	str.w	sl, [sp]
 8004658:	464b      	mov	r3, r9
 800465a:	aa03      	add	r2, sp, #12
 800465c:	4621      	mov	r1, r4
 800465e:	4640      	mov	r0, r8
 8004660:	f7ff fee4 	bl	800442c <_printf_common>
 8004664:	3001      	adds	r0, #1
 8004666:	d14a      	bne.n	80046fe <_printf_i+0x1f6>
 8004668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800466c:	b004      	add	sp, #16
 800466e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	f043 0320 	orr.w	r3, r3, #32
 8004678:	6023      	str	r3, [r4, #0]
 800467a:	4833      	ldr	r0, [pc, #204]	; (8004748 <_printf_i+0x240>)
 800467c:	2778      	movs	r7, #120	; 0x78
 800467e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	6829      	ldr	r1, [r5, #0]
 8004686:	061f      	lsls	r7, r3, #24
 8004688:	f851 6b04 	ldr.w	r6, [r1], #4
 800468c:	d402      	bmi.n	8004694 <_printf_i+0x18c>
 800468e:	065f      	lsls	r7, r3, #25
 8004690:	bf48      	it	mi
 8004692:	b2b6      	uxthmi	r6, r6
 8004694:	07df      	lsls	r7, r3, #31
 8004696:	bf48      	it	mi
 8004698:	f043 0320 	orrmi.w	r3, r3, #32
 800469c:	6029      	str	r1, [r5, #0]
 800469e:	bf48      	it	mi
 80046a0:	6023      	strmi	r3, [r4, #0]
 80046a2:	b91e      	cbnz	r6, 80046ac <_printf_i+0x1a4>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	f023 0320 	bic.w	r3, r3, #32
 80046aa:	6023      	str	r3, [r4, #0]
 80046ac:	2310      	movs	r3, #16
 80046ae:	e7a7      	b.n	8004600 <_printf_i+0xf8>
 80046b0:	4824      	ldr	r0, [pc, #144]	; (8004744 <_printf_i+0x23c>)
 80046b2:	e7e4      	b.n	800467e <_printf_i+0x176>
 80046b4:	4615      	mov	r5, r2
 80046b6:	e7bd      	b.n	8004634 <_printf_i+0x12c>
 80046b8:	682b      	ldr	r3, [r5, #0]
 80046ba:	6826      	ldr	r6, [r4, #0]
 80046bc:	6961      	ldr	r1, [r4, #20]
 80046be:	1d18      	adds	r0, r3, #4
 80046c0:	6028      	str	r0, [r5, #0]
 80046c2:	0635      	lsls	r5, r6, #24
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	d501      	bpl.n	80046cc <_printf_i+0x1c4>
 80046c8:	6019      	str	r1, [r3, #0]
 80046ca:	e002      	b.n	80046d2 <_printf_i+0x1ca>
 80046cc:	0670      	lsls	r0, r6, #25
 80046ce:	d5fb      	bpl.n	80046c8 <_printf_i+0x1c0>
 80046d0:	8019      	strh	r1, [r3, #0]
 80046d2:	2300      	movs	r3, #0
 80046d4:	6123      	str	r3, [r4, #16]
 80046d6:	4615      	mov	r5, r2
 80046d8:	e7bc      	b.n	8004654 <_printf_i+0x14c>
 80046da:	682b      	ldr	r3, [r5, #0]
 80046dc:	1d1a      	adds	r2, r3, #4
 80046de:	602a      	str	r2, [r5, #0]
 80046e0:	681d      	ldr	r5, [r3, #0]
 80046e2:	6862      	ldr	r2, [r4, #4]
 80046e4:	2100      	movs	r1, #0
 80046e6:	4628      	mov	r0, r5
 80046e8:	f7fb fd72 	bl	80001d0 <memchr>
 80046ec:	b108      	cbz	r0, 80046f2 <_printf_i+0x1ea>
 80046ee:	1b40      	subs	r0, r0, r5
 80046f0:	6060      	str	r0, [r4, #4]
 80046f2:	6863      	ldr	r3, [r4, #4]
 80046f4:	6123      	str	r3, [r4, #16]
 80046f6:	2300      	movs	r3, #0
 80046f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046fc:	e7aa      	b.n	8004654 <_printf_i+0x14c>
 80046fe:	6923      	ldr	r3, [r4, #16]
 8004700:	462a      	mov	r2, r5
 8004702:	4649      	mov	r1, r9
 8004704:	4640      	mov	r0, r8
 8004706:	47d0      	blx	sl
 8004708:	3001      	adds	r0, #1
 800470a:	d0ad      	beq.n	8004668 <_printf_i+0x160>
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	079b      	lsls	r3, r3, #30
 8004710:	d413      	bmi.n	800473a <_printf_i+0x232>
 8004712:	68e0      	ldr	r0, [r4, #12]
 8004714:	9b03      	ldr	r3, [sp, #12]
 8004716:	4298      	cmp	r0, r3
 8004718:	bfb8      	it	lt
 800471a:	4618      	movlt	r0, r3
 800471c:	e7a6      	b.n	800466c <_printf_i+0x164>
 800471e:	2301      	movs	r3, #1
 8004720:	4632      	mov	r2, r6
 8004722:	4649      	mov	r1, r9
 8004724:	4640      	mov	r0, r8
 8004726:	47d0      	blx	sl
 8004728:	3001      	adds	r0, #1
 800472a:	d09d      	beq.n	8004668 <_printf_i+0x160>
 800472c:	3501      	adds	r5, #1
 800472e:	68e3      	ldr	r3, [r4, #12]
 8004730:	9903      	ldr	r1, [sp, #12]
 8004732:	1a5b      	subs	r3, r3, r1
 8004734:	42ab      	cmp	r3, r5
 8004736:	dcf2      	bgt.n	800471e <_printf_i+0x216>
 8004738:	e7eb      	b.n	8004712 <_printf_i+0x20a>
 800473a:	2500      	movs	r5, #0
 800473c:	f104 0619 	add.w	r6, r4, #25
 8004740:	e7f5      	b.n	800472e <_printf_i+0x226>
 8004742:	bf00      	nop
 8004744:	08004fd4 	.word	0x08004fd4
 8004748:	08004fe5 	.word	0x08004fe5

0800474c <__sflush_r>:
 800474c:	898a      	ldrh	r2, [r1, #12]
 800474e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004752:	4605      	mov	r5, r0
 8004754:	0710      	lsls	r0, r2, #28
 8004756:	460c      	mov	r4, r1
 8004758:	d458      	bmi.n	800480c <__sflush_r+0xc0>
 800475a:	684b      	ldr	r3, [r1, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	dc05      	bgt.n	800476c <__sflush_r+0x20>
 8004760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	dc02      	bgt.n	800476c <__sflush_r+0x20>
 8004766:	2000      	movs	r0, #0
 8004768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800476c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800476e:	2e00      	cmp	r6, #0
 8004770:	d0f9      	beq.n	8004766 <__sflush_r+0x1a>
 8004772:	2300      	movs	r3, #0
 8004774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004778:	682f      	ldr	r7, [r5, #0]
 800477a:	6a21      	ldr	r1, [r4, #32]
 800477c:	602b      	str	r3, [r5, #0]
 800477e:	d032      	beq.n	80047e6 <__sflush_r+0x9a>
 8004780:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004782:	89a3      	ldrh	r3, [r4, #12]
 8004784:	075a      	lsls	r2, r3, #29
 8004786:	d505      	bpl.n	8004794 <__sflush_r+0x48>
 8004788:	6863      	ldr	r3, [r4, #4]
 800478a:	1ac0      	subs	r0, r0, r3
 800478c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800478e:	b10b      	cbz	r3, 8004794 <__sflush_r+0x48>
 8004790:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004792:	1ac0      	subs	r0, r0, r3
 8004794:	2300      	movs	r3, #0
 8004796:	4602      	mov	r2, r0
 8004798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800479a:	6a21      	ldr	r1, [r4, #32]
 800479c:	4628      	mov	r0, r5
 800479e:	47b0      	blx	r6
 80047a0:	1c43      	adds	r3, r0, #1
 80047a2:	89a3      	ldrh	r3, [r4, #12]
 80047a4:	d106      	bne.n	80047b4 <__sflush_r+0x68>
 80047a6:	6829      	ldr	r1, [r5, #0]
 80047a8:	291d      	cmp	r1, #29
 80047aa:	d82b      	bhi.n	8004804 <__sflush_r+0xb8>
 80047ac:	4a29      	ldr	r2, [pc, #164]	; (8004854 <__sflush_r+0x108>)
 80047ae:	410a      	asrs	r2, r1
 80047b0:	07d6      	lsls	r6, r2, #31
 80047b2:	d427      	bmi.n	8004804 <__sflush_r+0xb8>
 80047b4:	2200      	movs	r2, #0
 80047b6:	6062      	str	r2, [r4, #4]
 80047b8:	04d9      	lsls	r1, r3, #19
 80047ba:	6922      	ldr	r2, [r4, #16]
 80047bc:	6022      	str	r2, [r4, #0]
 80047be:	d504      	bpl.n	80047ca <__sflush_r+0x7e>
 80047c0:	1c42      	adds	r2, r0, #1
 80047c2:	d101      	bne.n	80047c8 <__sflush_r+0x7c>
 80047c4:	682b      	ldr	r3, [r5, #0]
 80047c6:	b903      	cbnz	r3, 80047ca <__sflush_r+0x7e>
 80047c8:	6560      	str	r0, [r4, #84]	; 0x54
 80047ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047cc:	602f      	str	r7, [r5, #0]
 80047ce:	2900      	cmp	r1, #0
 80047d0:	d0c9      	beq.n	8004766 <__sflush_r+0x1a>
 80047d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047d6:	4299      	cmp	r1, r3
 80047d8:	d002      	beq.n	80047e0 <__sflush_r+0x94>
 80047da:	4628      	mov	r0, r5
 80047dc:	f7ff fc82 	bl	80040e4 <_free_r>
 80047e0:	2000      	movs	r0, #0
 80047e2:	6360      	str	r0, [r4, #52]	; 0x34
 80047e4:	e7c0      	b.n	8004768 <__sflush_r+0x1c>
 80047e6:	2301      	movs	r3, #1
 80047e8:	4628      	mov	r0, r5
 80047ea:	47b0      	blx	r6
 80047ec:	1c41      	adds	r1, r0, #1
 80047ee:	d1c8      	bne.n	8004782 <__sflush_r+0x36>
 80047f0:	682b      	ldr	r3, [r5, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0c5      	beq.n	8004782 <__sflush_r+0x36>
 80047f6:	2b1d      	cmp	r3, #29
 80047f8:	d001      	beq.n	80047fe <__sflush_r+0xb2>
 80047fa:	2b16      	cmp	r3, #22
 80047fc:	d101      	bne.n	8004802 <__sflush_r+0xb6>
 80047fe:	602f      	str	r7, [r5, #0]
 8004800:	e7b1      	b.n	8004766 <__sflush_r+0x1a>
 8004802:	89a3      	ldrh	r3, [r4, #12]
 8004804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004808:	81a3      	strh	r3, [r4, #12]
 800480a:	e7ad      	b.n	8004768 <__sflush_r+0x1c>
 800480c:	690f      	ldr	r7, [r1, #16]
 800480e:	2f00      	cmp	r7, #0
 8004810:	d0a9      	beq.n	8004766 <__sflush_r+0x1a>
 8004812:	0793      	lsls	r3, r2, #30
 8004814:	680e      	ldr	r6, [r1, #0]
 8004816:	bf08      	it	eq
 8004818:	694b      	ldreq	r3, [r1, #20]
 800481a:	600f      	str	r7, [r1, #0]
 800481c:	bf18      	it	ne
 800481e:	2300      	movne	r3, #0
 8004820:	eba6 0807 	sub.w	r8, r6, r7
 8004824:	608b      	str	r3, [r1, #8]
 8004826:	f1b8 0f00 	cmp.w	r8, #0
 800482a:	dd9c      	ble.n	8004766 <__sflush_r+0x1a>
 800482c:	6a21      	ldr	r1, [r4, #32]
 800482e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004830:	4643      	mov	r3, r8
 8004832:	463a      	mov	r2, r7
 8004834:	4628      	mov	r0, r5
 8004836:	47b0      	blx	r6
 8004838:	2800      	cmp	r0, #0
 800483a:	dc06      	bgt.n	800484a <__sflush_r+0xfe>
 800483c:	89a3      	ldrh	r3, [r4, #12]
 800483e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004842:	81a3      	strh	r3, [r4, #12]
 8004844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004848:	e78e      	b.n	8004768 <__sflush_r+0x1c>
 800484a:	4407      	add	r7, r0
 800484c:	eba8 0800 	sub.w	r8, r8, r0
 8004850:	e7e9      	b.n	8004826 <__sflush_r+0xda>
 8004852:	bf00      	nop
 8004854:	dfbffffe 	.word	0xdfbffffe

08004858 <_fflush_r>:
 8004858:	b538      	push	{r3, r4, r5, lr}
 800485a:	690b      	ldr	r3, [r1, #16]
 800485c:	4605      	mov	r5, r0
 800485e:	460c      	mov	r4, r1
 8004860:	b913      	cbnz	r3, 8004868 <_fflush_r+0x10>
 8004862:	2500      	movs	r5, #0
 8004864:	4628      	mov	r0, r5
 8004866:	bd38      	pop	{r3, r4, r5, pc}
 8004868:	b118      	cbz	r0, 8004872 <_fflush_r+0x1a>
 800486a:	6a03      	ldr	r3, [r0, #32]
 800486c:	b90b      	cbnz	r3, 8004872 <_fflush_r+0x1a>
 800486e:	f7ff faa3 	bl	8003db8 <__sinit>
 8004872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f3      	beq.n	8004862 <_fflush_r+0xa>
 800487a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800487c:	07d0      	lsls	r0, r2, #31
 800487e:	d404      	bmi.n	800488a <_fflush_r+0x32>
 8004880:	0599      	lsls	r1, r3, #22
 8004882:	d402      	bmi.n	800488a <_fflush_r+0x32>
 8004884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004886:	f7ff fbfe 	bl	8004086 <__retarget_lock_acquire_recursive>
 800488a:	4628      	mov	r0, r5
 800488c:	4621      	mov	r1, r4
 800488e:	f7ff ff5d 	bl	800474c <__sflush_r>
 8004892:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004894:	07da      	lsls	r2, r3, #31
 8004896:	4605      	mov	r5, r0
 8004898:	d4e4      	bmi.n	8004864 <_fflush_r+0xc>
 800489a:	89a3      	ldrh	r3, [r4, #12]
 800489c:	059b      	lsls	r3, r3, #22
 800489e:	d4e1      	bmi.n	8004864 <_fflush_r+0xc>
 80048a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048a2:	f7ff fbf1 	bl	8004088 <__retarget_lock_release_recursive>
 80048a6:	e7dd      	b.n	8004864 <_fflush_r+0xc>

080048a8 <fiprintf>:
 80048a8:	b40e      	push	{r1, r2, r3}
 80048aa:	b503      	push	{r0, r1, lr}
 80048ac:	4601      	mov	r1, r0
 80048ae:	ab03      	add	r3, sp, #12
 80048b0:	4805      	ldr	r0, [pc, #20]	; (80048c8 <fiprintf+0x20>)
 80048b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80048b6:	6800      	ldr	r0, [r0, #0]
 80048b8:	9301      	str	r3, [sp, #4]
 80048ba:	f000 f879 	bl	80049b0 <_vfiprintf_r>
 80048be:	b002      	add	sp, #8
 80048c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80048c4:	b003      	add	sp, #12
 80048c6:	4770      	bx	lr
 80048c8:	2000009c 	.word	0x2000009c

080048cc <memmove>:
 80048cc:	4288      	cmp	r0, r1
 80048ce:	b510      	push	{r4, lr}
 80048d0:	eb01 0402 	add.w	r4, r1, r2
 80048d4:	d902      	bls.n	80048dc <memmove+0x10>
 80048d6:	4284      	cmp	r4, r0
 80048d8:	4623      	mov	r3, r4
 80048da:	d807      	bhi.n	80048ec <memmove+0x20>
 80048dc:	1e43      	subs	r3, r0, #1
 80048de:	42a1      	cmp	r1, r4
 80048e0:	d008      	beq.n	80048f4 <memmove+0x28>
 80048e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048ea:	e7f8      	b.n	80048de <memmove+0x12>
 80048ec:	4402      	add	r2, r0
 80048ee:	4601      	mov	r1, r0
 80048f0:	428a      	cmp	r2, r1
 80048f2:	d100      	bne.n	80048f6 <memmove+0x2a>
 80048f4:	bd10      	pop	{r4, pc}
 80048f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048fe:	e7f7      	b.n	80048f0 <memmove+0x24>

08004900 <_realloc_r>:
 8004900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004904:	4680      	mov	r8, r0
 8004906:	4614      	mov	r4, r2
 8004908:	460e      	mov	r6, r1
 800490a:	b921      	cbnz	r1, 8004916 <_realloc_r+0x16>
 800490c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004910:	4611      	mov	r1, r2
 8004912:	f7ff b8cd 	b.w	8003ab0 <_malloc_r>
 8004916:	b92a      	cbnz	r2, 8004924 <_realloc_r+0x24>
 8004918:	f7ff fbe4 	bl	80040e4 <_free_r>
 800491c:	4625      	mov	r5, r4
 800491e:	4628      	mov	r0, r5
 8004920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004924:	f000 f9f4 	bl	8004d10 <_malloc_usable_size_r>
 8004928:	4284      	cmp	r4, r0
 800492a:	4607      	mov	r7, r0
 800492c:	d802      	bhi.n	8004934 <_realloc_r+0x34>
 800492e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004932:	d812      	bhi.n	800495a <_realloc_r+0x5a>
 8004934:	4621      	mov	r1, r4
 8004936:	4640      	mov	r0, r8
 8004938:	f7ff f8ba 	bl	8003ab0 <_malloc_r>
 800493c:	4605      	mov	r5, r0
 800493e:	2800      	cmp	r0, #0
 8004940:	d0ed      	beq.n	800491e <_realloc_r+0x1e>
 8004942:	42bc      	cmp	r4, r7
 8004944:	4622      	mov	r2, r4
 8004946:	4631      	mov	r1, r6
 8004948:	bf28      	it	cs
 800494a:	463a      	movcs	r2, r7
 800494c:	f7ff fb9d 	bl	800408a <memcpy>
 8004950:	4631      	mov	r1, r6
 8004952:	4640      	mov	r0, r8
 8004954:	f7ff fbc6 	bl	80040e4 <_free_r>
 8004958:	e7e1      	b.n	800491e <_realloc_r+0x1e>
 800495a:	4635      	mov	r5, r6
 800495c:	e7df      	b.n	800491e <_realloc_r+0x1e>

0800495e <__sfputc_r>:
 800495e:	6893      	ldr	r3, [r2, #8]
 8004960:	3b01      	subs	r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	b410      	push	{r4}
 8004966:	6093      	str	r3, [r2, #8]
 8004968:	da08      	bge.n	800497c <__sfputc_r+0x1e>
 800496a:	6994      	ldr	r4, [r2, #24]
 800496c:	42a3      	cmp	r3, r4
 800496e:	db01      	blt.n	8004974 <__sfputc_r+0x16>
 8004970:	290a      	cmp	r1, #10
 8004972:	d103      	bne.n	800497c <__sfputc_r+0x1e>
 8004974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004978:	f000 b934 	b.w	8004be4 <__swbuf_r>
 800497c:	6813      	ldr	r3, [r2, #0]
 800497e:	1c58      	adds	r0, r3, #1
 8004980:	6010      	str	r0, [r2, #0]
 8004982:	7019      	strb	r1, [r3, #0]
 8004984:	4608      	mov	r0, r1
 8004986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800498a:	4770      	bx	lr

0800498c <__sfputs_r>:
 800498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498e:	4606      	mov	r6, r0
 8004990:	460f      	mov	r7, r1
 8004992:	4614      	mov	r4, r2
 8004994:	18d5      	adds	r5, r2, r3
 8004996:	42ac      	cmp	r4, r5
 8004998:	d101      	bne.n	800499e <__sfputs_r+0x12>
 800499a:	2000      	movs	r0, #0
 800499c:	e007      	b.n	80049ae <__sfputs_r+0x22>
 800499e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a2:	463a      	mov	r2, r7
 80049a4:	4630      	mov	r0, r6
 80049a6:	f7ff ffda 	bl	800495e <__sfputc_r>
 80049aa:	1c43      	adds	r3, r0, #1
 80049ac:	d1f3      	bne.n	8004996 <__sfputs_r+0xa>
 80049ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049b0 <_vfiprintf_r>:
 80049b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b4:	460d      	mov	r5, r1
 80049b6:	b09d      	sub	sp, #116	; 0x74
 80049b8:	4614      	mov	r4, r2
 80049ba:	4698      	mov	r8, r3
 80049bc:	4606      	mov	r6, r0
 80049be:	b118      	cbz	r0, 80049c8 <_vfiprintf_r+0x18>
 80049c0:	6a03      	ldr	r3, [r0, #32]
 80049c2:	b90b      	cbnz	r3, 80049c8 <_vfiprintf_r+0x18>
 80049c4:	f7ff f9f8 	bl	8003db8 <__sinit>
 80049c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049ca:	07d9      	lsls	r1, r3, #31
 80049cc:	d405      	bmi.n	80049da <_vfiprintf_r+0x2a>
 80049ce:	89ab      	ldrh	r3, [r5, #12]
 80049d0:	059a      	lsls	r2, r3, #22
 80049d2:	d402      	bmi.n	80049da <_vfiprintf_r+0x2a>
 80049d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049d6:	f7ff fb56 	bl	8004086 <__retarget_lock_acquire_recursive>
 80049da:	89ab      	ldrh	r3, [r5, #12]
 80049dc:	071b      	lsls	r3, r3, #28
 80049de:	d501      	bpl.n	80049e4 <_vfiprintf_r+0x34>
 80049e0:	692b      	ldr	r3, [r5, #16]
 80049e2:	b99b      	cbnz	r3, 8004a0c <_vfiprintf_r+0x5c>
 80049e4:	4629      	mov	r1, r5
 80049e6:	4630      	mov	r0, r6
 80049e8:	f000 f93a 	bl	8004c60 <__swsetup_r>
 80049ec:	b170      	cbz	r0, 8004a0c <_vfiprintf_r+0x5c>
 80049ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049f0:	07dc      	lsls	r4, r3, #31
 80049f2:	d504      	bpl.n	80049fe <_vfiprintf_r+0x4e>
 80049f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049f8:	b01d      	add	sp, #116	; 0x74
 80049fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049fe:	89ab      	ldrh	r3, [r5, #12]
 8004a00:	0598      	lsls	r0, r3, #22
 8004a02:	d4f7      	bmi.n	80049f4 <_vfiprintf_r+0x44>
 8004a04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a06:	f7ff fb3f 	bl	8004088 <__retarget_lock_release_recursive>
 8004a0a:	e7f3      	b.n	80049f4 <_vfiprintf_r+0x44>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a10:	2320      	movs	r3, #32
 8004a12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a16:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a1a:	2330      	movs	r3, #48	; 0x30
 8004a1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004bd0 <_vfiprintf_r+0x220>
 8004a20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a24:	f04f 0901 	mov.w	r9, #1
 8004a28:	4623      	mov	r3, r4
 8004a2a:	469a      	mov	sl, r3
 8004a2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a30:	b10a      	cbz	r2, 8004a36 <_vfiprintf_r+0x86>
 8004a32:	2a25      	cmp	r2, #37	; 0x25
 8004a34:	d1f9      	bne.n	8004a2a <_vfiprintf_r+0x7a>
 8004a36:	ebba 0b04 	subs.w	fp, sl, r4
 8004a3a:	d00b      	beq.n	8004a54 <_vfiprintf_r+0xa4>
 8004a3c:	465b      	mov	r3, fp
 8004a3e:	4622      	mov	r2, r4
 8004a40:	4629      	mov	r1, r5
 8004a42:	4630      	mov	r0, r6
 8004a44:	f7ff ffa2 	bl	800498c <__sfputs_r>
 8004a48:	3001      	adds	r0, #1
 8004a4a:	f000 80a9 	beq.w	8004ba0 <_vfiprintf_r+0x1f0>
 8004a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a50:	445a      	add	r2, fp
 8004a52:	9209      	str	r2, [sp, #36]	; 0x24
 8004a54:	f89a 3000 	ldrb.w	r3, [sl]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 80a1 	beq.w	8004ba0 <_vfiprintf_r+0x1f0>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a68:	f10a 0a01 	add.w	sl, sl, #1
 8004a6c:	9304      	str	r3, [sp, #16]
 8004a6e:	9307      	str	r3, [sp, #28]
 8004a70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a74:	931a      	str	r3, [sp, #104]	; 0x68
 8004a76:	4654      	mov	r4, sl
 8004a78:	2205      	movs	r2, #5
 8004a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a7e:	4854      	ldr	r0, [pc, #336]	; (8004bd0 <_vfiprintf_r+0x220>)
 8004a80:	f7fb fba6 	bl	80001d0 <memchr>
 8004a84:	9a04      	ldr	r2, [sp, #16]
 8004a86:	b9d8      	cbnz	r0, 8004ac0 <_vfiprintf_r+0x110>
 8004a88:	06d1      	lsls	r1, r2, #27
 8004a8a:	bf44      	itt	mi
 8004a8c:	2320      	movmi	r3, #32
 8004a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a92:	0713      	lsls	r3, r2, #28
 8004a94:	bf44      	itt	mi
 8004a96:	232b      	movmi	r3, #43	; 0x2b
 8004a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8004aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8004aa2:	d015      	beq.n	8004ad0 <_vfiprintf_r+0x120>
 8004aa4:	9a07      	ldr	r2, [sp, #28]
 8004aa6:	4654      	mov	r4, sl
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	f04f 0c0a 	mov.w	ip, #10
 8004aae:	4621      	mov	r1, r4
 8004ab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ab4:	3b30      	subs	r3, #48	; 0x30
 8004ab6:	2b09      	cmp	r3, #9
 8004ab8:	d94d      	bls.n	8004b56 <_vfiprintf_r+0x1a6>
 8004aba:	b1b0      	cbz	r0, 8004aea <_vfiprintf_r+0x13a>
 8004abc:	9207      	str	r2, [sp, #28]
 8004abe:	e014      	b.n	8004aea <_vfiprintf_r+0x13a>
 8004ac0:	eba0 0308 	sub.w	r3, r0, r8
 8004ac4:	fa09 f303 	lsl.w	r3, r9, r3
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	9304      	str	r3, [sp, #16]
 8004acc:	46a2      	mov	sl, r4
 8004ace:	e7d2      	b.n	8004a76 <_vfiprintf_r+0xc6>
 8004ad0:	9b03      	ldr	r3, [sp, #12]
 8004ad2:	1d19      	adds	r1, r3, #4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	9103      	str	r1, [sp, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bfbb      	ittet	lt
 8004adc:	425b      	neglt	r3, r3
 8004ade:	f042 0202 	orrlt.w	r2, r2, #2
 8004ae2:	9307      	strge	r3, [sp, #28]
 8004ae4:	9307      	strlt	r3, [sp, #28]
 8004ae6:	bfb8      	it	lt
 8004ae8:	9204      	strlt	r2, [sp, #16]
 8004aea:	7823      	ldrb	r3, [r4, #0]
 8004aec:	2b2e      	cmp	r3, #46	; 0x2e
 8004aee:	d10c      	bne.n	8004b0a <_vfiprintf_r+0x15a>
 8004af0:	7863      	ldrb	r3, [r4, #1]
 8004af2:	2b2a      	cmp	r3, #42	; 0x2a
 8004af4:	d134      	bne.n	8004b60 <_vfiprintf_r+0x1b0>
 8004af6:	9b03      	ldr	r3, [sp, #12]
 8004af8:	1d1a      	adds	r2, r3, #4
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	9203      	str	r2, [sp, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	bfb8      	it	lt
 8004b02:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004b06:	3402      	adds	r4, #2
 8004b08:	9305      	str	r3, [sp, #20]
 8004b0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004be0 <_vfiprintf_r+0x230>
 8004b0e:	7821      	ldrb	r1, [r4, #0]
 8004b10:	2203      	movs	r2, #3
 8004b12:	4650      	mov	r0, sl
 8004b14:	f7fb fb5c 	bl	80001d0 <memchr>
 8004b18:	b138      	cbz	r0, 8004b2a <_vfiprintf_r+0x17a>
 8004b1a:	9b04      	ldr	r3, [sp, #16]
 8004b1c:	eba0 000a 	sub.w	r0, r0, sl
 8004b20:	2240      	movs	r2, #64	; 0x40
 8004b22:	4082      	lsls	r2, r0
 8004b24:	4313      	orrs	r3, r2
 8004b26:	3401      	adds	r4, #1
 8004b28:	9304      	str	r3, [sp, #16]
 8004b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b2e:	4829      	ldr	r0, [pc, #164]	; (8004bd4 <_vfiprintf_r+0x224>)
 8004b30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b34:	2206      	movs	r2, #6
 8004b36:	f7fb fb4b 	bl	80001d0 <memchr>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d03f      	beq.n	8004bbe <_vfiprintf_r+0x20e>
 8004b3e:	4b26      	ldr	r3, [pc, #152]	; (8004bd8 <_vfiprintf_r+0x228>)
 8004b40:	bb1b      	cbnz	r3, 8004b8a <_vfiprintf_r+0x1da>
 8004b42:	9b03      	ldr	r3, [sp, #12]
 8004b44:	3307      	adds	r3, #7
 8004b46:	f023 0307 	bic.w	r3, r3, #7
 8004b4a:	3308      	adds	r3, #8
 8004b4c:	9303      	str	r3, [sp, #12]
 8004b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b50:	443b      	add	r3, r7
 8004b52:	9309      	str	r3, [sp, #36]	; 0x24
 8004b54:	e768      	b.n	8004a28 <_vfiprintf_r+0x78>
 8004b56:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	e7a6      	b.n	8004aae <_vfiprintf_r+0xfe>
 8004b60:	2300      	movs	r3, #0
 8004b62:	3401      	adds	r4, #1
 8004b64:	9305      	str	r3, [sp, #20]
 8004b66:	4619      	mov	r1, r3
 8004b68:	f04f 0c0a 	mov.w	ip, #10
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b72:	3a30      	subs	r2, #48	; 0x30
 8004b74:	2a09      	cmp	r2, #9
 8004b76:	d903      	bls.n	8004b80 <_vfiprintf_r+0x1d0>
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0c6      	beq.n	8004b0a <_vfiprintf_r+0x15a>
 8004b7c:	9105      	str	r1, [sp, #20]
 8004b7e:	e7c4      	b.n	8004b0a <_vfiprintf_r+0x15a>
 8004b80:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b84:	4604      	mov	r4, r0
 8004b86:	2301      	movs	r3, #1
 8004b88:	e7f0      	b.n	8004b6c <_vfiprintf_r+0x1bc>
 8004b8a:	ab03      	add	r3, sp, #12
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	462a      	mov	r2, r5
 8004b90:	4b12      	ldr	r3, [pc, #72]	; (8004bdc <_vfiprintf_r+0x22c>)
 8004b92:	a904      	add	r1, sp, #16
 8004b94:	4630      	mov	r0, r6
 8004b96:	f3af 8000 	nop.w
 8004b9a:	4607      	mov	r7, r0
 8004b9c:	1c78      	adds	r0, r7, #1
 8004b9e:	d1d6      	bne.n	8004b4e <_vfiprintf_r+0x19e>
 8004ba0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ba2:	07d9      	lsls	r1, r3, #31
 8004ba4:	d405      	bmi.n	8004bb2 <_vfiprintf_r+0x202>
 8004ba6:	89ab      	ldrh	r3, [r5, #12]
 8004ba8:	059a      	lsls	r2, r3, #22
 8004baa:	d402      	bmi.n	8004bb2 <_vfiprintf_r+0x202>
 8004bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bae:	f7ff fa6b 	bl	8004088 <__retarget_lock_release_recursive>
 8004bb2:	89ab      	ldrh	r3, [r5, #12]
 8004bb4:	065b      	lsls	r3, r3, #25
 8004bb6:	f53f af1d 	bmi.w	80049f4 <_vfiprintf_r+0x44>
 8004bba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bbc:	e71c      	b.n	80049f8 <_vfiprintf_r+0x48>
 8004bbe:	ab03      	add	r3, sp, #12
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	462a      	mov	r2, r5
 8004bc4:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <_vfiprintf_r+0x22c>)
 8004bc6:	a904      	add	r1, sp, #16
 8004bc8:	4630      	mov	r0, r6
 8004bca:	f7ff fc9d 	bl	8004508 <_printf_i>
 8004bce:	e7e4      	b.n	8004b9a <_vfiprintf_r+0x1ea>
 8004bd0:	08004fc3 	.word	0x08004fc3
 8004bd4:	08004fcd 	.word	0x08004fcd
 8004bd8:	00000000 	.word	0x00000000
 8004bdc:	0800498d 	.word	0x0800498d
 8004be0:	08004fc9 	.word	0x08004fc9

08004be4 <__swbuf_r>:
 8004be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be6:	460e      	mov	r6, r1
 8004be8:	4614      	mov	r4, r2
 8004bea:	4605      	mov	r5, r0
 8004bec:	b118      	cbz	r0, 8004bf6 <__swbuf_r+0x12>
 8004bee:	6a03      	ldr	r3, [r0, #32]
 8004bf0:	b90b      	cbnz	r3, 8004bf6 <__swbuf_r+0x12>
 8004bf2:	f7ff f8e1 	bl	8003db8 <__sinit>
 8004bf6:	69a3      	ldr	r3, [r4, #24]
 8004bf8:	60a3      	str	r3, [r4, #8]
 8004bfa:	89a3      	ldrh	r3, [r4, #12]
 8004bfc:	071a      	lsls	r2, r3, #28
 8004bfe:	d525      	bpl.n	8004c4c <__swbuf_r+0x68>
 8004c00:	6923      	ldr	r3, [r4, #16]
 8004c02:	b31b      	cbz	r3, 8004c4c <__swbuf_r+0x68>
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	6922      	ldr	r2, [r4, #16]
 8004c08:	1a98      	subs	r0, r3, r2
 8004c0a:	6963      	ldr	r3, [r4, #20]
 8004c0c:	b2f6      	uxtb	r6, r6
 8004c0e:	4283      	cmp	r3, r0
 8004c10:	4637      	mov	r7, r6
 8004c12:	dc04      	bgt.n	8004c1e <__swbuf_r+0x3a>
 8004c14:	4621      	mov	r1, r4
 8004c16:	4628      	mov	r0, r5
 8004c18:	f7ff fe1e 	bl	8004858 <_fflush_r>
 8004c1c:	b9e0      	cbnz	r0, 8004c58 <__swbuf_r+0x74>
 8004c1e:	68a3      	ldr	r3, [r4, #8]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	60a3      	str	r3, [r4, #8]
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	6022      	str	r2, [r4, #0]
 8004c2a:	701e      	strb	r6, [r3, #0]
 8004c2c:	6962      	ldr	r2, [r4, #20]
 8004c2e:	1c43      	adds	r3, r0, #1
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d004      	beq.n	8004c3e <__swbuf_r+0x5a>
 8004c34:	89a3      	ldrh	r3, [r4, #12]
 8004c36:	07db      	lsls	r3, r3, #31
 8004c38:	d506      	bpl.n	8004c48 <__swbuf_r+0x64>
 8004c3a:	2e0a      	cmp	r6, #10
 8004c3c:	d104      	bne.n	8004c48 <__swbuf_r+0x64>
 8004c3e:	4621      	mov	r1, r4
 8004c40:	4628      	mov	r0, r5
 8004c42:	f7ff fe09 	bl	8004858 <_fflush_r>
 8004c46:	b938      	cbnz	r0, 8004c58 <__swbuf_r+0x74>
 8004c48:	4638      	mov	r0, r7
 8004c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	4628      	mov	r0, r5
 8004c50:	f000 f806 	bl	8004c60 <__swsetup_r>
 8004c54:	2800      	cmp	r0, #0
 8004c56:	d0d5      	beq.n	8004c04 <__swbuf_r+0x20>
 8004c58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004c5c:	e7f4      	b.n	8004c48 <__swbuf_r+0x64>
	...

08004c60 <__swsetup_r>:
 8004c60:	b538      	push	{r3, r4, r5, lr}
 8004c62:	4b2a      	ldr	r3, [pc, #168]	; (8004d0c <__swsetup_r+0xac>)
 8004c64:	4605      	mov	r5, r0
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	460c      	mov	r4, r1
 8004c6a:	b118      	cbz	r0, 8004c74 <__swsetup_r+0x14>
 8004c6c:	6a03      	ldr	r3, [r0, #32]
 8004c6e:	b90b      	cbnz	r3, 8004c74 <__swsetup_r+0x14>
 8004c70:	f7ff f8a2 	bl	8003db8 <__sinit>
 8004c74:	89a3      	ldrh	r3, [r4, #12]
 8004c76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c7a:	0718      	lsls	r0, r3, #28
 8004c7c:	d422      	bmi.n	8004cc4 <__swsetup_r+0x64>
 8004c7e:	06d9      	lsls	r1, r3, #27
 8004c80:	d407      	bmi.n	8004c92 <__swsetup_r+0x32>
 8004c82:	2309      	movs	r3, #9
 8004c84:	602b      	str	r3, [r5, #0]
 8004c86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c8a:	81a3      	strh	r3, [r4, #12]
 8004c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c90:	e034      	b.n	8004cfc <__swsetup_r+0x9c>
 8004c92:	0758      	lsls	r0, r3, #29
 8004c94:	d512      	bpl.n	8004cbc <__swsetup_r+0x5c>
 8004c96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c98:	b141      	cbz	r1, 8004cac <__swsetup_r+0x4c>
 8004c9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c9e:	4299      	cmp	r1, r3
 8004ca0:	d002      	beq.n	8004ca8 <__swsetup_r+0x48>
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f7ff fa1e 	bl	80040e4 <_free_r>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	6363      	str	r3, [r4, #52]	; 0x34
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004cb2:	81a3      	strh	r3, [r4, #12]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	6063      	str	r3, [r4, #4]
 8004cb8:	6923      	ldr	r3, [r4, #16]
 8004cba:	6023      	str	r3, [r4, #0]
 8004cbc:	89a3      	ldrh	r3, [r4, #12]
 8004cbe:	f043 0308 	orr.w	r3, r3, #8
 8004cc2:	81a3      	strh	r3, [r4, #12]
 8004cc4:	6923      	ldr	r3, [r4, #16]
 8004cc6:	b94b      	cbnz	r3, 8004cdc <__swsetup_r+0x7c>
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004cce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd2:	d003      	beq.n	8004cdc <__swsetup_r+0x7c>
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f000 f848 	bl	8004d6c <__smakebuf_r>
 8004cdc:	89a0      	ldrh	r0, [r4, #12]
 8004cde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ce2:	f010 0301 	ands.w	r3, r0, #1
 8004ce6:	d00a      	beq.n	8004cfe <__swsetup_r+0x9e>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	60a3      	str	r3, [r4, #8]
 8004cec:	6963      	ldr	r3, [r4, #20]
 8004cee:	425b      	negs	r3, r3
 8004cf0:	61a3      	str	r3, [r4, #24]
 8004cf2:	6923      	ldr	r3, [r4, #16]
 8004cf4:	b943      	cbnz	r3, 8004d08 <__swsetup_r+0xa8>
 8004cf6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004cfa:	d1c4      	bne.n	8004c86 <__swsetup_r+0x26>
 8004cfc:	bd38      	pop	{r3, r4, r5, pc}
 8004cfe:	0781      	lsls	r1, r0, #30
 8004d00:	bf58      	it	pl
 8004d02:	6963      	ldrpl	r3, [r4, #20]
 8004d04:	60a3      	str	r3, [r4, #8]
 8004d06:	e7f4      	b.n	8004cf2 <__swsetup_r+0x92>
 8004d08:	2000      	movs	r0, #0
 8004d0a:	e7f7      	b.n	8004cfc <__swsetup_r+0x9c>
 8004d0c:	2000009c 	.word	0x2000009c

08004d10 <_malloc_usable_size_r>:
 8004d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d14:	1f18      	subs	r0, r3, #4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	bfbc      	itt	lt
 8004d1a:	580b      	ldrlt	r3, [r1, r0]
 8004d1c:	18c0      	addlt	r0, r0, r3
 8004d1e:	4770      	bx	lr

08004d20 <__swhatbuf_r>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	460c      	mov	r4, r1
 8004d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d28:	2900      	cmp	r1, #0
 8004d2a:	b096      	sub	sp, #88	; 0x58
 8004d2c:	4615      	mov	r5, r2
 8004d2e:	461e      	mov	r6, r3
 8004d30:	da0d      	bge.n	8004d4e <__swhatbuf_r+0x2e>
 8004d32:	89a3      	ldrh	r3, [r4, #12]
 8004d34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d38:	f04f 0100 	mov.w	r1, #0
 8004d3c:	bf0c      	ite	eq
 8004d3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004d42:	2340      	movne	r3, #64	; 0x40
 8004d44:	2000      	movs	r0, #0
 8004d46:	6031      	str	r1, [r6, #0]
 8004d48:	602b      	str	r3, [r5, #0]
 8004d4a:	b016      	add	sp, #88	; 0x58
 8004d4c:	bd70      	pop	{r4, r5, r6, pc}
 8004d4e:	466a      	mov	r2, sp
 8004d50:	f000 f848 	bl	8004de4 <_fstat_r>
 8004d54:	2800      	cmp	r0, #0
 8004d56:	dbec      	blt.n	8004d32 <__swhatbuf_r+0x12>
 8004d58:	9901      	ldr	r1, [sp, #4]
 8004d5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004d5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004d62:	4259      	negs	r1, r3
 8004d64:	4159      	adcs	r1, r3
 8004d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d6a:	e7eb      	b.n	8004d44 <__swhatbuf_r+0x24>

08004d6c <__smakebuf_r>:
 8004d6c:	898b      	ldrh	r3, [r1, #12]
 8004d6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d70:	079d      	lsls	r5, r3, #30
 8004d72:	4606      	mov	r6, r0
 8004d74:	460c      	mov	r4, r1
 8004d76:	d507      	bpl.n	8004d88 <__smakebuf_r+0x1c>
 8004d78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	6123      	str	r3, [r4, #16]
 8004d80:	2301      	movs	r3, #1
 8004d82:	6163      	str	r3, [r4, #20]
 8004d84:	b002      	add	sp, #8
 8004d86:	bd70      	pop	{r4, r5, r6, pc}
 8004d88:	ab01      	add	r3, sp, #4
 8004d8a:	466a      	mov	r2, sp
 8004d8c:	f7ff ffc8 	bl	8004d20 <__swhatbuf_r>
 8004d90:	9900      	ldr	r1, [sp, #0]
 8004d92:	4605      	mov	r5, r0
 8004d94:	4630      	mov	r0, r6
 8004d96:	f7fe fe8b 	bl	8003ab0 <_malloc_r>
 8004d9a:	b948      	cbnz	r0, 8004db0 <__smakebuf_r+0x44>
 8004d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004da0:	059a      	lsls	r2, r3, #22
 8004da2:	d4ef      	bmi.n	8004d84 <__smakebuf_r+0x18>
 8004da4:	f023 0303 	bic.w	r3, r3, #3
 8004da8:	f043 0302 	orr.w	r3, r3, #2
 8004dac:	81a3      	strh	r3, [r4, #12]
 8004dae:	e7e3      	b.n	8004d78 <__smakebuf_r+0xc>
 8004db0:	89a3      	ldrh	r3, [r4, #12]
 8004db2:	6020      	str	r0, [r4, #0]
 8004db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db8:	81a3      	strh	r3, [r4, #12]
 8004dba:	9b00      	ldr	r3, [sp, #0]
 8004dbc:	6163      	str	r3, [r4, #20]
 8004dbe:	9b01      	ldr	r3, [sp, #4]
 8004dc0:	6120      	str	r0, [r4, #16]
 8004dc2:	b15b      	cbz	r3, 8004ddc <__smakebuf_r+0x70>
 8004dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dc8:	4630      	mov	r0, r6
 8004dca:	f000 f81d 	bl	8004e08 <_isatty_r>
 8004dce:	b128      	cbz	r0, 8004ddc <__smakebuf_r+0x70>
 8004dd0:	89a3      	ldrh	r3, [r4, #12]
 8004dd2:	f023 0303 	bic.w	r3, r3, #3
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	81a3      	strh	r3, [r4, #12]
 8004ddc:	89a3      	ldrh	r3, [r4, #12]
 8004dde:	431d      	orrs	r5, r3
 8004de0:	81a5      	strh	r5, [r4, #12]
 8004de2:	e7cf      	b.n	8004d84 <__smakebuf_r+0x18>

08004de4 <_fstat_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	4d07      	ldr	r5, [pc, #28]	; (8004e04 <_fstat_r+0x20>)
 8004de8:	2300      	movs	r3, #0
 8004dea:	4604      	mov	r4, r0
 8004dec:	4608      	mov	r0, r1
 8004dee:	4611      	mov	r1, r2
 8004df0:	602b      	str	r3, [r5, #0]
 8004df2:	f7fd fbe0 	bl	80025b6 <_fstat>
 8004df6:	1c43      	adds	r3, r0, #1
 8004df8:	d102      	bne.n	8004e00 <_fstat_r+0x1c>
 8004dfa:	682b      	ldr	r3, [r5, #0]
 8004dfc:	b103      	cbz	r3, 8004e00 <_fstat_r+0x1c>
 8004dfe:	6023      	str	r3, [r4, #0]
 8004e00:	bd38      	pop	{r3, r4, r5, pc}
 8004e02:	bf00      	nop
 8004e04:	20000214 	.word	0x20000214

08004e08 <_isatty_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	4d06      	ldr	r5, [pc, #24]	; (8004e24 <_isatty_r+0x1c>)
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	4604      	mov	r4, r0
 8004e10:	4608      	mov	r0, r1
 8004e12:	602b      	str	r3, [r5, #0]
 8004e14:	f7fd fbdf 	bl	80025d6 <_isatty>
 8004e18:	1c43      	adds	r3, r0, #1
 8004e1a:	d102      	bne.n	8004e22 <_isatty_r+0x1a>
 8004e1c:	682b      	ldr	r3, [r5, #0]
 8004e1e:	b103      	cbz	r3, 8004e22 <_isatty_r+0x1a>
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	bd38      	pop	{r3, r4, r5, pc}
 8004e24:	20000214 	.word	0x20000214

08004e28 <_init>:
 8004e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2a:	bf00      	nop
 8004e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e2e:	bc08      	pop	{r3}
 8004e30:	469e      	mov	lr, r3
 8004e32:	4770      	bx	lr

08004e34 <_fini>:
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e36:	bf00      	nop
 8004e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3a:	bc08      	pop	{r3}
 8004e3c:	469e      	mov	lr, r3
 8004e3e:	4770      	bx	lr
