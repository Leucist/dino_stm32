
dino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08004e28  08004e28  00014e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fd8  08004fd8  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08004fd8  08004fd8  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fd8  08004fd8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fd8  08004fd8  00014fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fdc  08004fdc  00014fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08004fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200000a0  08005080  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08005080  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b632  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d38  00000000  00000000  0002b745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0002d480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000080d  00000000  00000000  0002df70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026df4  00000000  00000000  0002e77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000087d1  00000000  00000000  00055571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec639  00000000  00000000  0005dd42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003998  00000000  00000000  0014a37c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0014dd14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e10 	.word	0x08004e10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08004e10 	.word	0x08004e10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <_Z5Delaym>:
#include "stm32l4xx_hal.h"
#include "main.h"
#include "lcd.h"

void Delay(uint32_t nCount)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000278:	e002      	b.n	8000280 <_Z5Delaym+0x10>
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	3b01      	subs	r3, #1
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d1f9      	bne.n	800027a <_Z5Delaym+0xa>
}
 8000286:	bf00      	nop
 8000288:	bf00      	nop
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr

08000294 <_Z9lcd_delayv>:
void lcd_delay(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	Delay(200);
 8000298:	20c8      	movs	r0, #200	; 0xc8
 800029a:	f7ff ffe9 	bl	8000270 <_Z5Delaym>
}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <_Z7lcd_cmdc>:

void lcd_cmd(char out_char)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 80002ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002b6:	629a      	str	r2, [r3, #40]	; 0x28

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 80002b8:	4b64      	ldr	r3, [pc, #400]	; (800044c <_Z7lcd_cmdc+0x1a8>)
 80002ba:	2280      	movs	r2, #128	; 0x80
 80002bc:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 80002be:	4b64      	ldr	r3, [pc, #400]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80002c0:	2220      	movs	r2, #32
 80002c2:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 80002c4:	4b62      	ldr	r3, [pc, #392]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80002c6:	2210      	movs	r2, #16
 80002c8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 80002ca:	4b61      	ldr	r3, [pc, #388]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80002cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002d0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 80002d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002da:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 80002dc:	f7ff ffda 	bl	8000294 <_Z9lcd_delayv>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80002e0:	4b5a      	ldr	r3, [pc, #360]	; (800044c <_Z7lcd_cmdc+0x1a8>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a59      	ldr	r2, [pc, #356]	; (800044c <_Z7lcd_cmdc+0x1a8>)
 80002e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ea:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	091b      	lsrs	r3, r3, #4
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	f003 0301 	and.w	r3, r3, #1
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d003      	beq.n	8000302 <_Z7lcd_cmdc+0x5e>
 80002fa:	4b55      	ldr	r3, [pc, #340]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80002fc:	2220      	movs	r2, #32
 80002fe:	619a      	str	r2, [r3, #24]
 8000300:	e003      	b.n	800030a <_Z7lcd_cmdc+0x66>
 8000302:	4b53      	ldr	r3, [pc, #332]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 8000304:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000308:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	095b      	lsrs	r3, r3, #5
 800030e:	b2db      	uxtb	r3, r3
 8000310:	f003 0301 	and.w	r3, r3, #1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d003      	beq.n	8000320 <_Z7lcd_cmdc+0x7c>
 8000318:	4b4d      	ldr	r3, [pc, #308]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 800031a:	2210      	movs	r2, #16
 800031c:	619a      	str	r2, [r3, #24]
 800031e:	e003      	b.n	8000328 <_Z7lcd_cmdc+0x84>
 8000320:	4b4b      	ldr	r3, [pc, #300]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 8000322:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000326:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	099b      	lsrs	r3, r3, #6
 800032c:	b2db      	uxtb	r3, r3
 800032e:	f003 0301 	and.w	r3, r3, #1
 8000332:	2b00      	cmp	r3, #0
 8000334:	d004      	beq.n	8000340 <_Z7lcd_cmdc+0x9c>
 8000336:	4b46      	ldr	r3, [pc, #280]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 8000338:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800033c:	619a      	str	r2, [r3, #24]
 800033e:	e003      	b.n	8000348 <_Z7lcd_cmdc+0xa4>
 8000340:	4b43      	ldr	r3, [pc, #268]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 8000342:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000346:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034c:	2b00      	cmp	r3, #0
 800034e:	da05      	bge.n	800035c <_Z7lcd_cmdc+0xb8>
 8000350:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000358:	619a      	str	r2, [r3, #24]
 800035a:	e004      	b.n	8000366 <_Z7lcd_cmdc+0xc2>
 800035c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000360:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000364:	619a      	str	r2, [r3, #24]

	lcd_delay();
 8000366:	f7ff ff95 	bl	8000294 <_Z9lcd_delayv>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800036a:	4b38      	ldr	r3, [pc, #224]	; (800044c <_Z7lcd_cmdc+0x1a8>)
 800036c:	2280      	movs	r2, #128	; 0x80
 800036e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000370:	4b37      	ldr	r3, [pc, #220]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 8000372:	2220      	movs	r2, #32
 8000374:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000376:	4b36      	ldr	r3, [pc, #216]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 8000378:	2210      	movs	r2, #16
 800037a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 800037c:	4b34      	ldr	r3, [pc, #208]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 800037e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000382:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000384:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800038c:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 800038e:	f7ff ff81 	bl	8000294 <_Z9lcd_delayv>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000392:	4b2e      	ldr	r3, [pc, #184]	; (800044c <_Z7lcd_cmdc+0x1a8>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a2d      	ldr	r2, [pc, #180]	; (800044c <_Z7lcd_cmdc+0x1a8>)
 8000398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800039c:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	f003 0301 	and.w	r3, r3, #1
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d003      	beq.n	80003b0 <_Z7lcd_cmdc+0x10c>
 80003a8:	4b29      	ldr	r3, [pc, #164]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80003aa:	2220      	movs	r2, #32
 80003ac:	619a      	str	r2, [r3, #24]
 80003ae:	e003      	b.n	80003b8 <_Z7lcd_cmdc+0x114>
 80003b0:	4b27      	ldr	r3, [pc, #156]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80003b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003b6:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	085b      	lsrs	r3, r3, #1
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d003      	beq.n	80003ce <_Z7lcd_cmdc+0x12a>
 80003c6:	4b22      	ldr	r3, [pc, #136]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80003c8:	2210      	movs	r2, #16
 80003ca:	619a      	str	r2, [r3, #24]
 80003cc:	e003      	b.n	80003d6 <_Z7lcd_cmdc+0x132>
 80003ce:	4b20      	ldr	r3, [pc, #128]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80003d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80003d4:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	089b      	lsrs	r3, r3, #2
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d004      	beq.n	80003ee <_Z7lcd_cmdc+0x14a>
 80003e4:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80003e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003ea:	619a      	str	r2, [r3, #24]
 80003ec:	e003      	b.n	80003f6 <_Z7lcd_cmdc+0x152>
 80003ee:	4b18      	ldr	r3, [pc, #96]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 80003f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80003f4:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	08db      	lsrs	r3, r3, #3
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	f003 0301 	and.w	r3, r3, #1
 8000400:	2b00      	cmp	r3, #0
 8000402:	d005      	beq.n	8000410 <_Z7lcd_cmdc+0x16c>
 8000404:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800040c:	619a      	str	r2, [r3, #24]
 800040e:	e004      	b.n	800041a <_Z7lcd_cmdc+0x176>
 8000410:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000414:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000418:	619a      	str	r2, [r3, #24]

	lcd_delay();
 800041a:	f7ff ff3b 	bl	8000294 <_Z9lcd_delayv>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <_Z7lcd_cmdc+0x1a8>)
 8000420:	2280      	movs	r2, #128	; 0x80
 8000422:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 8000426:	2220      	movs	r2, #32
 8000428:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 800042c:	2210      	movs	r2, #16
 800042e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000430:	4b07      	ldr	r3, [pc, #28]	; (8000450 <_Z7lcd_cmdc+0x1ac>)
 8000432:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000436:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000438:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800043c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000440:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	48000800 	.word	0x48000800
 8000450:	48000400 	.word	0x48000400

08000454 <_Z11lcd_char_cpc>:

void lcd_char_cp(char out_char)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 800045e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000468:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800046c:	6153      	str	r3, [r2, #20]

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 800046e:	4b64      	ldr	r3, [pc, #400]	; (8000600 <_Z11lcd_char_cpc+0x1ac>)
 8000470:	2280      	movs	r2, #128	; 0x80
 8000472:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000474:	4b63      	ldr	r3, [pc, #396]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 8000476:	2220      	movs	r2, #32
 8000478:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 800047a:	4b62      	ldr	r3, [pc, #392]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 800047c:	2210      	movs	r2, #16
 800047e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000480:	4b60      	ldr	r3, [pc, #384]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 8000482:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000486:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000488:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800048c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000490:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000492:	f7ff feff 	bl	8000294 <_Z9lcd_delayv>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000496:	4b5a      	ldr	r3, [pc, #360]	; (8000600 <_Z11lcd_char_cpc+0x1ac>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a59      	ldr	r2, [pc, #356]	; (8000600 <_Z11lcd_char_cpc+0x1ac>)
 800049c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004a0:	6153      	str	r3, [r2, #20]

	if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	091b      	lsrs	r3, r3, #4
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	f003 0301 	and.w	r3, r3, #1
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d003      	beq.n	80004b8 <_Z11lcd_char_cpc+0x64>
 80004b0:	4b54      	ldr	r3, [pc, #336]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80004b2:	2220      	movs	r2, #32
 80004b4:	619a      	str	r2, [r3, #24]
 80004b6:	e003      	b.n	80004c0 <_Z11lcd_char_cpc+0x6c>
 80004b8:	4b52      	ldr	r3, [pc, #328]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80004ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80004be:	619a      	str	r2, [r3, #24]
	if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	095b      	lsrs	r3, r3, #5
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d003      	beq.n	80004d6 <_Z11lcd_char_cpc+0x82>
 80004ce:	4b4d      	ldr	r3, [pc, #308]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80004d0:	2210      	movs	r2, #16
 80004d2:	619a      	str	r2, [r3, #24]
 80004d4:	e003      	b.n	80004de <_Z11lcd_char_cpc+0x8a>
 80004d6:	4b4b      	ldr	r3, [pc, #300]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80004d8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80004dc:	619a      	str	r2, [r3, #24]
	if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	099b      	lsrs	r3, r3, #6
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d004      	beq.n	80004f6 <_Z11lcd_char_cpc+0xa2>
 80004ec:	4b45      	ldr	r3, [pc, #276]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80004ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004f2:	619a      	str	r2, [r3, #24]
 80004f4:	e003      	b.n	80004fe <_Z11lcd_char_cpc+0xaa>
 80004f6:	4b43      	ldr	r3, [pc, #268]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80004f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80004fc:	619a      	str	r2, [r3, #24]
	if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80004fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000502:	2b00      	cmp	r3, #0
 8000504:	da05      	bge.n	8000512 <_Z11lcd_char_cpc+0xbe>
 8000506:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800050a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800050e:	619a      	str	r2, [r3, #24]
 8000510:	e004      	b.n	800051c <_Z11lcd_char_cpc+0xc8>
 8000512:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000516:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800051a:	619a      	str	r2, [r3, #24]

	lcd_delay();
 800051c:	f7ff feba 	bl	8000294 <_Z9lcd_delayv>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000520:	4b37      	ldr	r3, [pc, #220]	; (8000600 <_Z11lcd_char_cpc+0x1ac>)
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000526:	4b37      	ldr	r3, [pc, #220]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 8000528:	2220      	movs	r2, #32
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 800052c:	4b35      	ldr	r3, [pc, #212]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 800052e:	2210      	movs	r2, #16
 8000530:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000532:	4b34      	ldr	r3, [pc, #208]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 8000534:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000538:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 800053a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800053e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000542:	629a      	str	r2, [r3, #40]	; 0x28

	lcd_delay();
 8000544:	f7ff fea6 	bl	8000294 <_Z9lcd_delayv>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000548:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <_Z11lcd_char_cpc+0x1ac>)
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	4a2c      	ldr	r2, [pc, #176]	; (8000600 <_Z11lcd_char_cpc+0x1ac>)
 800054e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000552:	6153      	str	r3, [r2, #20]

	if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	f003 0301 	and.w	r3, r3, #1
 800055a:	2b00      	cmp	r3, #0
 800055c:	d003      	beq.n	8000566 <_Z11lcd_char_cpc+0x112>
 800055e:	4b29      	ldr	r3, [pc, #164]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 8000560:	2220      	movs	r2, #32
 8000562:	619a      	str	r2, [r3, #24]
 8000564:	e003      	b.n	800056e <_Z11lcd_char_cpc+0x11a>
 8000566:	4b27      	ldr	r3, [pc, #156]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 8000568:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800056c:	619a      	str	r2, [r3, #24]
	if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	085b      	lsrs	r3, r3, #1
 8000572:	b2db      	uxtb	r3, r3
 8000574:	f003 0301 	and.w	r3, r3, #1
 8000578:	2b00      	cmp	r3, #0
 800057a:	d003      	beq.n	8000584 <_Z11lcd_char_cpc+0x130>
 800057c:	4b21      	ldr	r3, [pc, #132]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 800057e:	2210      	movs	r2, #16
 8000580:	619a      	str	r2, [r3, #24]
 8000582:	e003      	b.n	800058c <_Z11lcd_char_cpc+0x138>
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 8000586:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800058a:	619a      	str	r2, [r3, #24]
	if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	089b      	lsrs	r3, r3, #2
 8000590:	b2db      	uxtb	r3, r3
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d004      	beq.n	80005a4 <_Z11lcd_char_cpc+0x150>
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 800059c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005a0:	619a      	str	r2, [r3, #24]
 80005a2:	e003      	b.n	80005ac <_Z11lcd_char_cpc+0x158>
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80005a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80005aa:	619a      	str	r2, [r3, #24]
	if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	08db      	lsrs	r3, r3, #3
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d005      	beq.n	80005c6 <_Z11lcd_char_cpc+0x172>
 80005ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c2:	619a      	str	r2, [r3, #24]
 80005c4:	e004      	b.n	80005d0 <_Z11lcd_char_cpc+0x17c>
 80005c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005ce:	619a      	str	r2, [r3, #24]

	lcd_delay();
 80005d0:	f7ff fe60 	bl	8000294 <_Z9lcd_delayv>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <_Z11lcd_char_cpc+0x1ac>)
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80005dc:	2220      	movs	r2, #32
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80005e2:	2210      	movs	r2, #16
 80005e4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <_Z11lcd_char_cpc+0x1b0>)
 80005e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80005ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	48000800 	.word	0x48000800
 8000604:	48000400 	.word	0x48000400

08000608 <_Z10lcd_out_cpPc>:

void lcd_out_cp(char *out_char)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	while(*out_char)
 8000610:	e008      	b.n	8000624 <_Z10lcd_out_cpPc+0x1c>
	{
		lcd_char_cp(*out_char++);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	1c5a      	adds	r2, r3, #1
 8000616:	607a      	str	r2, [r7, #4]
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff1a 	bl	8000454 <_Z11lcd_char_cpc>
        lcd_delay();
 8000620:	f7ff fe38 	bl	8000294 <_Z9lcd_delayv>
	while(*out_char)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1f2      	bne.n	8000612 <_Z10lcd_out_cpPc+0xa>
	}

}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <_Z8lcd_initccc>:


void lcd_init(char bits, char font, char lines)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	4603      	mov	r3, r0
 800063e:	71fb      	strb	r3, [r7, #7]
 8000640:	460b      	mov	r3, r1
 8000642:	71bb      	strb	r3, [r7, #6]
 8000644:	4613      	mov	r3, r2
 8000646:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8000648:	20fa      	movs	r0, #250	; 0xfa
 800064a:	f002 f8af 	bl	80027ac <HAL_Delay>
		lcd_cmd(_RETURN_HOME);
 800064e:	2002      	movs	r0, #2
 8000650:	f7ff fe28 	bl	80002a4 <_Z7lcd_cmdc>
    HAL_Delay(50);
 8000654:	2032      	movs	r0, #50	; 0x32
 8000656:	f002 f8a9 	bl	80027ac <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 800065a:	79fa      	ldrb	r2, [r7, #7]
 800065c:	79bb      	ldrb	r3, [r7, #6]
 800065e:	4313      	orrs	r3, r2
 8000660:	b2da      	uxtb	r2, r3
 8000662:	797b      	ldrb	r3, [r7, #5]
 8000664:	4313      	orrs	r3, r2
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f043 0320 	orr.w	r3, r3, #32
 800066c:	b2db      	uxtb	r3, r3
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fe18 	bl	80002a4 <_Z7lcd_cmdc>
    HAL_Delay(50);
 8000674:	2032      	movs	r0, #50	; 0x32
 8000676:	f002 f899 	bl	80027ac <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 800067a:	2006      	movs	r0, #6
 800067c:	f7ff fe12 	bl	80002a4 <_Z7lcd_cmdc>
    HAL_Delay(50);
 8000680:	2032      	movs	r0, #50	; 0x32
 8000682:	f002 f893 	bl	80027ac <HAL_Delay>
    lcd_cmd(0x0E);
 8000686:	200e      	movs	r0, #14
 8000688:	f7ff fe0c 	bl	80002a4 <_Z7lcd_cmdc>
    HAL_Delay(50);
 800068c:	2032      	movs	r0, #50	; 0x32
 800068e:	f002 f88d 	bl	80027ac <HAL_Delay>
    lcd_cmd(0x0C);
 8000692:	200c      	movs	r0, #12
 8000694:	f7ff fe06 	bl	80002a4 <_Z7lcd_cmdc>
    HAL_Delay(50);
 8000698:	2032      	movs	r0, #50	; 0x32
 800069a:	f002 f887 	bl	80027ac <HAL_Delay>
    lcd_cmd(0x01);
 800069e:	2001      	movs	r0, #1
 80006a0:	f7ff fe00 	bl	80002a4 <_Z7lcd_cmdc>
    HAL_Delay(100);
 80006a4:	2064      	movs	r0, #100	; 0x64
 80006a6:	f002 f881 	bl	80027ac <HAL_Delay>
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <_Z10lcd_gotoxyhh>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4603      	mov	r3, r0
 80006ba:	460a      	mov	r2, r1
 80006bc:	71fb      	strb	r3, [r7, #7]
 80006be:	4613      	mov	r3, r2
 80006c0:	71bb      	strb	r3, [r7, #6]
	if(row == 1)
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d106      	bne.n	80006d6 <_Z10lcd_gotoxyhh+0x24>
	{
		lcd_cmd(0x80 + (column - 1));
 80006c8:	79bb      	ldrb	r3, [r7, #6]
 80006ca:	337f      	adds	r3, #127	; 0x7f
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fde8 	bl	80002a4 <_Z7lcd_cmdc>
 80006d4:	e008      	b.n	80006e8 <_Z10lcd_gotoxyhh+0x36>
	}
	else if(row == 2)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d105      	bne.n	80006e8 <_Z10lcd_gotoxyhh+0x36>
	{
		lcd_cmd(0xC0 + (column - 1));
 80006dc:	79bb      	ldrb	r3, [r7, #6]
 80006de:	3b41      	subs	r3, #65	; 0x41
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff fdde 	bl	80002a4 <_Z7lcd_cmdc>
	}
    HAL_Delay(5);
 80006e8:	2005      	movs	r0, #5
 80006ea:	f002 f85f 	bl	80027ac <HAL_Delay>

}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_Z9lcd_printhhPc>:
	lcd_gotoxy(row, column);
	lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	4603      	mov	r3, r0
 80006fe:	603a      	str	r2, [r7, #0]
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	460b      	mov	r3, r1
 8000704:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000706:	79ba      	ldrb	r2, [r7, #6]
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4611      	mov	r1, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ffd0 	bl	80006b2 <_Z10lcd_gotoxyhh>
	lcd_out_cp(out_char);
 8000712:	6838      	ldr	r0, [r7, #0]
 8000714:	f7ff ff78 	bl	8000608 <_Z10lcd_out_cpPc>
    HAL_Delay(5);
 8000718:	2005      	movs	r0, #5
 800071a:	f002 f847 	bl	80027ac <HAL_Delay>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <_Z9lcd_clearv>:
void lcd_clear(void) {
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0

	lcd_cmd(_CLEAR);
 800072a:	2001      	movs	r0, #1
 800072c:	f7ff fdba 	bl	80002a4 <_Z7lcd_cmdc>
    HAL_Delay(5);
 8000730:	2005      	movs	r0, #5
 8000732:	f002 f83b 	bl	80027ac <HAL_Delay>

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <_ZN10GameObjectC1EPchh>:
    char* texture_;
    uint8_t xPos_;
    uint8_t yPos_;

public:
	GameObject(char* texture, uint8_t xPos, uint8_t yPos)
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	4611      	mov	r1, r2
 8000748:	461a      	mov	r2, r3
 800074a:	460b      	mov	r3, r1
 800074c:	71fb      	strb	r3, [r7, #7]
 800074e:	4613      	mov	r3, r2
 8000750:	71bb      	strb	r3, [r7, #6]
    {
 8000752:	4a09      	ldr	r2, [pc, #36]	; (8000778 <_ZN10GameObjectC1EPchh+0x3c>)
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	601a      	str	r2, [r3, #0]
    	texture_ = texture;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	605a      	str	r2, [r3, #4]
    	xPos_ = xPos;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	79fa      	ldrb	r2, [r7, #7]
 8000762:	721a      	strb	r2, [r3, #8]
		yPos_ = yPos;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	79ba      	ldrb	r2, [r7, #6]
 8000768:	725a      	strb	r2, [r3, #9]
    }
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4618      	mov	r0, r3
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	08004eac 	.word	0x08004eac

0800077c <_ZN10GameObject4getXEv>:

	// Defines virtual default destructor
	virtual ~GameObject() = default;

	uint8_t getX(){
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    	return xPos_;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7a1b      	ldrb	r3, [r3, #8]
	}
 8000788:	4618      	mov	r0, r3
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <_ZN10GameObject4getYEv>:

	uint8_t getY(){
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
        return yPos_;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7a5b      	ldrb	r3, [r3, #9]
	}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <_ZN10GameObject10getTextureEv>:

    char* getTexture(){
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
        return texture_;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	685b      	ldr	r3, [r3, #4]
	}
 80007b8:	4618      	mov	r0, r3
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <_ZN10GameObject4drawEv>:

    virtual void draw(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
    	lcd_print(yPos_, xPos_, texture_);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	7a58      	ldrb	r0, [r3, #9]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	7a19      	ldrb	r1, [r3, #8]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	461a      	mov	r2, r3
 80007da:	f7ff ff8c 	bl	80006f6 <_Z9lcd_printhhPc>
	}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <_ZN10GameObject4moveEhh>:

protected:
    void move(uint8_t diffX, uint8_t diffY) {
 80007e6:	b480      	push	{r7}
 80007e8:	b083      	sub	sp, #12
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	460b      	mov	r3, r1
 80007f0:	70fb      	strb	r3, [r7, #3]
 80007f2:	4613      	mov	r3, r2
 80007f4:	70bb      	strb	r3, [r7, #2]
		xPos_ += diffX;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	7a1a      	ldrb	r2, [r3, #8]
 80007fa:	78fb      	ldrb	r3, [r7, #3]
 80007fc:	4413      	add	r3, r2
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	721a      	strb	r2, [r3, #8]
		yPos_ += diffY;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	7a5a      	ldrb	r2, [r3, #9]
 8000808:	78bb      	ldrb	r3, [r7, #2]
 800080a:	4413      	add	r3, r2
 800080c:	b2da      	uxtb	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	725a      	strb	r2, [r3, #9]
	}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <_ZN10GameObject10setTextureEPc>:

    void setTexture(char* new_texture) {
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	6039      	str	r1, [r7, #0]
    	std::strcpy(texture_, new_texture);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	6839      	ldr	r1, [r7, #0]
 800082e:	4618      	mov	r0, r3
 8000830:	f003 fc17 	bl	8004062 <strcpy>
    }
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <_ZN10GameObjectD1Ev>:
	virtual ~GameObject() = default;
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	4a04      	ldr	r2, [pc, #16]	; (8000858 <_ZN10GameObjectD1Ev+0x1c>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	08004eac 	.word	0x08004eac

0800085c <_ZN10GameObjectD0Ev>:
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ffe9 	bl	800083c <_ZN10GameObjectD1Ev>
 800086a:	210c      	movs	r1, #12
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f003 f8ad 	bl	80039cc <_ZdlPvj>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <_ZN8ObstacleC1EPc>:


class Obstacle : public GameObject {
public:
    // Constructor - uses the GameObject constructor to set initial position
	Obstacle(char* texture) : GameObject(texture, 15, 2) {}
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	2302      	movs	r3, #2
 800088a:	220f      	movs	r2, #15
 800088c:	6839      	ldr	r1, [r7, #0]
 800088e:	f7ff ff55 	bl	800073c <_ZN10GameObjectC1EPchh>
 8000892:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <_ZN8ObstacleC1EPc+0x28>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	08004e98 	.word	0x08004e98

080008a8 <_ZN8Obstacle4moveEv>:

    // Call the move function from GameObject
    void move(){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
        GameObject::move(-1, 0);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	21ff      	movs	r1, #255	; 0xff
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ff95 	bl	80007e6 <_ZN10GameObject4moveEhh>
    }
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <_ZN8Obstacle8collidesE10GameObject>:

    bool collides(GameObject obj)
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
    {
    	if ((this->getX() == obj.getX()) && (this->getY() == obj.getY())) {		// if collides
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff53 	bl	800077c <_ZN10GameObject4getXEv>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461c      	mov	r4, r3
 80008da:	6838      	ldr	r0, [r7, #0]
 80008dc:	f7ff ff4e 	bl	800077c <_ZN10GameObject4getXEv>
 80008e0:	4603      	mov	r3, r0
 80008e2:	429c      	cmp	r4, r3
 80008e4:	d10d      	bne.n	8000902 <_ZN8Obstacle8collidesE10GameObject+0x3e>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff53 	bl	8000794 <_ZN10GameObject4getYEv>
 80008ee:	4603      	mov	r3, r0
 80008f0:	461c      	mov	r4, r3
 80008f2:	6838      	ldr	r0, [r7, #0]
 80008f4:	f7ff ff4e 	bl	8000794 <_ZN10GameObject4getYEv>
 80008f8:	4603      	mov	r3, r0
 80008fa:	429c      	cmp	r4, r3
 80008fc:	d101      	bne.n	8000902 <_ZN8Obstacle8collidesE10GameObject+0x3e>
 80008fe:	2301      	movs	r3, #1
 8000900:	e000      	b.n	8000904 <_ZN8Obstacle8collidesE10GameObject+0x40>
 8000902:	2300      	movs	r3, #0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <_ZN8Obstacle8collidesE10GameObject+0x48>
    		return true;
 8000908:	2301      	movs	r3, #1
 800090a:	e000      	b.n	800090e <_ZN8Obstacle8collidesE10GameObject+0x4a>
    	}
    	else { 																	// if not
    		return false;
 800090c:	2300      	movs	r3, #0
    	}
    }
 800090e:	4618      	mov	r0, r3
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	bd90      	pop	{r4, r7, pc}
	...

08000918 <_ZN5ScoreC1Ehh>:

public:
	static const uint8_t SCORE_LIMIT = 99;
	uint8_t MAX_SCORE;

	Score(uint8_t xPos, uint8_t yPos) : GameObject("00", xPos, yPos) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
 8000924:	4613      	mov	r3, r2
 8000926:	70bb      	strb	r3, [r7, #2]
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	78bb      	ldrb	r3, [r7, #2]
 800092c:	78fa      	ldrb	r2, [r7, #3]
 800092e:	4908      	ldr	r1, [pc, #32]	; (8000950 <_ZN5ScoreC1Ehh+0x38>)
 8000930:	f7ff ff04 	bl	800073c <_ZN10GameObjectC1EPchh>
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <_ZN5ScoreC1Ehh+0x3c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	601a      	str	r2, [r3, #0]
		score = 0;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2200      	movs	r2, #0
 800093e:	729a      	strb	r2, [r3, #10]
		MAX_SCORE = 0;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	72da      	strb	r2, [r3, #11]
	}
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	08004e28 	.word	0x08004e28
 8000954:	08004e84 	.word	0x08004e84

08000958 <_ZN5Score3getEv>:

	int get() {
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
		return score;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	7a9b      	ldrb	r3, [r3, #10]
	}
 8000964:	4618      	mov	r0, r3
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <_ZN5Score2upEv>:

	void up() {
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
		char scoreFromInt[3];
		score++;										// rises current score
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7a9b      	ldrb	r3, [r3, #10]
 800097c:	3301      	adds	r3, #1
 800097e:	b2da      	uxtb	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	729a      	strb	r2, [r3, #10]
		std::sprintf(scoreFromInt, "%d", score);		// converts score int -> char*
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	7a9b      	ldrb	r3, [r3, #10]
 8000988:	461a      	mov	r2, r3
 800098a:	f107 030c 	add.w	r3, r7, #12
 800098e:	4907      	ldr	r1, [pc, #28]	; (80009ac <_ZN5Score2upEv+0x3c>)
 8000990:	4618      	mov	r0, r3
 8000992:	f003 fa33 	bl	8003dfc <siprintf>
		this->setTexture(scoreFromInt);					// updates score texture
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f107 020c 	add.w	r2, r7, #12
 800099c:	4611      	mov	r1, r2
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff3d 	bl	800081e <_ZN10GameObject10setTextureEPc>
	}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	08004e2c 	.word	0x08004e2c

080009b0 <_ZN5Score17calculateMaxScoreEv>:

	void calculateMaxScore() {
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
		this->MAX_SCORE = this->MAX_SCORE > this->score ? this->MAX_SCORE : this->score;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	7ada      	ldrb	r2, [r3, #11]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	7a9b      	ldrb	r3, [r3, #10]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d902      	bls.n	80009ca <_ZN5Score17calculateMaxScoreEv+0x1a>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	7adb      	ldrb	r3, [r3, #11]
 80009c8:	e001      	b.n	80009ce <_ZN5Score17calculateMaxScoreEv+0x1e>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	7a9b      	ldrb	r3, [r3, #10]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	72d3      	strb	r3, [r2, #11]
	}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <_ZN5Score5resetEv>:

	void reset() {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
		score = 0;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	729a      	strb	r2, [r3, #10]
//		char zeroScore[] = "00";
		this->setTexture("00");
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4903      	ldr	r1, [pc, #12]	; (8000a00 <_ZN5Score5resetEv+0x20>)
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ff13 	bl	800081e <_ZN10GameObject10setTextureEPc>
	}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	08004e28 	.word	0x08004e28

08000a04 <_ZN4DinoC1EPA8_chh>:
    char textures_[2][8];

public:
    static const uint8_t FLY_TIME = 3;

    Dino(char textures[2][8], uint8_t xPos, uint8_t yPos) : GameObject(textures[1], xPos, yPos) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	4611      	mov	r1, r2
 8000a10:	461a      	mov	r2, r3
 8000a12:	460b      	mov	r3, r1
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	4613      	mov	r3, r2
 8000a18:	71bb      	strb	r3, [r7, #6]
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	f103 0108 	add.w	r1, r3, #8
 8000a22:	79bb      	ldrb	r3, [r7, #6]
 8000a24:	79fa      	ldrb	r2, [r7, #7]
 8000a26:	f7ff fe89 	bl	800073c <_ZN10GameObjectC1EPchh>
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <_ZN4DinoC1EPA8_chh+0x70>)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	601a      	str	r2, [r3, #0]
//    	textures_ = textures;
    	for (int i = 0; i < 2; i++) {
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	e010      	b.n	8000a58 <_ZN4DinoC1EPA8_chh+0x54>
			std::memcpy(textures_[i], textures[i], sizeof(textures[i]));
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	68fa      	ldr	r2, [r7, #12]
 8000a3e:	4413      	add	r3, r2
 8000a40:	1d18      	adds	r0, r3, #4
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	4413      	add	r3, r2
 8000a4a:	2208      	movs	r2, #8
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f003 fb10 	bl	8004072 <memcpy>
    	for (int i = 0; i < 2; i++) {
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	3301      	adds	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	ddeb      	ble.n	8000a36 <_ZN4DinoC1EPA8_chh+0x32>
		}
    	delay = 0;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2200      	movs	r2, #0
 8000a62:	729a      	strb	r2, [r3, #10]
    	frame = 0;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2200      	movs	r2, #0
 8000a68:	72da      	strb	r2, [r3, #11]
      }
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	08004e70 	.word	0x08004e70

08000a78 <_ZN4Dino4jumpEv>:

    void jump(){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
            GameObject::move(0, 1);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2201      	movs	r2, #1
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fead 	bl	80007e6 <_ZN10GameObject4moveEhh>
            delay = FLY_TIME;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2203      	movs	r2, #3
 8000a90:	729a      	strb	r2, [r3, #10]
        }
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_ZN4Dino4fallEv>:

    void fall(){
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
    	if(delay > 0){
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7a9b      	ldrb	r3, [r3, #10]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d006      	beq.n	8000ab8 <_ZN4Dino4fallEv+0x1e>
    		delay--;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	7a9b      	ldrb	r3, [r3, #10]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	729a      	strb	r2, [r3, #10]
    	}
    	else {
    		delay = 0;
    		GameObject::move(0, -1);
    	}
    }
 8000ab6:	e008      	b.n	8000aca <_ZN4Dino4fallEv+0x30>
    		delay = 0;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	729a      	strb	r2, [r3, #10]
    		GameObject::move(0, -1);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	22ff      	movs	r2, #255	; 0xff
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fe8e 	bl	80007e6 <_ZN10GameObject4moveEhh>
    }
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_ZN4Dino4drawEv>:

    void draw() {
 8000ad2:	b590      	push	{r4, r7, lr}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
    	lcd_print(this->getX(), this->getY(), textures_[frame++]);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fe4d 	bl	800077c <_ZN10GameObject4getXEv>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	461c      	mov	r4, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fe53 	bl	8000794 <_ZN10GameObject4getYEv>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4618      	mov	r0, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	7adb      	ldrb	r3, [r3, #11]
 8000af6:	1c5a      	adds	r2, r3, #1
 8000af8:	b2d1      	uxtb	r1, r2
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	72d1      	strb	r1, [r2, #11]
 8000afe:	3301      	adds	r3, #1
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	3304      	adds	r3, #4
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4601      	mov	r1, r0
 8000b0c:	4620      	mov	r0, r4
 8000b0e:	f7ff fdf2 	bl	80006f6 <_Z9lcd_printhhPc>
    	if (frame > 1) frame = 0;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	7adb      	ldrb	r3, [r3, #11]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d902      	bls.n	8000b20 <_ZN4Dino4drawEv+0x4e>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	72da      	strb	r2, [r3, #11]
    }
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd90      	pop	{r4, r7, pc}

08000b28 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <_Z14loadCustomCharhPKc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void loadCustomChar(uint8_t charNum, const char *pattern) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
	lcd_cmd(0x40 | (charNum << 3)); // Set CGRAM address
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	b25b      	sxtb	r3, r3
 8000b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b56:	b25b      	sxtb	r3, r3
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fba2 	bl	80002a4 <_Z7lcd_cmdc>
	for (int i = 0; i < 8; ++i)
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	e009      	b.n	8000b7a <_Z14loadCustomCharhPKc+0x3a>
	{
		lcd_char_cp(pattern[i]);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fc70 	bl	8000454 <_Z11lcd_char_cpc>
	for (int i = 0; i < 8; ++i)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	3301      	adds	r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2b07      	cmp	r3, #7
 8000b7e:	ddf2      	ble.n	8000b66 <_Z14loadCustomCharhPKc+0x26>
	}
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <_Z17load_custom_charsv>:

void load_custom_chars(){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
     loadCustomChar(0, dinosaur_1);
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <_Z17load_custom_charsv+0x38>)
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff ffd4 	bl	8000b40 <_Z14loadCustomCharhPKc>
     loadCustomChar(1, dinosaur_2);
 8000b98:	490b      	ldr	r1, [pc, #44]	; (8000bc8 <_Z17load_custom_charsv+0x3c>)
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff ffd0 	bl	8000b40 <_Z14loadCustomCharhPKc>
     loadCustomChar(2, cactus_1);
 8000ba0:	490a      	ldr	r1, [pc, #40]	; (8000bcc <_Z17load_custom_charsv+0x40>)
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	f7ff ffcc 	bl	8000b40 <_Z14loadCustomCharhPKc>
     loadCustomChar(3, cactus_2);
 8000ba8:	4909      	ldr	r1, [pc, #36]	; (8000bd0 <_Z17load_custom_charsv+0x44>)
 8000baa:	2003      	movs	r0, #3
 8000bac:	f7ff ffc8 	bl	8000b40 <_Z14loadCustomCharhPKc>
     loadCustomChar(4, filledSquare);
 8000bb0:	4908      	ldr	r1, [pc, #32]	; (8000bd4 <_Z17load_custom_charsv+0x48>)
 8000bb2:	2004      	movs	r0, #4
 8000bb4:	f7ff ffc4 	bl	8000b40 <_Z14loadCustomCharhPKc>
     loadCustomChar(5, notFilledSquare);
 8000bb8:	4907      	ldr	r1, [pc, #28]	; (8000bd8 <_Z17load_custom_charsv+0x4c>)
 8000bba:	2005      	movs	r0, #5
 8000bbc:	f7ff ffc0 	bl	8000b40 <_Z14loadCustomCharhPKc>
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	20000020 	.word	0x20000020
 8000bd0:	20000028 	.word	0x20000028
 8000bd4:	20000030 	.word	0x20000030
 8000bd8:	200000bc 	.word	0x200000bc

08000bdc <_Z14lcd_transitionv>:

void lcd_transition(){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
  int mid = 7;
 8000be2:	2307      	movs	r3, #7
 8000be4:	607b      	str	r3, [r7, #4]

  for (int i=0; i <= mid; i++) {
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	e032      	b.n	8000c52 <_Z14lcd_transitionv+0x76>
    lcd_print(1, mid+i, filledSquare);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4413      	add	r3, r2
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	4a38      	ldr	r2, [pc, #224]	; (8000cdc <_Z14lcd_transitionv+0x100>)
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f7ff fd7a 	bl	80006f6 <_Z9lcd_printhhPc>
    lcd_print(1, mid-i+1, filledSquare);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	3301      	adds	r3, #1
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4a32      	ldr	r2, [pc, #200]	; (8000cdc <_Z14lcd_transitionv+0x100>)
 8000c14:	4619      	mov	r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	f7ff fd6d 	bl	80006f6 <_Z9lcd_printhhPc>
    lcd_print(2, mid+i, filledSquare);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	4413      	add	r3, r2
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	4a2c      	ldr	r2, [pc, #176]	; (8000cdc <_Z14lcd_transitionv+0x100>)
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	f7ff fd62 	bl	80006f6 <_Z9lcd_printhhPc>
    lcd_print(2, mid-i+1, filledSquare);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	3301      	adds	r3, #1
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	4a26      	ldr	r2, [pc, #152]	; (8000cdc <_Z14lcd_transitionv+0x100>)
 8000c44:	4619      	mov	r1, r3
 8000c46:	2002      	movs	r0, #2
 8000c48:	f7ff fd55 	bl	80006f6 <_Z9lcd_printhhPc>
  for (int i=0; i <= mid; i++) {
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	ddc8      	ble.n	8000bec <_Z14lcd_transitionv+0x10>
  }

  for (int i=0; i <= mid; i++) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	e032      	b.n	8000cc6 <_Z14lcd_transitionv+0xea>
      lcd_print(1, mid+i, notFilledSquare);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	4413      	add	r3, r2
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	4a1c      	ldr	r2, [pc, #112]	; (8000ce0 <_Z14lcd_transitionv+0x104>)
 8000c6e:	4619      	mov	r1, r3
 8000c70:	2001      	movs	r0, #1
 8000c72:	f7ff fd40 	bl	80006f6 <_Z9lcd_printhhPc>
      lcd_print(1, mid-i+1, notFilledSquare);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	3301      	adds	r3, #1
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	4a16      	ldr	r2, [pc, #88]	; (8000ce0 <_Z14lcd_transitionv+0x104>)
 8000c88:	4619      	mov	r1, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f7ff fd33 	bl	80006f6 <_Z9lcd_printhhPc>
      lcd_print(2, mid+i, notFilledSquare);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	4413      	add	r3, r2
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <_Z14lcd_transitionv+0x104>)
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f7ff fd28 	bl	80006f6 <_Z9lcd_printhhPc>
      lcd_print(2, mid-i+1, notFilledSquare);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <_Z14lcd_transitionv+0x104>)
 8000cb8:	4619      	mov	r1, r3
 8000cba:	2002      	movs	r0, #2
 8000cbc:	f7ff fd1b 	bl	80006f6 <_Z9lcd_printhhPc>
  for (int i=0; i <= mid; i++) {
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	ddc8      	ble.n	8000c60 <_Z14lcd_transitionv+0x84>
  }

  lcd_clear();
 8000cce:	f7ff fd2a 	bl	8000726 <_Z9lcd_clearv>

}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000030 	.word	0x20000030
 8000ce0:	200000bc 	.word	0x200000bc

08000ce4 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE>:

void manage_obstacles(std::vector<Obstacle>& vec) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b092      	sub	sp, #72	; 0x48
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
    // проверка не пустой ли массив
    if(!vec.empty()){
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 fb2e 	bl	800134e <_ZNKSt6vectorI8ObstacleSaIS0_EE5emptyEv>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f083 0301 	eor.w	r3, r3, #1
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d01d      	beq.n	8000d3a <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x56>
        if(vec[0].getX() < 0){
 8000cfe:	2100      	movs	r1, #0
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f000 fb3f 	bl	8001384 <_ZNSt6vectorI8ObstacleSaIS0_EEixEj>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fd37 	bl	800077c <_ZN10GameObject4getXEv>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	0fdb      	lsrs	r3, r3, #31
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d010      	beq.n	8000d3a <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x56>
            vec.erase(vec.begin());
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f000 fb46 	bl	80013aa <_ZNSt6vectorI8ObstacleSaIS0_EE5beginEv>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	61bb      	str	r3, [r7, #24]
 8000d22:	f107 0218 	add.w	r2, r7, #24
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 fb4c 	bl	80013ca <_ZN9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 8000d32:	6979      	ldr	r1, [r7, #20]
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f000 fb59 	bl	80013ec <_ZNSt6vectorI8ObstacleSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>
        }
    }

    // int prevX = 0 так как obst.getX() - prevX <= 2
    int prevX = -Dino::FLY_TIME;
 8000d3a:	f06f 0302 	mvn.w	r3, #2
 8000d3e:	647b      	str	r3, [r7, #68]	; 0x44
    int group_counter = 1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	643b      	str	r3, [r7, #64]	; 0x40
    for (Obstacle& obst : vec) {
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d4a:	f000 fb2e 	bl	80013aa <_ZNSt6vectorI8ObstacleSaIS0_EE5beginEv>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d54:	f000 fb71 	bl	800143a <_ZNSt6vectorI8ObstacleSaIS0_EE3endEv>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	e025      	b.n	8000daa <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0xc6>
 8000d5e:	f107 0310 	add.w	r3, r7, #16
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 fba3 	bl	80014ae <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEdeEv>
 8000d68:	6378      	str	r0, [r7, #52]	; 0x34
        if(obst.getX() - prevX <= 2){
 8000d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fd05 	bl	800077c <_ZN10GameObject4getXEv>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461a      	mov	r2, r3
 8000d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	bfd4      	ite	le
 8000d7e:	2301      	movle	r3, #1
 8000d80:	2300      	movgt	r3, #0
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0xac>
            group_counter++;
 8000d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8000d8e:	e001      	b.n	8000d94 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0xb0>
        } else {
            group_counter = 1;
 8000d90:	2301      	movs	r3, #1
 8000d92:	643b      	str	r3, [r7, #64]	; 0x40
        }
        prevX = obst.getX();
 8000d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fcf0 	bl	800077c <_ZN10GameObject4getXEv>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	647b      	str	r3, [r7, #68]	; 0x44
    for (Obstacle& obst : vec) {
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 fb71 	bl	800148c <_ZN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEppEv>
 8000daa:	f107 020c 	add.w	r2, r7, #12
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 fb51 	bl	800145c <_ZN9__gnu_cxxneIP8ObstacleSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d1ce      	bne.n	8000d5e <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x7a>
    }

    int chanseToCreateObstacle = std::rand() % 10 + 1;
 8000dc0:	f002 ff1c 	bl	8003bfc <rand>
 8000dc4:	4601      	mov	r1, r0
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x15c>)
 8000dc8:	fb83 2301 	smull	r2, r3, r3, r1
 8000dcc:	109a      	asrs	r2, r3, #2
 8000dce:	17cb      	asrs	r3, r1, #31
 8000dd0:	1ad2      	subs	r2, r2, r3
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	1aca      	subs	r2, r1, r3
 8000ddc:	1c53      	adds	r3, r2, #1
 8000dde:	63bb      	str	r3, [r7, #56]	; 0x38

    if(group_counter < Dino::FLY_TIME){  // add new obstacles
 8000de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	dc28      	bgt.n	8000e38 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x154>
        if(chanseToCreateObstacle <= 1){
 8000de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	dc11      	bgt.n	8000e10 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x12c>
            vec.emplace_back(Obstacle(cactus_2));
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	4914      	ldr	r1, [pc, #80]	; (8000e44 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x160>)
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fd42 	bl	800087c <_ZN8ObstacleC1EPc>
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 fb61 	bl	80014c6 <_ZNSt6vectorI8ObstacleSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 fae9 	bl	80023e0 <_ZN8ObstacleD1Ev>
        }else if(chanseToCreateObstacle <= 4){
            vec.emplace_back(Obstacle(cactus_1));
        }
    }
}
 8000e0e:	e013      	b.n	8000e38 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x154>
        }else if(chanseToCreateObstacle <= 4){
 8000e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	dc10      	bgt.n	8000e38 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x154>
            vec.emplace_back(Obstacle(cactus_1));
 8000e16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e1a:	490b      	ldr	r1, [pc, #44]	; (8000e48 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE+0x164>)
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fd2d 	bl	800087c <_ZN8ObstacleC1EPc>
 8000e22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e26:	4619      	mov	r1, r3
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f000 fb4c 	bl	80014c6 <_ZNSt6vectorI8ObstacleSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
 8000e2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fad4 	bl	80023e0 <_ZN8ObstacleD1Ev>
}
 8000e38:	bf00      	nop
 8000e3a:	3748      	adds	r7, #72	; 0x48
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	66666667 	.word	0x66666667
 8000e44:	20000028 	.word	0x20000028
 8000e48:	20000020 	.word	0x20000020

08000e4c <_Z8end_gameP5Score>:


void end_game(Score* score){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  lcd_transition();
 8000e54:	f7ff fec2 	bl	8000bdc <_Z14lcd_transitionv>
  score->calculateMaxScore();
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff fda9 	bl	80009b0 <_ZN5Score17calculateMaxScoreEv>

  char max_score[3];
  std::sprintf(max_score, "%d", score->MAX_SCORE);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	7adb      	ldrb	r3, [r3, #11]
 8000e62:	461a      	mov	r2, r3
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	4918      	ldr	r1, [pc, #96]	; (8000ecc <_Z8end_gameP5Score+0x80>)
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 ffc6 	bl	8003dfc <siprintf>

  lcd_print(1, 1, "MAX_SCORE:");
 8000e70:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <_Z8end_gameP5Score+0x84>)
 8000e72:	2101      	movs	r1, #1
 8000e74:	2001      	movs	r0, #1
 8000e76:	f7ff fc3e 	bl	80006f6 <_Z9lcd_printhhPc>
  lcd_print(1, 14, max_score);
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	461a      	mov	r2, r3
 8000e80:	210e      	movs	r1, #14
 8000e82:	2001      	movs	r0, #1
 8000e84:	f7ff fc37 	bl	80006f6 <_Z9lcd_printhhPc>
  lcd_print(2, 1, "CURRENT_SCORE:");
 8000e88:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <_Z8end_gameP5Score+0x88>)
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f7ff fc32 	bl	80006f6 <_Z9lcd_printhhPc>
  lcd_print(2, 14, score->getTexture());
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fc89 	bl	80007ac <_ZN10GameObject10getTextureEv>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	210e      	movs	r1, #14
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f7ff fc28 	bl	80006f6 <_Z9lcd_printhhPc>

  // Catch algorithm in the loop which breaks after the USER_BTN is pressed
  while (HAL_GPIO_ReadPin(USER_BTN_GPIO_Port, USER_BTN_Pin) == GPIO_PIN_SET) {}
 8000ea6:	bf00      	nop
 8000ea8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eac:	480a      	ldr	r0, [pc, #40]	; (8000ed8 <_Z8end_gameP5Score+0x8c>)
 8000eae:	f001 ff31 	bl	8002d14 <HAL_GPIO_ReadPin>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	bf0c      	ite	eq
 8000eb8:	2301      	moveq	r3, #1
 8000eba:	2300      	movne	r3, #0
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f2      	bne.n	8000ea8 <_Z8end_gameP5Score+0x5c>
}
 8000ec2:	bf00      	nop
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	08004e2c 	.word	0x08004e2c
 8000ed0:	08004e30 	.word	0x08004e30
 8000ed4:	08004e3c 	.word	0x08004e3c
 8000ed8:	48000800 	.word	0x48000800

08000edc <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 fb2d 	bl	8001544 <_ZNSaI8ObstacleED1Ev>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fb10 	bl	8001524 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE12_Vector_implC1Ev>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <_ZNSt6vectorI8ObstacleSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ffeb 	bl	8000ef4 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EEC1Ev>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <_ZN10GameObjectC1ERKS_>:
class GameObject
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <_ZN10GameObjectC1ERKS_+0x38>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	7a1a      	ldrb	r2, [r3, #8]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	721a      	strb	r2, [r3, #8]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	7a5a      	ldrb	r2, [r3, #9]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	725a      	strb	r2, [r3, #9]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	08004eac 	.word	0x08004eac

08000f64 <_Z4gameP5Score>:

void game(Score* score) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b09a      	sub	sp, #104	; 0x68
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	Dino dino(dinosaur_textures, 3, 2);
 8000f6c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000f70:	2302      	movs	r3, #2
 8000f72:	2203      	movs	r2, #3
 8000f74:	496f      	ldr	r1, [pc, #444]	; (8001134 <_Z4gameP5Score+0x1d0>)
 8000f76:	f7ff fd45 	bl	8000a04 <_ZN4DinoC1EPA8_chh>
	std::vector<Obstacle> obstacles;
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ffc5 	bl	8000f0e <_ZNSt6vectorI8ObstacleSaIS0_EEC1Ev>
//	Score score();
	score->reset();
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff fd2b 	bl	80009e0 <_ZN5Score5resetEv>

	int delay = 600;
 8000f8a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000f8e:	667b      	str	r3, [r7, #100]	; 0x64
	int gameOver = false;	// default: 0
 8000f90:	2300      	movs	r3, #0
 8000f92:	663b      	str	r3, [r7, #96]	; 0x60

	while (!gameOver) {
 8000f94:	e0bc      	b.n	8001110 <_Z4gameP5Score+0x1ac>
		// Check if Dino is currently in the air
		if (dino.getY() == 1) dino.fall();
 8000f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fbfa 	bl	8000794 <_ZN10GameObject4getYEv>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	bf0c      	ite	eq
 8000fa6:	2301      	moveq	r3, #1
 8000fa8:	2300      	movne	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d005      	beq.n	8000fbc <_Z4gameP5Score+0x58>
 8000fb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fd70 	bl	8000a9a <_ZN4Dino4fallEv>
 8000fba:	e011      	b.n	8000fe0 <_Z4gameP5Score+0x7c>
		// If Dino is on the ground and the USER_BTN is pressed – jump
		else if (HAL_GPIO_ReadPin(USER_BTN_GPIO_Port, USER_BTN_Pin) == GPIO_PIN_RESET) {
 8000fbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc0:	485d      	ldr	r0, [pc, #372]	; (8001138 <_Z4gameP5Score+0x1d4>)
 8000fc2:	f001 fea7 	bl	8002d14 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	bf0c      	ite	eq
 8000fcc:	2301      	moveq	r3, #1
 8000fce:	2300      	movne	r3, #0
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d004      	beq.n	8000fe0 <_Z4gameP5Score+0x7c>
			dino.jump();
 8000fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fd4c 	bl	8000a78 <_ZN4Dino4jumpEv>
		}

		// Iterate through the obstacles
		for (Obstacle& obst : obstacles) {
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000fe6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000fe8:	f000 f9df 	bl	80013aa <_ZNSt6vectorI8ObstacleSaIS0_EE5beginEv>
 8000fec:	4603      	mov	r3, r0
 8000fee:	61bb      	str	r3, [r7, #24]
 8000ff0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000ff2:	f000 fa22 	bl	800143a <_ZNSt6vectorI8ObstacleSaIS0_EE3endEv>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	e029      	b.n	8001050 <_Z4gameP5Score+0xec>
 8000ffc:	f107 0318 	add.w	r3, r7, #24
 8001000:	4618      	mov	r0, r3
 8001002:	f000 fa54 	bl	80014ae <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEdeEv>
 8001006:	6538      	str	r0, [r7, #80]	; 0x50
			obst.move();						// Move the current obstacle
 8001008:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800100a:	f7ff fc4d 	bl	80008a8 <_ZN8Obstacle4moveEv>
			gameOver = obst.collides(dino);	// Check if dino collides the obstacle
 800100e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001012:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff85 	bl	8000f28 <_ZN10GameObjectC1ERKS_>
 800101e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001022:	4619      	mov	r1, r3
 8001024:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001026:	f7ff fc4d 	bl	80008c4 <_ZN8Obstacle8collidesE10GameObject>
 800102a:	4603      	mov	r3, r0
 800102c:	663b      	str	r3, [r7, #96]	; 0x60
 800102e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fc02 	bl	800083c <_ZN10GameObjectD1Ev>
			obst.draw();						// Draw the obstacle
 8001038:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800103a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3308      	adds	r3, #8
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4610      	mov	r0, r2
 8001044:	4798      	blx	r3
		for (Obstacle& obst : obstacles) {
 8001046:	f107 0318 	add.w	r3, r7, #24
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fa1e 	bl	800148c <_ZN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEppEv>
 8001050:	f107 0214 	add.w	r2, r7, #20
 8001054:	f107 0318 	add.w	r3, r7, #24
 8001058:	4611      	mov	r1, r2
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f9fe 	bl	800145c <_ZN9__gnu_cxxneIP8ObstacleSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1ca      	bne.n	8000ffc <_Z4gameP5Score+0x98>
		}

		// Rise Player's score
		score->up();
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff fc82 	bl	8000970 <_ZN5Score2upEv>
		// If score has reached it's max.value – game ends
		if (score->get() >= score->SCORE_LIMIT) gameOver = true;
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff fc73 	bl	8000958 <_ZN5Score3getEv>
 8001072:	4603      	mov	r3, r0
 8001074:	2b62      	cmp	r3, #98	; 0x62
 8001076:	bfcc      	ite	gt
 8001078:	2301      	movgt	r3, #1
 800107a:	2300      	movle	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <_Z4gameP5Score+0x122>
 8001082:	2301      	movs	r3, #1
 8001084:	663b      	str	r3, [r7, #96]	; 0x60

		manage_obstacles(obstacles);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fe2a 	bl	8000ce4 <_Z16manage_obstaclesRSt6vectorI8ObstacleSaIS0_EE>

		// Clear the LCD screen before drawing objects
		lcd_clear();
 8001090:	f7ff fb49 	bl	8000726 <_Z9lcd_clearv>
		// Draw player charachter and score
		dino.draw();
 8001094:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fd1a 	bl	8000ad2 <_ZN4Dino4drawEv>
		score->draw();
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	3308      	adds	r3, #8
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4610      	mov	r0, r2
 80010aa:	4798      	blx	r3
		// Draw all the obstacles
		for (Obstacle& obst : obstacles) {
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80010b2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80010b4:	f000 f979 	bl	80013aa <_ZNSt6vectorI8ObstacleSaIS0_EE5beginEv>
 80010b8:	4603      	mov	r3, r0
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80010be:	f000 f9bc 	bl	800143a <_ZNSt6vectorI8ObstacleSaIS0_EE3endEv>
 80010c2:	4603      	mov	r3, r0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	e011      	b.n	80010ec <_Z4gameP5Score+0x188>
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f9ee 	bl	80014ae <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEdeEv>
 80010d2:	6578      	str	r0, [r7, #84]	; 0x54
			obst.draw();
 80010d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80010d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	3308      	adds	r3, #8
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4610      	mov	r0, r2
 80010e0:	4798      	blx	r3
		for (Obstacle& obst : obstacles) {
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f9d0 	bl	800148c <_ZN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEppEv>
 80010ec:	f107 020c 	add.w	r2, r7, #12
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	4611      	mov	r1, r2
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f9b0 	bl	800145c <_ZN9__gnu_cxxneIP8ObstacleSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1e2      	bne.n	80010c8 <_Z4gameP5Score+0x164>
		}

		// Delays before the next frame
		delay -= 5;
 8001102:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001104:	3b05      	subs	r3, #5
 8001106:	667b      	str	r3, [r7, #100]	; 0x64
		HAL_Delay(delay);
 8001108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800110a:	4618      	mov	r0, r3
 800110c:	f001 fb4e 	bl	80027ac <HAL_Delay>
	while (!gameOver) {
 8001110:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001112:	2b00      	cmp	r3, #0
 8001114:	f43f af3f 	beq.w	8000f96 <_Z4gameP5Score+0x32>
	}
}
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fa3b 	bl	8001598 <_ZNSt6vectorI8ObstacleSaIS0_EED1Ev>
 8001122:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001126:	4618      	mov	r0, r3
 8001128:	f001 f916 	bl	8002358 <_ZN4DinoD1Ev>
 800112c:	3768      	adds	r7, #104	; 0x68
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000010 	.word	0x20000010
 8001138:	48000800 	.word	0x48000800

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	lcd_init(8, 1, 2);
 8001142:	2202      	movs	r2, #2
 8001144:	2101      	movs	r1, #1
 8001146:	2008      	movs	r0, #8
 8001148:	f7ff fa75 	bl	8000636 <_Z8lcd_initccc>
	load_custom_chars();
 800114c:	f7ff fd1e 	bl	8000b8c <_Z17load_custom_charsv>
	std::srand(static_cast<unsigned>(13));
 8001150:	200d      	movs	r0, #13
 8001152:	f002 fd25 	bl	8003ba0 <srand>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001156:	f001 fab4 	bl	80026c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115a:	f000 f817 	bl	800118c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115e:	f000 f86b 	bl	8001238 <_ZL12MX_GPIO_Initv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Create score display at the (x:14, y:1)
	  Score score(14, 1);
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2201      	movs	r2, #1
 8001166:	210e      	movs	r1, #14
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fbd5 	bl	8000918 <_ZN5ScoreC1Ehh>
	  // Make smooth transition to the game start
	  lcd_transition();
 800116e:	f7ff fd35 	bl	8000bdc <_Z14lcd_transitionv>
	  // Starts the game
	  game(&score);
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fef5 	bl	8000f64 <_Z4gameP5Score>
	  // Shows endgame screen with the Top Score and the Current Score
	  end_game(&score);
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fe65 	bl	8000e4c <_Z8end_gameP5Score>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	4618      	mov	r0, r3
 8001186:	f001 f909 	bl	800239c <_ZN5ScoreD1Ev>
 800118a:	e7ea      	b.n	8001162 <main+0x26>

0800118c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b096      	sub	sp, #88	; 0x58
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	2244      	movs	r2, #68	; 0x44
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f002 fe91 	bl	8003ec2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	463b      	mov	r3, r7
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011b2:	f001 fded 	bl	8002d90 <HAL_PWREx_ControlVoltageScaling>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	bf14      	ite	ne
 80011bc:	2301      	movne	r3, #1
 80011be:	2300      	moveq	r3, #0
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80011c6:	f000 f8bd 	bl	8001344 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011ca:	2310      	movs	r3, #16
 80011cc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011ce:	2301      	movs	r3, #1
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011d6:	2360      	movs	r3, #96	; 0x60
 80011d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011da:	2300      	movs	r3, #0
 80011dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 fe2a 	bl	8002e3c <HAL_RCC_OscConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bf14      	ite	ne
 80011ee:	2301      	movne	r3, #1
 80011f0:	2300      	moveq	r3, #0
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80011f8:	f000 f8a4 	bl	8001344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f002 f9ed 	bl	80035f4 <HAL_RCC_ClockConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	bf14      	ite	ne
 8001220:	2301      	movne	r3, #1
 8001222:	2300      	moveq	r3, #0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800122a:	f000 f88b 	bl	8001344 <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	3758      	adds	r7, #88	; 0x58
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	4b3a      	ldr	r3, [pc, #232]	; (8001338 <_ZL12MX_GPIO_Initv+0x100>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a39      	ldr	r2, [pc, #228]	; (8001338 <_ZL12MX_GPIO_Initv+0x100>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b37      	ldr	r3, [pc, #220]	; (8001338 <_ZL12MX_GPIO_Initv+0x100>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b34      	ldr	r3, [pc, #208]	; (8001338 <_ZL12MX_GPIO_Initv+0x100>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a33      	ldr	r2, [pc, #204]	; (8001338 <_ZL12MX_GPIO_Initv+0x100>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b31      	ldr	r3, [pc, #196]	; (8001338 <_ZL12MX_GPIO_Initv+0x100>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b2e      	ldr	r3, [pc, #184]	; (8001338 <_ZL12MX_GPIO_Initv+0x100>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a2d      	ldr	r2, [pc, #180]	; (8001338 <_ZL12MX_GPIO_Initv+0x100>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <_ZL12MX_GPIO_Initv+0x100>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 6186 	mov.w	r1, #1072	; 0x430
 800129c:	4827      	ldr	r0, [pc, #156]	; (800133c <_ZL12MX_GPIO_Initv+0x104>)
 800129e:	f001 fd51 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	4826      	ldr	r0, [pc, #152]	; (8001340 <_ZL12MX_GPIO_Initv+0x108>)
 80012a8:	f001 fd4c 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 7140 	mov.w	r1, #768	; 0x300
 80012b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b6:	f001 fd45 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4619      	mov	r1, r3
 80012ce:	481c      	ldr	r0, [pc, #112]	; (8001340 <_ZL12MX_GPIO_Initv+0x108>)
 80012d0:	f001 fb76 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 80012d4:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80012d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	4619      	mov	r1, r3
 80012ec:	4813      	ldr	r0, [pc, #76]	; (800133c <_ZL12MX_GPIO_Initv+0x104>)
 80012ee:	f001 fb67 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	4619      	mov	r1, r3
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <_ZL12MX_GPIO_Initv+0x108>)
 800130a:	f001 fb59 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_RS_Pin;
 800130e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	4619      	mov	r1, r3
 8001326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132a:	f001 fb49 	bl	80029c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800132e:	bf00      	nop
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000
 800133c:	48000400 	.word	0x48000400
 8001340:	48000800 	.word	0x48000800

08001344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001348:	b672      	cpsid	i
}
 800134a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134c:	e7fe      	b.n	800134c <Error_Handler+0x8>

0800134e <_ZNKSt6vectorI8ObstacleSaIS0_EE5emptyEv>:
      /**
       *  Returns true if the %vector is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f939 	bl	80015ce <_ZNKSt6vectorI8ObstacleSaIS0_EE5beginEv>
 800135c:	4603      	mov	r3, r0
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f944 	bl	80015ee <_ZNKSt6vectorI8ObstacleSaIS0_EE3endEv>
 8001366:	4603      	mov	r3, r0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	f107 020c 	add.w	r2, r7, #12
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f000 f94b 	bl	8001610 <_ZN9__gnu_cxxeqIPK8ObstacleSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800137a:	4603      	mov	r3, r0
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <_ZNSt6vectorI8ObstacleSaIS0_EEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6819      	ldr	r1, [r3, #0]
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	4613      	mov	r3, r2
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
      }
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_ZNSt6vectorI8ObstacleSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b084      	sub	sp, #16
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	4611      	mov	r1, r2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f940 	bl	8001640 <_ZN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_ZN9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>:
      : _M_current(__i) { }

      // Allow iterator to const_iterator conversion
      template<typename _Iter>
        _GLIBCXX20_CONSTEXPR
        __normal_iterator(const __normal_iterator<_Iter,
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	6039      	str	r1, [r7, #0]
			  typename __enable_if<
      	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
        : _M_current(__i.base()) { }
 80013d4:	6838      	ldr	r0, [r7, #0]
 80013d6:	f000 f943 	bl	8001660 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 80013da:	4603      	mov	r3, r0
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <_ZNSt6vectorI8ObstacleSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>:
       *  the pointed-to memory is not touched in any way.  Managing
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffd7 	bl	80013aa <_ZNSt6vectorI8ObstacleSaIS0_EE5beginEv>
 80013fc:	4603      	mov	r3, r0
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 f938 	bl	8001676 <_ZNKSt6vectorI8ObstacleSaIS0_EE6cbeginEv>
 8001406:	4603      	mov	r3, r0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	f107 020c 	add.w	r2, r7, #12
 800140e:	463b      	mov	r3, r7
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f940 	bl	8001698 <_ZN9__gnu_cxxmiIPK8ObstacleSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8001418:	4602      	mov	r2, r0
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f000 f953 	bl	80016cc <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEplEi>
 8001426:	4603      	mov	r3, r0
 8001428:	4619      	mov	r1, r3
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f969 	bl	8001702 <_ZNSt6vectorI8ObstacleSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
 8001430:	4603      	mov	r3, r0
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <_ZNSt6vectorI8ObstacleSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800143a:	b580      	push	{r7, lr}
 800143c:	b084      	sub	sp, #16
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	1d1a      	adds	r2, r3, #4
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f000 f8f7 	bl	8001640 <_ZN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <_ZN9__gnu_cxxneIP8ObstacleSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f8fa 	bl	8001660 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 800146c:	4603      	mov	r3, r0
 800146e:	681c      	ldr	r4, [r3, #0]
 8001470:	6838      	ldr	r0, [r7, #0]
 8001472:	f000 f8f5 	bl	8001660 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 8001476:	4603      	mov	r3, r0
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	429c      	cmp	r4, r3
 800147c:	bf14      	ite	ne
 800147e:	2301      	movne	r3, #1
 8001480:	2300      	moveq	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bd90      	pop	{r4, r7, pc}

0800148c <_ZN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	++_M_current;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f103 020c 	add.w	r2, r3, #12
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	601a      	str	r2, [r3, #0]
	return *this;
 80014a0:	687b      	ldr	r3, [r7, #4]
      }
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <_ZNSt6vectorI8ObstacleSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 80014c6:	b5b0      	push	{r4, r5, r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d012      	beq.n	8001502 <_ZNSt6vectorI8ObstacleSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x3c>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80014dc:	687c      	ldr	r4, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685d      	ldr	r5, [r3, #4]
 80014e2:	6838      	ldr	r0, [r7, #0]
 80014e4:	f000 f94a 	bl	800177c <_ZSt7forwardI8ObstacleEOT_RNSt16remove_referenceIS1_E4typeE>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	4629      	mov	r1, r5
 80014ee:	4620      	mov	r0, r4
 80014f0:	f000 f94f 	bl	8001792 <_ZNSt16allocator_traitsISaI8ObstacleEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f103 020c 	add.w	r2, r3, #12
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8001500:	e00c      	b.n	800151c <_ZNSt6vectorI8ObstacleSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x56>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ff99 	bl	800143a <_ZNSt6vectorI8ObstacleSaIS0_EE3endEv>
 8001508:	4604      	mov	r4, r0
 800150a:	6838      	ldr	r0, [r7, #0]
 800150c:	f000 f936 	bl	800177c <_ZSt7forwardI8ObstacleEOT_RNSt16remove_referenceIS1_E4typeE>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	4621      	mov	r1, r4
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f964 	bl	80017e4 <_ZNSt6vectorI8ObstacleSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bdb0      	pop	{r4, r5, r7, pc}

08001524 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 fa21 	bl	8001974 <_ZNSaI8ObstacleEC1Ev>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fa29 	bl	800198c <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_ZNSaI8ObstacleED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 fa31 	bl	80019b4 <_ZN9__gnu_cxx13new_allocatorI8ObstacleED1Ev>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_ZNSt12_Vector_baseI8ObstacleSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	109b      	asrs	r3, r3, #2
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EED1Ev+0x38>)
 8001576:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 800157a:	461a      	mov	r2, r3
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 fa24 	bl	80019ca <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE13_M_deallocateEPS0_j>
      }
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fca9 	bl	8000edc <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE12_Vector_implD1Ev>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	aaaaaaab 	.word	0xaaaaaaab

08001598 <_ZNSt6vectorI8ObstacleSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681c      	ldr	r4, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fa20 	bl	80019f0 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE19_M_get_Tp_allocatorEv>
 80015b0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80015b2:	461a      	mov	r2, r3
 80015b4:	4629      	mov	r1, r5
 80015b6:	4620      	mov	r0, r4
 80015b8:	f000 fa25 	bl	8001a06 <_ZSt8_DestroyIP8ObstacleS0_EvT_S2_RSaIT0_E>
      }
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ffcc 	bl	800155c <_ZNSt12_Vector_baseI8ObstacleSaIS0_EED1Ev>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bdb0      	pop	{r4, r5, r7, pc}

080015ce <_ZNKSt6vectorI8ObstacleSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	4611      	mov	r1, r2
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fa1f 	bl	8001a22 <_ZN9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <_ZNKSt6vectorI8ObstacleSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	1d1a      	adds	r2, r3, #4
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f000 fa0e 	bl	8001a22 <_ZN9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_ZN9__gnu_cxxeqIPK8ObstacleSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 fa11 	bl	8001a42 <_ZNK9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 8001620:	4603      	mov	r3, r0
 8001622:	681c      	ldr	r4, [r3, #0]
 8001624:	6838      	ldr	r0, [r7, #0]
 8001626:	f000 fa0c 	bl	8001a42 <_ZNK9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 800162a:	4603      	mov	r3, r0
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	429c      	cmp	r4, r3
 8001630:	bf0c      	ite	eq
 8001632:	2301      	moveq	r3, #1
 8001634:	2300      	movne	r3, #0
 8001636:	b2db      	uxtb	r3, r3
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bd90      	pop	{r4, r7, pc}

08001640 <_ZN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <_ZNKSt6vectorI8ObstacleSaIS0_EE6cbeginEv>:
      cbegin() const noexcept
 8001676:	b580      	push	{r7, lr}
 8001678:	b084      	sub	sp, #16
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f9cb 	bl	8001a22 <_ZN9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <_ZN9__gnu_cxxmiIPK8ObstacleSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 f9cd 	bl	8001a42 <_ZNK9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 80016a8:	4603      	mov	r3, r0
 80016aa:	681c      	ldr	r4, [r3, #0]
 80016ac:	6838      	ldr	r0, [r7, #0]
 80016ae:	f000 f9c8 	bl	8001a42 <_ZNK9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 80016b2:	4603      	mov	r3, r0
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	1ae3      	subs	r3, r4, r3
 80016b8:	109b      	asrs	r3, r3, #2
 80016ba:	4a03      	ldr	r2, [pc, #12]	; (80016c8 <_ZN9__gnu_cxxmiIPK8ObstacleSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x30>)
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd90      	pop	{r4, r7, pc}
 80016c8:	aaaaaaab 	.word	0xaaaaaaab

080016cc <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6819      	ldr	r1, [r3, #0]
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	f107 020c 	add.w	r2, r7, #12
 80016ec:	f107 0308 	add.w	r3, r7, #8
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ffa4 	bl	8001640 <_ZN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <_ZNSt6vectorI8ObstacleSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
 8001702:	b590      	push	{r4, r7, lr}
 8001704:	b085      	sub	sp, #20
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 800170c:	463b      	mov	r3, r7
 800170e:	2101      	movs	r1, #1
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ffdb 	bl	80016cc <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEplEi>
 8001716:	4603      	mov	r3, r0
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff fe8d 	bl	800143a <_ZNSt6vectorI8ObstacleSaIS0_EE3endEv>
 8001720:	4603      	mov	r3, r0
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	f107 020c 	add.w	r2, r7, #12
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fe94 	bl	800145c <_ZN9__gnu_cxxneIP8ObstacleSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00e      	beq.n	8001758 <_ZNSt6vectorI8ObstacleSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 800173a:	463b      	mov	r3, r7
 800173c:	2101      	movs	r1, #1
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff ffc4 	bl	80016cc <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEplEi>
 8001744:	4604      	mov	r4, r0
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fe77 	bl	800143a <_ZNSt6vectorI8ObstacleSaIS0_EE3endEv>
 800174c:	4603      	mov	r3, r0
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	4620      	mov	r0, r4
 8001754:	f000 f980 	bl	8001a58 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
      --this->_M_impl._M_finish;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f1a3 020c 	sub.w	r2, r3, #12
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4619      	mov	r1, r3
 800176c:	4610      	mov	r0, r2
 800176e:	f000 f98b 	bl	8001a88 <_ZNSt16allocator_traitsISaI8ObstacleEE7destroyIS0_EEvRS1_PT_>
      _GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
      return __position;
 8001772:	683b      	ldr	r3, [r7, #0]
    }
 8001774:	4618      	mov	r0, r3
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	bd90      	pop	{r4, r7, pc}

0800177c <_ZSt7forwardI8ObstacleEOT_RNSt16remove_referenceIS1_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_ZNSt16allocator_traitsISaI8ObstacleEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ffec 	bl	800177c <_ZSt7forwardI8ObstacleEOT_RNSt16remove_referenceIS1_E4typeE>
 80017a4:	4603      	mov	r3, r0
 80017a6:	461a      	mov	r2, r3
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 f990 	bl	8001ad0 <_ZN9__gnu_cxx13new_allocatorI8ObstacleE9constructIS1_JS1_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <_ZNSt6vectorI8ObstacleSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f805 	bl	80017ce <_ZNSt6vectorI8ObstacleSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80017c4:	4603      	mov	r3, r0
      }
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_ZNSt6vectorI8ObstacleSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80017d6:	2301      	movs	r3, #1
      }
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <_ZNSt6vectorI8ObstacleSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80017e4:	b5b0      	push	{r4, r5, r7, lr}
 80017e6:	b08c      	sub	sp, #48	; 0x30
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80017f0:	4a5e      	ldr	r2, [pc, #376]	; (800196c <_ZNSt6vectorI8ObstacleSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x188>)
 80017f2:	2101      	movs	r1, #1
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f000 f983 	bl	8001b00 <_ZNKSt6vectorI8ObstacleSaIS0_EE12_M_check_lenEjPKc>
 80017fa:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f7ff fdce 	bl	80013aa <_ZNSt6vectorI8ObstacleSaIS0_EE5beginEv>
 800180e:	4603      	mov	r3, r0
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	f107 0214 	add.w	r2, r7, #20
 8001816:	f107 0308 	add.w	r3, r7, #8
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f000 f9b7 	bl	8001b90 <_ZN9__gnu_cxxmiIP8ObstacleSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8001822:	4603      	mov	r3, r0
 8001824:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f9ca 	bl	8001bc4 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE11_M_allocateEj>
 8001830:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8001836:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8001838:	69fa      	ldr	r2, [r7, #28]
 800183a:	4613      	mov	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	461a      	mov	r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	189d      	adds	r5, r3, r2
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff97 	bl	800177c <_ZSt7forwardI8ObstacleEOT_RNSt16remove_referenceIS1_E4typeE>
 800184e:	4603      	mov	r3, r0
 8001850:	461a      	mov	r2, r3
 8001852:	4629      	mov	r1, r5
 8001854:	4620      	mov	r0, r4
 8001856:	f7ff ff9c 	bl	8001792 <_ZNSt16allocator_traitsISaI8ObstacleEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800185a:	2300      	movs	r3, #0
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800185e:	f7ff ffab 	bl	80017b8 <_ZNSt6vectorI8ObstacleSaIS0_EE15_S_use_relocateEv>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d027      	beq.n	80018b8 <_ZNSt6vectorI8ObstacleSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd4>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fef7 	bl	8001660 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 8001872:	4603      	mov	r3, r0
 8001874:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4618      	mov	r0, r3
 800187a:	f000 f8b9 	bl	80019f0 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE19_M_get_Tp_allocatorEv>
 800187e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4621      	mov	r1, r4
 8001884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001886:	f000 f9b1 	bl	8001bec <_ZNSt6vectorI8ObstacleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 800188a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 800188c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188e:	330c      	adds	r3, #12
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fee2 	bl	8001660 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 800189c:	4603      	mov	r3, r0
 800189e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f8a4 	bl	80019f0 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE19_M_get_Tp_allocatorEv>
 80018a8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80018aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ac:	6a39      	ldr	r1, [r7, #32]
 80018ae:	4620      	mov	r0, r4
 80018b0:	f000 f99c 	bl	8001bec <_ZNSt6vectorI8ObstacleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80018b4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80018b6:	e026      	b.n	8001906 <_ZNSt6vectorI8ObstacleSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x122>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80018b8:	f107 0308 	add.w	r3, r7, #8
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fecf 	bl	8001660 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 80018c2:	4603      	mov	r3, r0
 80018c4:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 f891 	bl	80019f0 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE19_M_get_Tp_allocatorEv>
 80018ce:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4621      	mov	r1, r4
 80018d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018d6:	f000 f99d 	bl	8001c14 <_ZSt34__uninitialized_move_if_noexcept_aIP8ObstacleS1_SaIS0_EET0_T_S4_S3_RT1_>
 80018da:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 80018dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018de:	330c      	adds	r3, #12
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80018e2:	f107 0308 	add.w	r3, r7, #8
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff feba 	bl	8001660 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 80018ec:	4603      	mov	r3, r0
 80018ee:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f87c 	bl	80019f0 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE19_M_get_Tp_allocatorEv>
 80018f8:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80018fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018fc:	6a39      	ldr	r1, [r7, #32]
 80018fe:	4620      	mov	r0, r4
 8001900:	f000 f988 	bl	8001c14 <_ZSt34__uninitialized_move_if_noexcept_aIP8ObstacleS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001904:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8001906:	f7ff ff57 	bl	80017b8 <_ZNSt6vectorI8ObstacleSaIS0_EE15_S_use_relocateEv>
 800190a:	4603      	mov	r3, r0
 800190c:	f083 0301 	eor.w	r3, r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d009      	beq.n	800192a <_ZNSt6vectorI8ObstacleSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x146>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4618      	mov	r0, r3
 800191a:	f000 f869 	bl	80019f0 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE19_M_get_Tp_allocatorEv>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	6a39      	ldr	r1, [r7, #32]
 8001924:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001926:	f000 f86e 	bl	8001a06 <_ZSt8_DestroyIP8ObstacleS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800192a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	109b      	asrs	r3, r3, #2
 8001936:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <_ZNSt6vectorI8ObstacleSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x18c>)
 8001938:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 800193c:	461a      	mov	r2, r3
 800193e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001940:	f000 f843 	bl	80019ca <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800194e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	461a      	mov	r2, r3
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	441a      	add	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	609a      	str	r2, [r3, #8]
    }
 8001964:	bf00      	nop
 8001966:	3730      	adds	r7, #48	; 0x30
 8001968:	46bd      	mov	sp, r7
 800196a:	bdb0      	pop	{r4, r5, r7, pc}
 800196c:	08004e4c 	.word	0x08004e4c
 8001970:	aaaaaaab 	.word	0xaaaaaaab

08001974 <_ZNSaI8ObstacleEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f962 	bl	8001c46 <_ZN9__gnu_cxx13new_allocatorI8ObstacleEC1Ev>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
	{ }
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_ZN9__gnu_cxx13new_allocatorI8ObstacleED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
	if (__p)
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	68b9      	ldr	r1, [r7, #8]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f93a 	bl	8001c5c <_ZNSt16allocator_traitsISaI8ObstacleEE10deallocateERS1_PS0_j>
      }
 80019e8:	bf00      	nop
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <_ZSt8_DestroyIP8ObstacleS0_EvT_S2_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001a12:	68b9      	ldr	r1, [r7, #8]
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 f930 	bl	8001c7a <_ZSt8_DestroyIP8ObstacleEvT_S2_>
    }
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_ZN9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_ZNK9__gnu_cxx17__normal_iteratorIPK8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    move(_II __first, _II __last, _OI __result)
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<true>(std::__miter_base(__first),
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 f915 	bl	8001c94 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEEET_S8_>
 8001a6a:	4604      	mov	r4, r0
 8001a6c:	68b8      	ldr	r0, [r7, #8]
 8001a6e:	f000 f911 	bl	8001c94 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEEET_S8_>
 8001a72:	4603      	mov	r3, r0
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4619      	mov	r1, r3
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f000 f916 	bl	8001caa <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 8001a7e:	4603      	mov	r3, r0
				      std::__miter_base(__last), __result);
    }
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd90      	pop	{r4, r7, pc}

08001a88 <_ZNSt16allocator_traitsISaI8ObstacleEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8001a92:	6839      	ldr	r1, [r7, #0]
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f929 	bl	8001cec <_ZN9__gnu_cxx13new_allocatorI8ObstacleE7destroyIS1_EEvPT_>
	}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <_ZN8ObstacleC1EOS_>:
class Obstacle : public GameObject {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fa37 	bl	8000f28 <_ZN10GameObjectC1ERKS_>
 8001aba:	4a04      	ldr	r2, [pc, #16]	; (8001acc <_ZN8ObstacleC1EOS_+0x28>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	08004e98 	.word	0x08004e98

08001ad0 <_ZN9__gnu_cxx13new_allocatorI8ObstacleE9constructIS1_JS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff fe4d 	bl	800177c <_ZSt7forwardI8ObstacleEOT_RNSt16remove_referenceIS1_E4typeE>
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	200c      	movs	r0, #12
 8001aea:	f7ff f81d 	bl	8000b28 <_ZnwjPv>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4621      	mov	r1, r4
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff ffd6 	bl	8001aa4 <_ZN8ObstacleC1EOS_>
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd90      	pop	{r4, r7, pc}

08001b00 <_ZNKSt6vectorI8ObstacleSaIS0_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f8fb 	bl	8001d08 <_ZNKSt6vectorI8ObstacleSaIS0_EE8max_sizeEv>
 8001b12:	4604      	mov	r4, r0
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 f909 	bl	8001d2c <_ZNKSt6vectorI8ObstacleSaIS0_EE4sizeEv>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	1ae2      	subs	r2, r4, r3
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	bf34      	ite	cc
 8001b24:	2301      	movcc	r3, #1
 8001b26:	2300      	movcs	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <_ZNKSt6vectorI8ObstacleSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f001 ff65 	bl	80039fe <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 f8f9 	bl	8001d2c <_ZNKSt6vectorI8ObstacleSaIS0_EE4sizeEv>
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 f8f5 	bl	8001d2c <_ZNKSt6vectorI8ObstacleSaIS0_EE4sizeEv>
 8001b42:	4603      	mov	r3, r0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	f107 0208 	add.w	r2, r7, #8
 8001b4a:	f107 0310 	add.w	r3, r7, #16
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 f901 	bl	8001d58 <_ZSt3maxIjERKT_S2_S2_>
 8001b56:	4603      	mov	r3, r0
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4423      	add	r3, r4
 8001b5c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 f8e4 	bl	8001d2c <_ZNKSt6vectorI8ObstacleSaIS0_EE4sizeEv>
 8001b64:	4602      	mov	r2, r0
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d306      	bcc.n	8001b7a <_ZNKSt6vectorI8ObstacleSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 f8cb 	bl	8001d08 <_ZNKSt6vectorI8ObstacleSaIS0_EE8max_sizeEv>
 8001b72:	4602      	mov	r2, r0
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d904      	bls.n	8001b84 <_ZNKSt6vectorI8ObstacleSaIS0_EE12_M_check_lenEjPKc+0x84>
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 f8c4 	bl	8001d08 <_ZNKSt6vectorI8ObstacleSaIS0_EE8max_sizeEv>
 8001b80:	4603      	mov	r3, r0
 8001b82:	e000      	b.n	8001b86 <_ZNKSt6vectorI8ObstacleSaIS0_EE12_M_check_lenEjPKc+0x86>
 8001b84:	697b      	ldr	r3, [r7, #20]
      }
 8001b86:	4618      	mov	r0, r3
 8001b88:	371c      	adds	r7, #28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd90      	pop	{r4, r7, pc}
	...

08001b90 <_ZN9__gnu_cxxmiIP8ObstacleSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff fd60 	bl	8001660 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	681c      	ldr	r4, [r3, #0]
 8001ba4:	6838      	ldr	r0, [r7, #0]
 8001ba6:	f7ff fd5b 	bl	8001660 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 8001baa:	4603      	mov	r3, r0
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	1ae3      	subs	r3, r4, r3
 8001bb0:	109b      	asrs	r3, r3, #2
 8001bb2:	4a03      	ldr	r2, [pc, #12]	; (8001bc0 <_ZN9__gnu_cxxmiIP8ObstacleSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 8001bb4:	fb02 f303 	mul.w	r3, r2, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd90      	pop	{r4, r7, pc}
 8001bc0:	aaaaaaab 	.word	0xaaaaaaab

08001bc4 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d006      	beq.n	8001be2 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE11_M_allocateEj+0x1e>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6839      	ldr	r1, [r7, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 f8d1 	bl	8001d80 <_ZNSt16allocator_traitsISaI8ObstacleEE8allocateERS1_j>
 8001bde:	4603      	mov	r3, r0
 8001be0:	e000      	b.n	8001be4 <_ZNSt12_Vector_baseI8ObstacleSaIS0_EE11_M_allocateEj+0x20>
 8001be2:	2300      	movs	r3, #0
      }
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <_ZNSt6vectorI8ObstacleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8001bfa:	f88d 4000 	strb.w	r4, [sp]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 f8ca 	bl	8001d9e <_ZNSt6vectorI8ObstacleSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8001c0a:	4603      	mov	r3, r0
      }
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd90      	pop	{r4, r7, pc}

08001c14 <_ZSt34__uninitialized_move_if_noexcept_aIP8ObstacleS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 f8cd 	bl	8001dc2 <_ZSt32__make_move_if_noexcept_iteratorI8ObstacleSt13move_iteratorIPS0_EET0_PT_>
 8001c28:	4604      	mov	r4, r0
 8001c2a:	68b8      	ldr	r0, [r7, #8]
 8001c2c:	f000 f8c9 	bl	8001dc2 <_ZSt32__make_move_if_noexcept_iteratorI8ObstacleSt13move_iteratorIPS0_EET0_PT_>
 8001c30:	4601      	mov	r1, r0
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	4620      	mov	r0, r4
 8001c38:	f000 f8d2 	bl	8001de0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8ObstacleES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8001c3c:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd90      	pop	{r4, r7, pc}

08001c46 <_ZN9__gnu_cxx13new_allocatorI8ObstacleEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <_ZNSt16allocator_traitsISaI8ObstacleEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	68b9      	ldr	r1, [r7, #8]
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 f8c8 	bl	8001e02 <_ZN9__gnu_cxx13new_allocatorI8ObstacleE10deallocateEPS1_j>
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <_ZSt8_DestroyIP8ObstacleEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8001c84:	6839      	ldr	r1, [r7, #0]
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f8ce 	bl	8001e28 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ObstacleEEvT_S4_>
    }
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8001caa:	b5b0      	push	{r4, r5, r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f8cf 	bl	8001e5a <_ZSt12__niter_baseIP8ObstacleSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8001cbc:	4604      	mov	r4, r0
 8001cbe:	68b8      	ldr	r0, [r7, #8]
 8001cc0:	f000 f8cb 	bl	8001e5a <_ZSt12__niter_baseIP8ObstacleSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8001cc4:	4605      	mov	r5, r0
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f8c7 	bl	8001e5a <_ZSt12__niter_baseIP8ObstacleSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4629      	mov	r1, r5
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f000 f8cf 	bl	8001e76 <_ZSt14__copy_move_a1ILb1EP8ObstacleS1_ET1_T0_S3_S2_>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	4619      	mov	r1, r3
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f8db 	bl	8001e98 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>
 8001ce2:	4603      	mov	r3, r0
    }
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bdb0      	pop	{r4, r5, r7, pc}

08001cec <_ZN9__gnu_cxx13new_allocatorI8ObstacleE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6838      	ldr	r0, [r7, #0]
 8001cfe:	4798      	blx	r3
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_ZNKSt6vectorI8ObstacleSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f8f8 	bl	8001f08 <_ZNKSt12_Vector_baseI8ObstacleSaIS0_EE19_M_get_Tp_allocatorEv>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f8d8 	bl	8001ed0 <_ZNSt6vectorI8ObstacleSaIS0_EE11_S_max_sizeERKS1_>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <_ZNKSt6vectorI8ObstacleSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	109b      	asrs	r3, r3, #2
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <_ZNKSt6vectorI8ObstacleSaIS0_EE4sizeEv+0x28>)
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	aaaaaaab 	.word	0xaaaaaaab

08001d58 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d201      	bcs.n	8001d72 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	e000      	b.n	8001d74 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8001d72:	687b      	ldr	r3, [r7, #4]
    }
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_ZNSt16allocator_traitsISaI8ObstacleEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	6839      	ldr	r1, [r7, #0]
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f8d4 	bl	8001f3c <_ZN9__gnu_cxx13new_allocatorI8ObstacleE8allocateEjPKv>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <_ZNSt6vectorI8ObstacleSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f8f0 	bl	8001f98 <_ZSt12__relocate_aIP8ObstacleS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001db8:	4603      	mov	r3, r0
      }
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <_ZSt32__make_move_if_noexcept_iteratorI8ObstacleSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8001dca:	f107 030c 	add.w	r3, r7, #12
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 f8fe 	bl	8001fd2 <_ZNSt13move_iteratorIP8ObstacleEC1ES1_>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP8ObstacleES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f8ff 	bl	8001ff6 <_ZSt18uninitialized_copyISt13move_iteratorIP8ObstacleES2_ET0_T_S5_S4_>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <_ZN9__gnu_cxx13new_allocatorI8ObstacleE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t __attribute__ ((__unused__)))
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	68b8      	ldr	r0, [r7, #8]
 8001e1c:	f001 fdd6 	bl	80039cc <_ZdlPvj>
      }
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ObstacleEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8001e32:	e009      	b.n	8001e48 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ObstacleEEvT_S4_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f8f0 	bl	800201a <_ZSt11__addressofI8ObstacleEPT_RS1_>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 f8f7 	bl	8002030 <_ZSt8_DestroyI8ObstacleEvPT_>
	  for (; __first != __last; ++__first)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	330c      	adds	r3, #12
 8001e46:	607b      	str	r3, [r7, #4]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d1f1      	bne.n	8001e34 <_ZNSt12_Destroy_auxILb0EE9__destroyIP8ObstacleEEvT_S4_+0xc>
	}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <_ZSt12__niter_baseIP8ObstacleSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fbfb 	bl	8001660 <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEE4baseEv>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <_ZSt14__copy_move_a1ILb1EP8ObstacleS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b084      	sub	sp, #16
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 f8df 	bl	800204a <_ZSt14__copy_move_a2ILb1EP8ObstacleS1_ET1_T0_S3_S2_>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>:
    __niter_wrap(_From __from, _To __res)
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ffd9 	bl	8001e5a <_ZSt12__niter_baseIP8ObstacleSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	109b      	asrs	r3, r3, #2
 8001eb0:	4a06      	ldr	r2, [pc, #24]	; (8001ecc <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_+0x34>)
 8001eb2:	fb02 f303 	mul.w	r3, r2, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fc05 	bl	80016cc <_ZNK9__gnu_cxx17__normal_iteratorIP8ObstacleSt6vectorIS1_SaIS1_EEEplEi>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	aaaaaaab 	.word	0xaaaaaaab

08001ed0 <_ZNSt6vectorI8ObstacleSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <_ZNSt6vectorI8ObstacleSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 8001eda:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f8c4 	bl	800206a <_ZNSt16allocator_traitsISaI8ObstacleEE8max_sizeERKS1_>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8001ee6:	f107 0208 	add.w	r2, r7, #8
 8001eea:	f107 030c 	add.w	r3, r7, #12
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 f8c6 	bl	8002082 <_ZSt3minIjERKT_S2_S2_>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	681b      	ldr	r3, [r3, #0]
      }
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	0aaaaaaa 	.word	0x0aaaaaaa

08001f08 <_ZNKSt12_Vector_baseI8ObstacleSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <_ZNK9__gnu_cxx13new_allocatorI8ObstacleE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <_ZNK9__gnu_cxx13new_allocatorI8ObstacleE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	0aaaaaaa 	.word	0x0aaaaaaa

08001f3c <_ZN9__gnu_cxx13new_allocatorI8ObstacleE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f7ff ffe9 	bl	8001f20 <_ZNK9__gnu_cxx13new_allocatorI8ObstacleE11_M_max_sizeEv>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4293      	cmp	r3, r2
 8001f54:	bf8c      	ite	hi
 8001f56:	2301      	movhi	r3, #1
 8001f58:	2300      	movls	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf14      	ite	ne
 8001f60:	2301      	movne	r3, #1
 8001f62:	2300      	moveq	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d007      	beq.n	8001f7a <_ZN9__gnu_cxx13new_allocatorI8ObstacleE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	4a09      	ldr	r2, [pc, #36]	; (8001f94 <_ZN9__gnu_cxx13new_allocatorI8ObstacleE8allocateEjPKv+0x58>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <_ZN9__gnu_cxx13new_allocatorI8ObstacleE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8001f72:	f001 fd41 	bl	80039f8 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8001f76:	f001 fd3c 	bl	80039f2 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 fd23 	bl	80039d0 <_Znwj>
 8001f8a:	4603      	mov	r3, r0
      }
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	15555555 	.word	0x15555555

08001f98 <_ZSt12__relocate_aIP8ObstacleS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8001f98:	b5b0      	push	{r4, r5, r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 f87f 	bl	80020aa <_ZSt12__niter_baseIP8ObstacleET_S2_>
 8001fac:	4604      	mov	r4, r0
 8001fae:	68b8      	ldr	r0, [r7, #8]
 8001fb0:	f000 f87b 	bl	80020aa <_ZSt12__niter_baseIP8ObstacleET_S2_>
 8001fb4:	4605      	mov	r5, r0
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f877 	bl	80020aa <_ZSt12__niter_baseIP8ObstacleET_S2_>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f000 f87c 	bl	80020c0 <_ZSt14__relocate_a_1IP8ObstacleS1_SaIS0_EET0_T_S4_S3_RT1_>
 8001fc8:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bdb0      	pop	{r4, r5, r7, pc}

08001fd2 <_ZNSt13move_iteratorIP8ObstacleEC1ES1_>:
      move_iterator(iterator_type __i)
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8001fdc:	463b      	mov	r3, r7
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f894 	bl	800210c <_ZSt4moveIRP8ObstacleEONSt16remove_referenceIT_E4typeEOS4_>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <_ZSt18uninitialized_copyISt13move_iteratorIP8ObstacleES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8002002:	2301      	movs	r3, #1
 8002004:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f889 	bl	8002122 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP8ObstacleES4_EET0_T_S7_S6_>
 8002010:	4603      	mov	r3, r0
    }
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <_ZSt11__addressofI8ObstacleEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <_ZSt8_DestroyI8ObstacleEvPT_>:
    _Destroy(_Tp* __pointer)
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	4798      	blx	r3
    }
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <_ZSt14__copy_move_a2ILb1EP8ObstacleS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f8b8 	bl	80021d0 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIP8ObstacleS4_EET0_T_S6_S5_>
 8002060:	4603      	mov	r3, r0
    }
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <_ZNSt16allocator_traitsISaI8ObstacleEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f8d6 	bl	8002224 <_ZNK9__gnu_cxx13new_allocatorI8ObstacleE8max_sizeEv>
 8002078:	4603      	mov	r3, r0
      }
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d201      	bcs.n	800209c <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	e000      	b.n	800209e <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800209c:	687b      	ldr	r3, [r7, #4]
    }
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <_ZSt12__niter_baseIP8ObstacleET_S2_>:
    __niter_base(_Iterator __it)
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <_ZSt14__relocate_a_1IP8ObstacleS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80020d2:	e012      	b.n	80020fa <_ZSt14__relocate_a_1IP8ObstacleS1_SaIS0_EET0_T_S4_S3_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 80020d4:	6978      	ldr	r0, [r7, #20]
 80020d6:	f7ff ffa0 	bl	800201a <_ZSt11__addressofI8ObstacleEPT_RS1_>
 80020da:	4604      	mov	r4, r0
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f7ff ff9c 	bl	800201a <_ZSt11__addressofI8ObstacleEPT_RS1_>
 80020e2:	4603      	mov	r3, r0
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	4619      	mov	r1, r3
 80020e8:	4620      	mov	r0, r4
 80020ea:	f000 f8a7 	bl	800223c <_ZSt19__relocate_object_aI8ObstacleS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	330c      	adds	r3, #12
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	330c      	adds	r3, #12
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d1e8      	bne.n	80020d4 <_ZSt14__relocate_a_1IP8ObstacleS1_SaIS0_EET0_T_S4_S3_RT1_+0x14>
      return __cur;
 8002102:	697b      	ldr	r3, [r7, #20]
    }
 8002104:	4618      	mov	r0, r3
 8002106:	371c      	adds	r7, #28
 8002108:	46bd      	mov	sp, r7
 800210a:	bd90      	pop	{r4, r7, pc}

0800210c <_ZSt4moveIRP8ObstacleEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP8ObstacleES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002122:	b590      	push	{r4, r7, lr}
 8002124:	b087      	sub	sp, #28
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8002132:	e015      	b.n	8002160 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP8ObstacleES4_EET0_T_S7_S6_+0x3e>
		std::_Construct(std::__addressof(*__cur), *__first);
 8002134:	6978      	ldr	r0, [r7, #20]
 8002136:	f7ff ff70 	bl	800201a <_ZSt11__addressofI8ObstacleEPT_RS1_>
 800213a:	4604      	mov	r4, r0
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	4618      	mov	r0, r3
 8002142:	f000 f8b8 	bl	80022b6 <_ZNKSt13move_iteratorIP8ObstacleEdeEv>
 8002146:	4603      	mov	r3, r0
 8002148:	4619      	mov	r1, r3
 800214a:	4620      	mov	r0, r4
 800214c:	f000 f8bf 	bl	80022ce <_ZSt10_ConstructI8ObstacleJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	4618      	mov	r0, r3
 8002156:	f000 f89d 	bl	8002294 <_ZNSt13move_iteratorIP8ObstacleEppEv>
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	330c      	adds	r3, #12
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	f107 0208 	add.w	r2, r7, #8
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	4611      	mov	r1, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f881 	bl	8002272 <_ZStneIP8ObstacleEbRKSt13move_iteratorIT_ES6_>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1de      	bne.n	8002134 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP8ObstacleES4_EET0_T_S7_S6_+0x12>
	      return __cur;
 8002176:	697b      	ldr	r3, [r7, #20]
	}
 8002178:	4618      	mov	r0, r3
 800217a:	371c      	adds	r7, #28
 800217c:	46bd      	mov	sp, r7
 800217e:	bd90      	pop	{r4, r7, pc}

08002180 <_ZN10GameObjectaSERKS_>:
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	7a1a      	ldrb	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	721a      	strb	r2, [r3, #8]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	7a5a      	ldrb	r2, [r3, #9]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	725a      	strb	r2, [r3, #9]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <_ZN8ObstacleaSEOS_>:
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ffdd 	bl	8002180 <_ZN10GameObjectaSERKS_>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIP8ObstacleS4_EET0_T_S6_S5_>:
	__copy_m(_II __first, _II __last, _OI __result)
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	109b      	asrs	r3, r3, #2
 80021e4:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIP8ObstacleS4_EET0_T_S6_S5_+0x50>)
 80021e6:	fb02 f303 	mul.w	r3, r2, r3
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e010      	b.n	8002210 <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIP8ObstacleS4_EET0_T_S6_S5_+0x40>
	      *__result = std::move(*__first);
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 f884 	bl	80022fc <_ZSt4moveIR8ObstacleEONSt16remove_referenceIT_E4typeEOS3_>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4619      	mov	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ffd9 	bl	80021b0 <_ZN8ObstacleaSEOS_>
	      ++__first;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	330c      	adds	r3, #12
 8002202:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	330c      	adds	r3, #12
 8002208:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	3b01      	subs	r3, #1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b00      	cmp	r3, #0
 8002214:	dceb      	bgt.n	80021ee <_ZNSt11__copy_moveILb1ELb0ESt26random_access_iterator_tagE8__copy_mIP8ObstacleS4_EET0_T_S6_S5_+0x1e>
	  return __result;
 8002216:	687b      	ldr	r3, [r7, #4]
	}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	aaaaaaab 	.word	0xaaaaaaab

08002224 <_ZNK9__gnu_cxx13new_allocatorI8ObstacleE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff fe77 	bl	8001f20 <_ZNK9__gnu_cxx13new_allocatorI8ObstacleE11_M_max_sizeEv>
 8002232:	4603      	mov	r3, r0
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <_ZSt19__relocate_object_aI8ObstacleS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8002248:	68b8      	ldr	r0, [r7, #8]
 800224a:	f000 f857 	bl	80022fc <_ZSt4moveIR8ObstacleEONSt16remove_referenceIT_E4typeEOS3_>
 800224e:	4603      	mov	r3, r0
 8002250:	461a      	mov	r2, r3
 8002252:	68f9      	ldr	r1, [r7, #12]
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff fa9c 	bl	8001792 <_ZNSt16allocator_traitsISaI8ObstacleEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800225a:	68b8      	ldr	r0, [r7, #8]
 800225c:	f7ff fedd 	bl	800201a <_ZSt11__addressofI8ObstacleEPT_RS1_>
 8002260:	4603      	mov	r3, r0
 8002262:	4619      	mov	r1, r3
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff fc0f 	bl	8001a88 <_ZNSt16allocator_traitsISaI8ObstacleEE7destroyIS0_EEvRS1_PT_>
    }
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <_ZStneIP8ObstacleEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 800227c:	6839      	ldr	r1, [r7, #0]
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f847 	bl	8002312 <_ZSteqIP8ObstacleEbRKSt13move_iteratorIT_ES6_>
 8002284:	4603      	mov	r3, r0
 8002286:	f083 0301 	eor.w	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <_ZNSt13move_iteratorIP8ObstacleEppEv>:
      operator++()
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	++_M_current;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f103 020c 	add.w	r2, r3, #12
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	601a      	str	r2, [r3, #0]
	return *this;
 80022a8:	687b      	ldr	r3, [r7, #4]
      }
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <_ZNKSt13move_iteratorIP8ObstacleEdeEv>:
      operator*() const
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <_ZSt10_ConstructI8ObstacleJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80022ce:	b590      	push	{r4, r7, lr}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 80022d8:	6838      	ldr	r0, [r7, #0]
 80022da:	f7ff fa4f 	bl	800177c <_ZSt7forwardI8ObstacleEOT_RNSt16remove_referenceIS1_E4typeE>
 80022de:	4604      	mov	r4, r0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4619      	mov	r1, r3
 80022e4:	200c      	movs	r0, #12
 80022e6:	f7fe fc1f 	bl	8000b28 <_ZnwjPv>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4621      	mov	r1, r4
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fbd8 	bl	8001aa4 <_ZN8ObstacleC1EOS_>
    }
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd90      	pop	{r4, r7, pc}

080022fc <_ZSt4moveIR8ObstacleEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <_ZSteqIP8ObstacleEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 8002312:	b590      	push	{r4, r7, lr}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f80e 	bl	800233e <_ZNKSt13move_iteratorIP8ObstacleE4baseEv>
 8002322:	4604      	mov	r4, r0
 8002324:	6838      	ldr	r0, [r7, #0]
 8002326:	f000 f80a 	bl	800233e <_ZNKSt13move_iteratorIP8ObstacleE4baseEv>
 800232a:	4603      	mov	r3, r0
 800232c:	429c      	cmp	r4, r3
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bd90      	pop	{r4, r7, pc}

0800233e <_ZNKSt13move_iteratorIP8ObstacleE4baseEv>:
      base() const
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <_ZN4DinoD1Ev>:
class Dino : public GameObject
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	4a05      	ldr	r2, [pc, #20]	; (8002378 <_ZN4DinoD1Ev+0x20>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe fa67 	bl	800083c <_ZN10GameObjectD1Ev>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	08004e70 	.word	0x08004e70

0800237c <_ZN4DinoD0Ev>:
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ffe7 	bl	8002358 <_ZN4DinoD1Ev>
 800238a:	211c      	movs	r1, #28
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f001 fb1d 	bl	80039cc <_ZdlPvj>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <_ZN5ScoreD1Ev>:
class Score : public GameObject {
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	4a05      	ldr	r2, [pc, #20]	; (80023bc <_ZN5ScoreD1Ev+0x20>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe fa45 	bl	800083c <_ZN10GameObjectD1Ev>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	08004e84 	.word	0x08004e84

080023c0 <_ZN5ScoreD0Ev>:
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ffe7 	bl	800239c <_ZN5ScoreD1Ev>
 80023ce:	210c      	movs	r1, #12
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f001 fafb 	bl	80039cc <_ZdlPvj>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <_ZN8ObstacleD1Ev>:
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	4a05      	ldr	r2, [pc, #20]	; (8002400 <_ZN8ObstacleD1Ev+0x20>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe fa23 	bl	800083c <_ZN10GameObjectD1Ev>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	08004e98 	.word	0x08004e98

08002404 <_ZN8ObstacleD0Ev>:
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ffe7 	bl	80023e0 <_ZN8ObstacleD1Ev>
 8002412:	210c      	movs	r1, #12
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f001 fad9 	bl	80039cc <_ZdlPvj>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <HAL_MspInit+0x44>)
 800242c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242e:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <HAL_MspInit+0x44>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6613      	str	r3, [r2, #96]	; 0x60
 8002436:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <HAL_MspInit+0x44>)
 8002438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_MspInit+0x44>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	4a08      	ldr	r2, [pc, #32]	; (8002468 <HAL_MspInit+0x44>)
 8002448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244c:	6593      	str	r3, [r2, #88]	; 0x58
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_MspInit+0x44>)
 8002450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000

0800246c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002470:	e7fe      	b.n	8002470 <NMI_Handler+0x4>

08002472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002476:	e7fe      	b.n	8002476 <HardFault_Handler+0x4>

08002478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800247c:	e7fe      	b.n	800247c <MemManage_Handler+0x4>

0800247e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002482:	e7fe      	b.n	8002482 <BusFault_Handler+0x4>

08002484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002488:	e7fe      	b.n	8002488 <UsageFault_Handler+0x4>

0800248a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024b8:	f000 f958 	bl	800276c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}

080024c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return 1;
 80024c4:	2301      	movs	r3, #1
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <_kill>:

int _kill(int pid, int sig)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024da:	f001 fd95 	bl	8004008 <__errno>
 80024de:	4603      	mov	r3, r0
 80024e0:	2216      	movs	r2, #22
 80024e2:	601a      	str	r2, [r3, #0]
  return -1;
 80024e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <_exit>:

void _exit (int status)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ffe7 	bl	80024d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002502:	e7fe      	b.n	8002502 <_exit+0x12>

08002504 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	e00a      	b.n	800252c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002516:	f3af 8000 	nop.w
 800251a:	4601      	mov	r1, r0
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	60ba      	str	r2, [r7, #8]
 8002522:	b2ca      	uxtb	r2, r1
 8002524:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3301      	adds	r3, #1
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	429a      	cmp	r2, r3
 8002532:	dbf0      	blt.n	8002516 <_read+0x12>
  }

  return len;
 8002534:	687b      	ldr	r3, [r7, #4]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b086      	sub	sp, #24
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	e009      	b.n	8002564 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	60ba      	str	r2, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	3301      	adds	r3, #1
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	429a      	cmp	r2, r3
 800256a:	dbf1      	blt.n	8002550 <_write+0x12>
  }
  return len;
 800256c:	687b      	ldr	r3, [r7, #4]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <_close>:

int _close(int file)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800257e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800259e:	605a      	str	r2, [r3, #4]
  return 0;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <_isatty>:

int _isatty(int file)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025b6:	2301      	movs	r3, #1
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025e8:	4a14      	ldr	r2, [pc, #80]	; (800263c <_sbrk+0x5c>)
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <_sbrk+0x60>)
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025f4:	4b13      	ldr	r3, [pc, #76]	; (8002644 <_sbrk+0x64>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d102      	bne.n	8002602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <_sbrk+0x64>)
 80025fe:	4a12      	ldr	r2, [pc, #72]	; (8002648 <_sbrk+0x68>)
 8002600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <_sbrk+0x64>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	429a      	cmp	r2, r3
 800260e:	d207      	bcs.n	8002620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002610:	f001 fcfa 	bl	8004008 <__errno>
 8002614:	4603      	mov	r3, r0
 8002616:	220c      	movs	r2, #12
 8002618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800261a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800261e:	e009      	b.n	8002634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002620:	4b08      	ldr	r3, [pc, #32]	; (8002644 <_sbrk+0x64>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002626:	4b07      	ldr	r3, [pc, #28]	; (8002644 <_sbrk+0x64>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	4a05      	ldr	r2, [pc, #20]	; (8002644 <_sbrk+0x64>)
 8002630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002632:	68fb      	ldr	r3, [r7, #12]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20018000 	.word	0x20018000
 8002640:	00000400 	.word	0x00000400
 8002644:	200000c4 	.word	0x200000c4
 8002648:	20000220 	.word	0x20000220

0800264c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <SystemInit+0x20>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	4a05      	ldr	r2, [pc, #20]	; (800266c <SystemInit+0x20>)
 8002658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800265c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002670:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002674:	f7ff ffea 	bl	800264c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002678:	480c      	ldr	r0, [pc, #48]	; (80026ac <LoopForever+0x6>)
  ldr r1, =_edata
 800267a:	490d      	ldr	r1, [pc, #52]	; (80026b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800267c:	4a0d      	ldr	r2, [pc, #52]	; (80026b4 <LoopForever+0xe>)
  movs r3, #0
 800267e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002680:	e002      	b.n	8002688 <LoopCopyDataInit>

08002682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002686:	3304      	adds	r3, #4

08002688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800268a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800268c:	d3f9      	bcc.n	8002682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800268e:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002690:	4c0a      	ldr	r4, [pc, #40]	; (80026bc <LoopForever+0x16>)
  movs r3, #0
 8002692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002694:	e001      	b.n	800269a <LoopFillZerobss>

08002696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002698:	3204      	adds	r2, #4

0800269a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800269a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800269c:	d3fb      	bcc.n	8002696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800269e:	f001 fcb9 	bl	8004014 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026a2:	f7fe fd4b 	bl	800113c <main>

080026a6 <LoopForever>:

LoopForever:
    b LoopForever
 80026a6:	e7fe      	b.n	80026a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80026a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80026b4:	08004fe0 	.word	0x08004fe0
  ldr r2, =_sbss
 80026b8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80026bc:	2000021c 	.word	0x2000021c

080026c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026c0:	e7fe      	b.n	80026c0 <ADC1_2_IRQHandler>

080026c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026cc:	2003      	movs	r0, #3
 80026ce:	f000 f943 	bl	8002958 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026d2:	200f      	movs	r0, #15
 80026d4:	f000 f80e 	bl	80026f4 <HAL_InitTick>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	71fb      	strb	r3, [r7, #7]
 80026e2:	e001      	b.n	80026e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026e4:	f7ff fe9e 	bl	8002424 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026e8:	79fb      	ldrb	r3, [r7, #7]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002700:	4b17      	ldr	r3, [pc, #92]	; (8002760 <HAL_InitTick+0x6c>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d023      	beq.n	8002750 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <HAL_InitTick+0x70>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b14      	ldr	r3, [pc, #80]	; (8002760 <HAL_InitTick+0x6c>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	4619      	mov	r1, r3
 8002712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002716:	fbb3 f3f1 	udiv	r3, r3, r1
 800271a:	fbb2 f3f3 	udiv	r3, r2, r3
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f941 	bl	80029a6 <HAL_SYSTICK_Config>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10f      	bne.n	800274a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b0f      	cmp	r3, #15
 800272e:	d809      	bhi.n	8002744 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002730:	2200      	movs	r2, #0
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002738:	f000 f919 	bl	800296e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800273c:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <HAL_InitTick+0x74>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e007      	b.n	8002754 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
 8002748:	e004      	b.n	8002754 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	e001      	b.n	8002754 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002754:	7bfb      	ldrb	r3, [r7, #15]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000040 	.word	0x20000040
 8002764:	20000038 	.word	0x20000038
 8002768:	2000003c 	.word	0x2000003c

0800276c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_IncTick+0x20>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_IncTick+0x24>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4413      	add	r3, r2
 800277c:	4a04      	ldr	r2, [pc, #16]	; (8002790 <HAL_IncTick+0x24>)
 800277e:	6013      	str	r3, [r2, #0]
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000040 	.word	0x20000040
 8002790:	200000c8 	.word	0x200000c8

08002794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return uwTick;
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <HAL_GetTick+0x14>)
 800279a:	681b      	ldr	r3, [r3, #0]
}
 800279c:	4618      	mov	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	200000c8 	.word	0x200000c8

080027ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b4:	f7ff ffee 	bl	8002794 <HAL_GetTick>
 80027b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027c4:	d005      	beq.n	80027d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027c6:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <HAL_Delay+0x44>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4413      	add	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027d2:	bf00      	nop
 80027d4:	f7ff ffde 	bl	8002794 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d8f7      	bhi.n	80027d4 <HAL_Delay+0x28>
  {
  }
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000040 	.word	0x20000040

080027f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <__NVIC_SetPriorityGrouping+0x44>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002810:	4013      	ands	r3, r2
 8002812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800281c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002826:	4a04      	ldr	r2, [pc, #16]	; (8002838 <__NVIC_SetPriorityGrouping+0x44>)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	60d3      	str	r3, [r2, #12]
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <__NVIC_GetPriorityGrouping+0x18>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	0a1b      	lsrs	r3, r3, #8
 8002846:	f003 0307 	and.w	r3, r3, #7
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	6039      	str	r1, [r7, #0]
 8002862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002868:	2b00      	cmp	r3, #0
 800286a:	db0a      	blt.n	8002882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	b2da      	uxtb	r2, r3
 8002870:	490c      	ldr	r1, [pc, #48]	; (80028a4 <__NVIC_SetPriority+0x4c>)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	0112      	lsls	r2, r2, #4
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	440b      	add	r3, r1
 800287c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002880:	e00a      	b.n	8002898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	b2da      	uxtb	r2, r3
 8002886:	4908      	ldr	r1, [pc, #32]	; (80028a8 <__NVIC_SetPriority+0x50>)
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	3b04      	subs	r3, #4
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	440b      	add	r3, r1
 8002896:	761a      	strb	r2, [r3, #24]
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000e100 	.word	0xe000e100
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b089      	sub	sp, #36	; 0x24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f1c3 0307 	rsb	r3, r3, #7
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	bf28      	it	cs
 80028ca:	2304      	movcs	r3, #4
 80028cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3304      	adds	r3, #4
 80028d2:	2b06      	cmp	r3, #6
 80028d4:	d902      	bls.n	80028dc <NVIC_EncodePriority+0x30>
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3b03      	subs	r3, #3
 80028da:	e000      	b.n	80028de <NVIC_EncodePriority+0x32>
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43da      	mvns	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	401a      	ands	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	fa01 f303 	lsl.w	r3, r1, r3
 80028fe:	43d9      	mvns	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002904:	4313      	orrs	r3, r2
         );
}
 8002906:	4618      	mov	r0, r3
 8002908:	3724      	adds	r7, #36	; 0x24
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3b01      	subs	r3, #1
 8002920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002924:	d301      	bcc.n	800292a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002926:	2301      	movs	r3, #1
 8002928:	e00f      	b.n	800294a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800292a:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <SysTick_Config+0x40>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002932:	210f      	movs	r1, #15
 8002934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002938:	f7ff ff8e 	bl	8002858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <SysTick_Config+0x40>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002942:	4b04      	ldr	r3, [pc, #16]	; (8002954 <SysTick_Config+0x40>)
 8002944:	2207      	movs	r2, #7
 8002946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	e000e010 	.word	0xe000e010

08002958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff ff47 	bl	80027f4 <__NVIC_SetPriorityGrouping>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b086      	sub	sp, #24
 8002972:	af00      	add	r7, sp, #0
 8002974:	4603      	mov	r3, r0
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002980:	f7ff ff5c 	bl	800283c <__NVIC_GetPriorityGrouping>
 8002984:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	6978      	ldr	r0, [r7, #20]
 800298c:	f7ff ff8e 	bl	80028ac <NVIC_EncodePriority>
 8002990:	4602      	mov	r2, r0
 8002992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002996:	4611      	mov	r1, r2
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff5d 	bl	8002858 <__NVIC_SetPriority>
}
 800299e:	bf00      	nop
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ffb0 	bl	8002914 <SysTick_Config>
 80029b4:	4603      	mov	r3, r0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ce:	e17f      	b.n	8002cd0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2101      	movs	r1, #1
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	4013      	ands	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8171 	beq.w	8002cca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d005      	beq.n	8002a00 <HAL_GPIO_Init+0x40>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d130      	bne.n	8002a62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a36:	2201      	movs	r2, #1
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4013      	ands	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	091b      	lsrs	r3, r3, #4
 8002a4c:	f003 0201 	and.w	r2, r3, #1
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d118      	bne.n	8002aa0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a74:	2201      	movs	r2, #1
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	08db      	lsrs	r3, r3, #3
 8002a8a:	f003 0201 	and.w	r2, r3, #1
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d017      	beq.n	8002adc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d123      	bne.n	8002b30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	08da      	lsrs	r2, r3, #3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3208      	adds	r2, #8
 8002af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	220f      	movs	r2, #15
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	08da      	lsrs	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3208      	adds	r2, #8
 8002b2a:	6939      	ldr	r1, [r7, #16]
 8002b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4013      	ands	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0203 	and.w	r2, r3, #3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80ac 	beq.w	8002cca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b72:	4b5f      	ldr	r3, [pc, #380]	; (8002cf0 <HAL_GPIO_Init+0x330>)
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	4a5e      	ldr	r2, [pc, #376]	; (8002cf0 <HAL_GPIO_Init+0x330>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b7e:	4b5c      	ldr	r3, [pc, #368]	; (8002cf0 <HAL_GPIO_Init+0x330>)
 8002b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b8a:	4a5a      	ldr	r2, [pc, #360]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	3302      	adds	r3, #2
 8002b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	220f      	movs	r2, #15
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bb4:	d025      	beq.n	8002c02 <HAL_GPIO_Init+0x242>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a4f      	ldr	r2, [pc, #316]	; (8002cf8 <HAL_GPIO_Init+0x338>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d01f      	beq.n	8002bfe <HAL_GPIO_Init+0x23e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4e      	ldr	r2, [pc, #312]	; (8002cfc <HAL_GPIO_Init+0x33c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d019      	beq.n	8002bfa <HAL_GPIO_Init+0x23a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4d      	ldr	r2, [pc, #308]	; (8002d00 <HAL_GPIO_Init+0x340>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <HAL_GPIO_Init+0x236>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a4c      	ldr	r2, [pc, #304]	; (8002d04 <HAL_GPIO_Init+0x344>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00d      	beq.n	8002bf2 <HAL_GPIO_Init+0x232>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a4b      	ldr	r2, [pc, #300]	; (8002d08 <HAL_GPIO_Init+0x348>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d007      	beq.n	8002bee <HAL_GPIO_Init+0x22e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a4a      	ldr	r2, [pc, #296]	; (8002d0c <HAL_GPIO_Init+0x34c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d101      	bne.n	8002bea <HAL_GPIO_Init+0x22a>
 8002be6:	2306      	movs	r3, #6
 8002be8:	e00c      	b.n	8002c04 <HAL_GPIO_Init+0x244>
 8002bea:	2307      	movs	r3, #7
 8002bec:	e00a      	b.n	8002c04 <HAL_GPIO_Init+0x244>
 8002bee:	2305      	movs	r3, #5
 8002bf0:	e008      	b.n	8002c04 <HAL_GPIO_Init+0x244>
 8002bf2:	2304      	movs	r3, #4
 8002bf4:	e006      	b.n	8002c04 <HAL_GPIO_Init+0x244>
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e004      	b.n	8002c04 <HAL_GPIO_Init+0x244>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e002      	b.n	8002c04 <HAL_GPIO_Init+0x244>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_GPIO_Init+0x244>
 8002c02:	2300      	movs	r3, #0
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	f002 0203 	and.w	r2, r2, #3
 8002c0a:	0092      	lsls	r2, r2, #2
 8002c0c:	4093      	lsls	r3, r2
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c14:	4937      	ldr	r1, [pc, #220]	; (8002cf4 <HAL_GPIO_Init+0x334>)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c22:	4b3b      	ldr	r3, [pc, #236]	; (8002d10 <HAL_GPIO_Init+0x350>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c46:	4a32      	ldr	r2, [pc, #200]	; (8002d10 <HAL_GPIO_Init+0x350>)
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c4c:	4b30      	ldr	r3, [pc, #192]	; (8002d10 <HAL_GPIO_Init+0x350>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c70:	4a27      	ldr	r2, [pc, #156]	; (8002d10 <HAL_GPIO_Init+0x350>)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c76:	4b26      	ldr	r3, [pc, #152]	; (8002d10 <HAL_GPIO_Init+0x350>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4013      	ands	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c9a:	4a1d      	ldr	r2, [pc, #116]	; (8002d10 <HAL_GPIO_Init+0x350>)
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_GPIO_Init+0x350>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cc4:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <HAL_GPIO_Init+0x350>)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f47f ae78 	bne.w	80029d0 <HAL_GPIO_Init+0x10>
  }
}
 8002ce0:	bf00      	nop
 8002ce2:	bf00      	nop
 8002ce4:	371c      	adds	r7, #28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40010000 	.word	0x40010000
 8002cf8:	48000400 	.word	0x48000400
 8002cfc:	48000800 	.word	0x48000800
 8002d00:	48000c00 	.word	0x48000c00
 8002d04:	48001000 	.word	0x48001000
 8002d08:	48001400 	.word	0x48001400
 8002d0c:	48001800 	.word	0x48001800
 8002d10:	40010400 	.word	0x40010400

08002d14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	887b      	ldrh	r3, [r7, #2]
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
 8002d30:	e001      	b.n	8002d36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d32:	2300      	movs	r3, #0
 8002d34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	807b      	strh	r3, [r7, #2]
 8002d50:	4613      	mov	r3, r2
 8002d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d54:	787b      	ldrb	r3, [r7, #1]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d60:	e002      	b.n	8002d68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d62:	887a      	ldrh	r2, [r7, #2]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d78:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <HAL_PWREx_GetVoltageRange+0x18>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40007000 	.word	0x40007000

08002d90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d9e:	d130      	bne.n	8002e02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002da0:	4b23      	ldr	r3, [pc, #140]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dac:	d038      	beq.n	8002e20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dae:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002db6:	4a1e      	ldr	r2, [pc, #120]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002db8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dbc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002dbe:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2232      	movs	r2, #50	; 0x32
 8002dc4:	fb02 f303 	mul.w	r3, r2, r3
 8002dc8:	4a1b      	ldr	r2, [pc, #108]	; (8002e38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	0c9b      	lsrs	r3, r3, #18
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dd4:	e002      	b.n	8002ddc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ddc:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002de8:	d102      	bne.n	8002df0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1f2      	bne.n	8002dd6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002df0:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfc:	d110      	bne.n	8002e20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e00f      	b.n	8002e22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e0e:	d007      	beq.n	8002e20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e10:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e18:	4a05      	ldr	r2, [pc, #20]	; (8002e30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40007000 	.word	0x40007000
 8002e34:	20000038 	.word	0x20000038
 8002e38:	431bde83 	.word	0x431bde83

08002e3c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e3ca      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e4e:	4b97      	ldr	r3, [pc, #604]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e58:	4b94      	ldr	r3, [pc, #592]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80e4 	beq.w	8003038 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <HAL_RCC_OscConfig+0x4a>
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b0c      	cmp	r3, #12
 8002e7a:	f040 808b 	bne.w	8002f94 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	f040 8087 	bne.w	8002f94 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e86:	4b89      	ldr	r3, [pc, #548]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d005      	beq.n	8002e9e <HAL_RCC_OscConfig+0x62>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e3a2      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1a      	ldr	r2, [r3, #32]
 8002ea2:	4b82      	ldr	r3, [pc, #520]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d004      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x7c>
 8002eae:	4b7f      	ldr	r3, [pc, #508]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eb6:	e005      	b.n	8002ec4 <HAL_RCC_OscConfig+0x88>
 8002eb8:	4b7c      	ldr	r3, [pc, #496]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d223      	bcs.n	8002f10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fd1d 	bl	800390c <RCC_SetFlashLatencyFromMSIRange>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e383      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002edc:	4b73      	ldr	r3, [pc, #460]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a72      	ldr	r2, [pc, #456]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002ee2:	f043 0308 	orr.w	r3, r3, #8
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	4b70      	ldr	r3, [pc, #448]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	496d      	ldr	r1, [pc, #436]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002efa:	4b6c      	ldr	r3, [pc, #432]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	4968      	ldr	r1, [pc, #416]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	604b      	str	r3, [r1, #4]
 8002f0e:	e025      	b.n	8002f5c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f10:	4b66      	ldr	r3, [pc, #408]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a65      	ldr	r2, [pc, #404]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002f16:	f043 0308 	orr.w	r3, r3, #8
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	4b63      	ldr	r3, [pc, #396]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4960      	ldr	r1, [pc, #384]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f2e:	4b5f      	ldr	r3, [pc, #380]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	021b      	lsls	r3, r3, #8
 8002f3c:	495b      	ldr	r1, [pc, #364]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d109      	bne.n	8002f5c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 fcdd 	bl	800390c <RCC_SetFlashLatencyFromMSIRange>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e343      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f5c:	f000 fc4a 	bl	80037f4 <HAL_RCC_GetSysClockFreq>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b52      	ldr	r3, [pc, #328]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	4950      	ldr	r1, [pc, #320]	; (80030b0 <HAL_RCC_OscConfig+0x274>)
 8002f6e:	5ccb      	ldrb	r3, [r1, r3]
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
 8002f78:	4a4e      	ldr	r2, [pc, #312]	; (80030b4 <HAL_RCC_OscConfig+0x278>)
 8002f7a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f7c:	4b4e      	ldr	r3, [pc, #312]	; (80030b8 <HAL_RCC_OscConfig+0x27c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fbb7 	bl	80026f4 <HAL_InitTick>
 8002f86:	4603      	mov	r3, r0
 8002f88:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d052      	beq.n	8003036 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	e327      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d032      	beq.n	8003002 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f9c:	4b43      	ldr	r3, [pc, #268]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a42      	ldr	r2, [pc, #264]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fa8:	f7ff fbf4 	bl	8002794 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fb0:	f7ff fbf0 	bl	8002794 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e310      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fc2:	4b3a      	ldr	r3, [pc, #232]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fce:	4b37      	ldr	r3, [pc, #220]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a36      	ldr	r2, [pc, #216]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002fd4:	f043 0308 	orr.w	r3, r3, #8
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	4b34      	ldr	r3, [pc, #208]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4931      	ldr	r1, [pc, #196]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fec:	4b2f      	ldr	r3, [pc, #188]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	492c      	ldr	r1, [pc, #176]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]
 8003000:	e01a      	b.n	8003038 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003002:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a29      	ldr	r2, [pc, #164]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8003008:	f023 0301 	bic.w	r3, r3, #1
 800300c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800300e:	f7ff fbc1 	bl	8002794 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003016:	f7ff fbbd 	bl	8002794 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e2dd      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003028:	4b20      	ldr	r3, [pc, #128]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f0      	bne.n	8003016 <HAL_RCC_OscConfig+0x1da>
 8003034:	e000      	b.n	8003038 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003036:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d074      	beq.n	800312e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b08      	cmp	r3, #8
 8003048:	d005      	beq.n	8003056 <HAL_RCC_OscConfig+0x21a>
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b0c      	cmp	r3, #12
 800304e:	d10e      	bne.n	800306e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d10b      	bne.n	800306e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d064      	beq.n	800312c <HAL_RCC_OscConfig+0x2f0>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d160      	bne.n	800312c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e2ba      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003076:	d106      	bne.n	8003086 <HAL_RCC_OscConfig+0x24a>
 8003078:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 800307e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	e026      	b.n	80030d4 <HAL_RCC_OscConfig+0x298>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800308e:	d115      	bne.n	80030bc <HAL_RCC_OscConfig+0x280>
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a05      	ldr	r2, [pc, #20]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 8003096:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	4b03      	ldr	r3, [pc, #12]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a02      	ldr	r2, [pc, #8]	; (80030ac <HAL_RCC_OscConfig+0x270>)
 80030a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	e014      	b.n	80030d4 <HAL_RCC_OscConfig+0x298>
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000
 80030b0:	08004eb8 	.word	0x08004eb8
 80030b4:	20000038 	.word	0x20000038
 80030b8:	2000003c 	.word	0x2000003c
 80030bc:	4ba0      	ldr	r3, [pc, #640]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a9f      	ldr	r2, [pc, #636]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 80030c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	4b9d      	ldr	r3, [pc, #628]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a9c      	ldr	r2, [pc, #624]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 80030ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d013      	beq.n	8003104 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7ff fb5a 	bl	8002794 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e4:	f7ff fb56 	bl	8002794 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b64      	cmp	r3, #100	; 0x64
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e276      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030f6:	4b92      	ldr	r3, [pc, #584]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x2a8>
 8003102:	e014      	b.n	800312e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7ff fb46 	bl	8002794 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800310c:	f7ff fb42 	bl	8002794 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	; 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e262      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800311e:	4b88      	ldr	r3, [pc, #544]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x2d0>
 800312a:	e000      	b.n	800312e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d060      	beq.n	80031fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	2b04      	cmp	r3, #4
 800313e:	d005      	beq.n	800314c <HAL_RCC_OscConfig+0x310>
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2b0c      	cmp	r3, #12
 8003144:	d119      	bne.n	800317a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d116      	bne.n	800317a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800314c:	4b7c      	ldr	r3, [pc, #496]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_OscConfig+0x328>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e23f      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003164:	4b76      	ldr	r3, [pc, #472]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	061b      	lsls	r3, r3, #24
 8003172:	4973      	ldr	r1, [pc, #460]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003178:	e040      	b.n	80031fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d023      	beq.n	80031ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003182:	4b6f      	ldr	r3, [pc, #444]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a6e      	ldr	r2, [pc, #440]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 8003188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7ff fb01 	bl	8002794 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003196:	f7ff fafd 	bl	8002794 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e21d      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a8:	4b65      	ldr	r3, [pc, #404]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b4:	4b62      	ldr	r3, [pc, #392]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	061b      	lsls	r3, r3, #24
 80031c2:	495f      	ldr	r1, [pc, #380]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	604b      	str	r3, [r1, #4]
 80031c8:	e018      	b.n	80031fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ca:	4b5d      	ldr	r3, [pc, #372]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a5c      	ldr	r2, [pc, #368]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 80031d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7ff fadd 	bl	8002794 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031de:	f7ff fad9 	bl	8002794 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e1f9      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031f0:	4b53      	ldr	r3, [pc, #332]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f0      	bne.n	80031de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b00      	cmp	r3, #0
 8003206:	d03c      	beq.n	8003282 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d01c      	beq.n	800324a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003210:	4b4b      	ldr	r3, [pc, #300]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 8003212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003216:	4a4a      	ldr	r2, [pc, #296]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003220:	f7ff fab8 	bl	8002794 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003228:	f7ff fab4 	bl	8002794 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e1d4      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800323a:	4b41      	ldr	r3, [pc, #260]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 800323c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0ef      	beq.n	8003228 <HAL_RCC_OscConfig+0x3ec>
 8003248:	e01b      	b.n	8003282 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800324a:	4b3d      	ldr	r3, [pc, #244]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 800324c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003250:	4a3b      	ldr	r2, [pc, #236]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325a:	f7ff fa9b 	bl	8002794 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003262:	f7ff fa97 	bl	8002794 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e1b7      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003274:	4b32      	ldr	r3, [pc, #200]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 8003276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1ef      	bne.n	8003262 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 80a6 	beq.w	80033dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003290:	2300      	movs	r3, #0
 8003292:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003294:	4b2a      	ldr	r3, [pc, #168]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10d      	bne.n	80032bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a0:	4b27      	ldr	r3, [pc, #156]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 80032a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a4:	4a26      	ldr	r2, [pc, #152]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 80032a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032aa:	6593      	str	r3, [r2, #88]	; 0x58
 80032ac:	4b24      	ldr	r3, [pc, #144]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 80032ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b8:	2301      	movs	r3, #1
 80032ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032bc:	4b21      	ldr	r3, [pc, #132]	; (8003344 <HAL_RCC_OscConfig+0x508>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d118      	bne.n	80032fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032c8:	4b1e      	ldr	r3, [pc, #120]	; (8003344 <HAL_RCC_OscConfig+0x508>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <HAL_RCC_OscConfig+0x508>)
 80032ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d4:	f7ff fa5e 	bl	8002794 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032dc:	f7ff fa5a 	bl	8002794 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e17a      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ee:	4b15      	ldr	r3, [pc, #84]	; (8003344 <HAL_RCC_OscConfig+0x508>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d108      	bne.n	8003314 <HAL_RCC_OscConfig+0x4d8>
 8003302:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003308:	4a0d      	ldr	r2, [pc, #52]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003312:	e029      	b.n	8003368 <HAL_RCC_OscConfig+0x52c>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b05      	cmp	r3, #5
 800331a:	d115      	bne.n	8003348 <HAL_RCC_OscConfig+0x50c>
 800331c:	4b08      	ldr	r3, [pc, #32]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003322:	4a07      	ldr	r2, [pc, #28]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 8003324:	f043 0304 	orr.w	r3, r3, #4
 8003328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800332c:	4b04      	ldr	r3, [pc, #16]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003332:	4a03      	ldr	r2, [pc, #12]	; (8003340 <HAL_RCC_OscConfig+0x504>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800333c:	e014      	b.n	8003368 <HAL_RCC_OscConfig+0x52c>
 800333e:	bf00      	nop
 8003340:	40021000 	.word	0x40021000
 8003344:	40007000 	.word	0x40007000
 8003348:	4b9c      	ldr	r3, [pc, #624]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334e:	4a9b      	ldr	r2, [pc, #620]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003358:	4b98      	ldr	r3, [pc, #608]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335e:	4a97      	ldr	r2, [pc, #604]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 8003360:	f023 0304 	bic.w	r3, r3, #4
 8003364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d016      	beq.n	800339e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7ff fa10 	bl	8002794 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003376:	e00a      	b.n	800338e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003378:	f7ff fa0c 	bl	8002794 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	; 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e12a      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800338e:	4b8b      	ldr	r3, [pc, #556]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0ed      	beq.n	8003378 <HAL_RCC_OscConfig+0x53c>
 800339c:	e015      	b.n	80033ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339e:	f7ff f9f9 	bl	8002794 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a6:	f7ff f9f5 	bl	8002794 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e113      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033bc:	4b7f      	ldr	r3, [pc, #508]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1ed      	bne.n	80033a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033ca:	7ffb      	ldrb	r3, [r7, #31]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d105      	bne.n	80033dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d0:	4b7a      	ldr	r3, [pc, #488]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	4a79      	ldr	r2, [pc, #484]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 80033d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80fe 	beq.w	80035e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	f040 80d0 	bne.w	8003590 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033f0:	4b72      	ldr	r3, [pc, #456]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f003 0203 	and.w	r2, r3, #3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	429a      	cmp	r2, r3
 8003402:	d130      	bne.n	8003466 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	3b01      	subs	r3, #1
 8003410:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003412:	429a      	cmp	r2, r3
 8003414:	d127      	bne.n	8003466 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003420:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003422:	429a      	cmp	r2, r3
 8003424:	d11f      	bne.n	8003466 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003430:	2a07      	cmp	r2, #7
 8003432:	bf14      	ite	ne
 8003434:	2201      	movne	r2, #1
 8003436:	2200      	moveq	r2, #0
 8003438:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800343a:	4293      	cmp	r3, r2
 800343c:	d113      	bne.n	8003466 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	3b01      	subs	r3, #1
 800344c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d109      	bne.n	8003466 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	085b      	lsrs	r3, r3, #1
 800345e:	3b01      	subs	r3, #1
 8003460:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003462:	429a      	cmp	r2, r3
 8003464:	d06e      	beq.n	8003544 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b0c      	cmp	r3, #12
 800346a:	d069      	beq.n	8003540 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800346c:	4b53      	ldr	r3, [pc, #332]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d105      	bne.n	8003484 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003478:	4b50      	ldr	r3, [pc, #320]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0ad      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003488:	4b4c      	ldr	r3, [pc, #304]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a4b      	ldr	r2, [pc, #300]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 800348e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003492:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003494:	f7ff f97e 	bl	8002794 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349c:	f7ff f97a 	bl	8002794 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e09a      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ae:	4b43      	ldr	r3, [pc, #268]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ba:	4b40      	ldr	r3, [pc, #256]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	4b40      	ldr	r3, [pc, #256]	; (80035c0 <HAL_RCC_OscConfig+0x784>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034ca:	3a01      	subs	r2, #1
 80034cc:	0112      	lsls	r2, r2, #4
 80034ce:	4311      	orrs	r1, r2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034d4:	0212      	lsls	r2, r2, #8
 80034d6:	4311      	orrs	r1, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034dc:	0852      	lsrs	r2, r2, #1
 80034de:	3a01      	subs	r2, #1
 80034e0:	0552      	lsls	r2, r2, #21
 80034e2:	4311      	orrs	r1, r2
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034e8:	0852      	lsrs	r2, r2, #1
 80034ea:	3a01      	subs	r2, #1
 80034ec:	0652      	lsls	r2, r2, #25
 80034ee:	4311      	orrs	r1, r2
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034f4:	0912      	lsrs	r2, r2, #4
 80034f6:	0452      	lsls	r2, r2, #17
 80034f8:	430a      	orrs	r2, r1
 80034fa:	4930      	ldr	r1, [pc, #192]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003500:	4b2e      	ldr	r3, [pc, #184]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a2d      	ldr	r2, [pc, #180]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 8003506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800350a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800350c:	4b2b      	ldr	r3, [pc, #172]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4a2a      	ldr	r2, [pc, #168]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 8003512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003516:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003518:	f7ff f93c 	bl	8002794 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003520:	f7ff f938 	bl	8002794 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e058      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003532:	4b22      	ldr	r3, [pc, #136]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800353e:	e050      	b.n	80035e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e04f      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003544:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d148      	bne.n	80035e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003550:	4b1a      	ldr	r3, [pc, #104]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a19      	ldr	r2, [pc, #100]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 8003556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800355a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800355c:	4b17      	ldr	r3, [pc, #92]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4a16      	ldr	r2, [pc, #88]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 8003562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003566:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003568:	f7ff f914 	bl	8002794 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003570:	f7ff f910 	bl	8002794 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e030      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003582:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0x734>
 800358e:	e028      	b.n	80035e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2b0c      	cmp	r3, #12
 8003594:	d023      	beq.n	80035de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003596:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a08      	ldr	r2, [pc, #32]	; (80035bc <HAL_RCC_OscConfig+0x780>)
 800359c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a2:	f7ff f8f7 	bl	8002794 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a8:	e00c      	b.n	80035c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035aa:	f7ff f8f3 	bl	8002794 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d905      	bls.n	80035c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e013      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
 80035bc:	40021000 	.word	0x40021000
 80035c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c4:	4b09      	ldr	r3, [pc, #36]	; (80035ec <HAL_RCC_OscConfig+0x7b0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1ec      	bne.n	80035aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_RCC_OscConfig+0x7b0>)
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	4905      	ldr	r1, [pc, #20]	; (80035ec <HAL_RCC_OscConfig+0x7b0>)
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCC_OscConfig+0x7b4>)
 80035d8:	4013      	ands	r3, r2
 80035da:	60cb      	str	r3, [r1, #12]
 80035dc:	e001      	b.n	80035e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40021000 	.word	0x40021000
 80035f0:	feeefffc 	.word	0xfeeefffc

080035f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0e7      	b.n	80037d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003608:	4b75      	ldr	r3, [pc, #468]	; (80037e0 <HAL_RCC_ClockConfig+0x1ec>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d910      	bls.n	8003638 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b72      	ldr	r3, [pc, #456]	; (80037e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 0207 	bic.w	r2, r3, #7
 800361e:	4970      	ldr	r1, [pc, #448]	; (80037e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b6e      	ldr	r3, [pc, #440]	; (80037e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0cf      	b.n	80037d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d010      	beq.n	8003666 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	4b66      	ldr	r3, [pc, #408]	; (80037e4 <HAL_RCC_ClockConfig+0x1f0>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003650:	429a      	cmp	r2, r3
 8003652:	d908      	bls.n	8003666 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003654:	4b63      	ldr	r3, [pc, #396]	; (80037e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4960      	ldr	r1, [pc, #384]	; (80037e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003662:	4313      	orrs	r3, r2
 8003664:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d04c      	beq.n	800370c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b03      	cmp	r3, #3
 8003678:	d107      	bne.n	800368a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367a:	4b5a      	ldr	r3, [pc, #360]	; (80037e4 <HAL_RCC_ClockConfig+0x1f0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d121      	bne.n	80036ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e0a6      	b.n	80037d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d107      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003692:	4b54      	ldr	r3, [pc, #336]	; (80037e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d115      	bne.n	80036ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e09a      	b.n	80037d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d107      	bne.n	80036ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036aa:	4b4e      	ldr	r3, [pc, #312]	; (80037e4 <HAL_RCC_ClockConfig+0x1f0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e08e      	b.n	80037d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036ba:	4b4a      	ldr	r3, [pc, #296]	; (80037e4 <HAL_RCC_ClockConfig+0x1f0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e086      	b.n	80037d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036ca:	4b46      	ldr	r3, [pc, #280]	; (80037e4 <HAL_RCC_ClockConfig+0x1f0>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f023 0203 	bic.w	r2, r3, #3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4943      	ldr	r1, [pc, #268]	; (80037e4 <HAL_RCC_ClockConfig+0x1f0>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036dc:	f7ff f85a 	bl	8002794 <HAL_GetTick>
 80036e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e2:	e00a      	b.n	80036fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e4:	f7ff f856 	bl	8002794 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e06e      	b.n	80037d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fa:	4b3a      	ldr	r3, [pc, #232]	; (80037e4 <HAL_RCC_ClockConfig+0x1f0>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 020c 	and.w	r2, r3, #12
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	429a      	cmp	r2, r3
 800370a:	d1eb      	bne.n	80036e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d010      	beq.n	800373a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	4b31      	ldr	r3, [pc, #196]	; (80037e4 <HAL_RCC_ClockConfig+0x1f0>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003724:	429a      	cmp	r2, r3
 8003726:	d208      	bcs.n	800373a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003728:	4b2e      	ldr	r3, [pc, #184]	; (80037e4 <HAL_RCC_ClockConfig+0x1f0>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	492b      	ldr	r1, [pc, #172]	; (80037e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800373a:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <HAL_RCC_ClockConfig+0x1ec>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d210      	bcs.n	800376a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003748:	4b25      	ldr	r3, [pc, #148]	; (80037e0 <HAL_RCC_ClockConfig+0x1ec>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f023 0207 	bic.w	r2, r3, #7
 8003750:	4923      	ldr	r1, [pc, #140]	; (80037e0 <HAL_RCC_ClockConfig+0x1ec>)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	4313      	orrs	r3, r2
 8003756:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003758:	4b21      	ldr	r3, [pc, #132]	; (80037e0 <HAL_RCC_ClockConfig+0x1ec>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d001      	beq.n	800376a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e036      	b.n	80037d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003776:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	4918      	ldr	r1, [pc, #96]	; (80037e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003784:	4313      	orrs	r3, r2
 8003786:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d009      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003794:	4b13      	ldr	r3, [pc, #76]	; (80037e4 <HAL_RCC_ClockConfig+0x1f0>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4910      	ldr	r1, [pc, #64]	; (80037e4 <HAL_RCC_ClockConfig+0x1f0>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037a8:	f000 f824 	bl	80037f4 <HAL_RCC_GetSysClockFreq>
 80037ac:	4602      	mov	r2, r0
 80037ae:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <HAL_RCC_ClockConfig+0x1f0>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	490b      	ldr	r1, [pc, #44]	; (80037e8 <HAL_RCC_ClockConfig+0x1f4>)
 80037ba:	5ccb      	ldrb	r3, [r1, r3]
 80037bc:	f003 031f 	and.w	r3, r3, #31
 80037c0:	fa22 f303 	lsr.w	r3, r2, r3
 80037c4:	4a09      	ldr	r2, [pc, #36]	; (80037ec <HAL_RCC_ClockConfig+0x1f8>)
 80037c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037c8:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <HAL_RCC_ClockConfig+0x1fc>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe ff91 	bl	80026f4 <HAL_InitTick>
 80037d2:	4603      	mov	r3, r0
 80037d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80037d6:	7afb      	ldrb	r3, [r7, #11]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40022000 	.word	0x40022000
 80037e4:	40021000 	.word	0x40021000
 80037e8:	08004eb8 	.word	0x08004eb8
 80037ec:	20000038 	.word	0x20000038
 80037f0:	2000003c 	.word	0x2000003c

080037f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b089      	sub	sp, #36	; 0x24
 80037f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	2300      	movs	r3, #0
 8003800:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003802:	4b3e      	ldr	r3, [pc, #248]	; (80038fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800380c:	4b3b      	ldr	r3, [pc, #236]	; (80038fc <HAL_RCC_GetSysClockFreq+0x108>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0x34>
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	2b0c      	cmp	r3, #12
 8003820:	d121      	bne.n	8003866 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d11e      	bne.n	8003866 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003828:	4b34      	ldr	r3, [pc, #208]	; (80038fc <HAL_RCC_GetSysClockFreq+0x108>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	d107      	bne.n	8003844 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003834:	4b31      	ldr	r3, [pc, #196]	; (80038fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800383a:	0a1b      	lsrs	r3, r3, #8
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	e005      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003844:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003850:	4a2b      	ldr	r2, [pc, #172]	; (8003900 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003858:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10d      	bne.n	800387c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003864:	e00a      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	2b04      	cmp	r3, #4
 800386a:	d102      	bne.n	8003872 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800386c:	4b25      	ldr	r3, [pc, #148]	; (8003904 <HAL_RCC_GetSysClockFreq+0x110>)
 800386e:	61bb      	str	r3, [r7, #24]
 8003870:	e004      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b08      	cmp	r3, #8
 8003876:	d101      	bne.n	800387c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003878:	4b23      	ldr	r3, [pc, #140]	; (8003908 <HAL_RCC_GetSysClockFreq+0x114>)
 800387a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	2b0c      	cmp	r3, #12
 8003880:	d134      	bne.n	80038ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003882:	4b1e      	ldr	r3, [pc, #120]	; (80038fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d003      	beq.n	800389a <HAL_RCC_GetSysClockFreq+0xa6>
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b03      	cmp	r3, #3
 8003896:	d003      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0xac>
 8003898:	e005      	b.n	80038a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800389a:	4b1a      	ldr	r3, [pc, #104]	; (8003904 <HAL_RCC_GetSysClockFreq+0x110>)
 800389c:	617b      	str	r3, [r7, #20]
      break;
 800389e:	e005      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038a0:	4b19      	ldr	r3, [pc, #100]	; (8003908 <HAL_RCC_GetSysClockFreq+0x114>)
 80038a2:	617b      	str	r3, [r7, #20]
      break;
 80038a4:	e002      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	617b      	str	r3, [r7, #20]
      break;
 80038aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038ac:	4b13      	ldr	r3, [pc, #76]	; (80038fc <HAL_RCC_GetSysClockFreq+0x108>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	3301      	adds	r3, #1
 80038b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038ba:	4b10      	ldr	r3, [pc, #64]	; (80038fc <HAL_RCC_GetSysClockFreq+0x108>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	0a1b      	lsrs	r3, r3, #8
 80038c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	fb03 f202 	mul.w	r2, r3, r2
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038d2:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <HAL_RCC_GetSysClockFreq+0x108>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	0e5b      	lsrs	r3, r3, #25
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	3301      	adds	r3, #1
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038ec:	69bb      	ldr	r3, [r7, #24]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3724      	adds	r7, #36	; 0x24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000
 8003900:	08004ec8 	.word	0x08004ec8
 8003904:	00f42400 	.word	0x00f42400
 8003908:	007a1200 	.word	0x007a1200

0800390c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003914:	2300      	movs	r3, #0
 8003916:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003918:	4b2a      	ldr	r3, [pc, #168]	; (80039c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800391a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003924:	f7ff fa26 	bl	8002d74 <HAL_PWREx_GetVoltageRange>
 8003928:	6178      	str	r0, [r7, #20]
 800392a:	e014      	b.n	8003956 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800392c:	4b25      	ldr	r3, [pc, #148]	; (80039c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800392e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003930:	4a24      	ldr	r2, [pc, #144]	; (80039c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003936:	6593      	str	r3, [r2, #88]	; 0x58
 8003938:	4b22      	ldr	r3, [pc, #136]	; (80039c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003944:	f7ff fa16 	bl	8002d74 <HAL_PWREx_GetVoltageRange>
 8003948:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800394a:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800394c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394e:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003954:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800395c:	d10b      	bne.n	8003976 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b80      	cmp	r3, #128	; 0x80
 8003962:	d919      	bls.n	8003998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2ba0      	cmp	r3, #160	; 0xa0
 8003968:	d902      	bls.n	8003970 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800396a:	2302      	movs	r3, #2
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	e013      	b.n	8003998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003970:	2301      	movs	r3, #1
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	e010      	b.n	8003998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b80      	cmp	r3, #128	; 0x80
 800397a:	d902      	bls.n	8003982 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800397c:	2303      	movs	r3, #3
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	e00a      	b.n	8003998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b80      	cmp	r3, #128	; 0x80
 8003986:	d102      	bne.n	800398e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003988:	2302      	movs	r3, #2
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	e004      	b.n	8003998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b70      	cmp	r3, #112	; 0x70
 8003992:	d101      	bne.n	8003998 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003994:	2301      	movs	r3, #1
 8003996:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f023 0207 	bic.w	r2, r3, #7
 80039a0:	4909      	ldr	r1, [pc, #36]	; (80039c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039a8:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d001      	beq.n	80039ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40021000 	.word	0x40021000
 80039c8:	40022000 	.word	0x40022000

080039cc <_ZdlPvj>:
 80039cc:	f000 b81a 	b.w	8003a04 <_ZdlPv>

080039d0 <_Znwj>:
 80039d0:	2801      	cmp	r0, #1
 80039d2:	bf38      	it	cc
 80039d4:	2001      	movcc	r0, #1
 80039d6:	b510      	push	{r4, lr}
 80039d8:	4604      	mov	r4, r0
 80039da:	4620      	mov	r0, r4
 80039dc:	f000 f824 	bl	8003a28 <malloc>
 80039e0:	b100      	cbz	r0, 80039e4 <_Znwj+0x14>
 80039e2:	bd10      	pop	{r4, pc}
 80039e4:	f000 f810 	bl	8003a08 <_ZSt15get_new_handlerv>
 80039e8:	b908      	cbnz	r0, 80039ee <_Znwj+0x1e>
 80039ea:	f000 f815 	bl	8003a18 <abort>
 80039ee:	4780      	blx	r0
 80039f0:	e7f3      	b.n	80039da <_Znwj+0xa>

080039f2 <_ZSt17__throw_bad_allocv>:
 80039f2:	b508      	push	{r3, lr}
 80039f4:	f000 f810 	bl	8003a18 <abort>

080039f8 <_ZSt28__throw_bad_array_new_lengthv>:
 80039f8:	b508      	push	{r3, lr}
 80039fa:	f000 f80d 	bl	8003a18 <abort>

080039fe <_ZSt20__throw_length_errorPKc>:
 80039fe:	b508      	push	{r3, lr}
 8003a00:	f000 f80a 	bl	8003a18 <abort>

08003a04 <_ZdlPv>:
 8003a04:	f000 b818 	b.w	8003a38 <free>

08003a08 <_ZSt15get_new_handlerv>:
 8003a08:	4b02      	ldr	r3, [pc, #8]	; (8003a14 <_ZSt15get_new_handlerv+0xc>)
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	f3bf 8f5b 	dmb	ish
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	200000cc 	.word	0x200000cc

08003a18 <abort>:
 8003a18:	b508      	push	{r3, lr}
 8003a1a:	2006      	movs	r0, #6
 8003a1c:	f000 fa82 	bl	8003f24 <raise>
 8003a20:	2001      	movs	r0, #1
 8003a22:	f7fe fd65 	bl	80024f0 <_exit>
	...

08003a28 <malloc>:
 8003a28:	4b02      	ldr	r3, [pc, #8]	; (8003a34 <malloc+0xc>)
 8003a2a:	4601      	mov	r1, r0
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	f000 b82b 	b.w	8003a88 <_malloc_r>
 8003a32:	bf00      	nop
 8003a34:	2000009c 	.word	0x2000009c

08003a38 <free>:
 8003a38:	4b02      	ldr	r3, [pc, #8]	; (8003a44 <free+0xc>)
 8003a3a:	4601      	mov	r1, r0
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	f000 bb45 	b.w	80040cc <_free_r>
 8003a42:	bf00      	nop
 8003a44:	2000009c 	.word	0x2000009c

08003a48 <sbrk_aligned>:
 8003a48:	b570      	push	{r4, r5, r6, lr}
 8003a4a:	4e0e      	ldr	r6, [pc, #56]	; (8003a84 <sbrk_aligned+0x3c>)
 8003a4c:	460c      	mov	r4, r1
 8003a4e:	6831      	ldr	r1, [r6, #0]
 8003a50:	4605      	mov	r5, r0
 8003a52:	b911      	cbnz	r1, 8003a5a <sbrk_aligned+0x12>
 8003a54:	f000 fab6 	bl	8003fc4 <_sbrk_r>
 8003a58:	6030      	str	r0, [r6, #0]
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	4628      	mov	r0, r5
 8003a5e:	f000 fab1 	bl	8003fc4 <_sbrk_r>
 8003a62:	1c43      	adds	r3, r0, #1
 8003a64:	d00a      	beq.n	8003a7c <sbrk_aligned+0x34>
 8003a66:	1cc4      	adds	r4, r0, #3
 8003a68:	f024 0403 	bic.w	r4, r4, #3
 8003a6c:	42a0      	cmp	r0, r4
 8003a6e:	d007      	beq.n	8003a80 <sbrk_aligned+0x38>
 8003a70:	1a21      	subs	r1, r4, r0
 8003a72:	4628      	mov	r0, r5
 8003a74:	f000 faa6 	bl	8003fc4 <_sbrk_r>
 8003a78:	3001      	adds	r0, #1
 8003a7a:	d101      	bne.n	8003a80 <sbrk_aligned+0x38>
 8003a7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003a80:	4620      	mov	r0, r4
 8003a82:	bd70      	pop	{r4, r5, r6, pc}
 8003a84:	200000d4 	.word	0x200000d4

08003a88 <_malloc_r>:
 8003a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a8c:	1ccd      	adds	r5, r1, #3
 8003a8e:	f025 0503 	bic.w	r5, r5, #3
 8003a92:	3508      	adds	r5, #8
 8003a94:	2d0c      	cmp	r5, #12
 8003a96:	bf38      	it	cc
 8003a98:	250c      	movcc	r5, #12
 8003a9a:	2d00      	cmp	r5, #0
 8003a9c:	4607      	mov	r7, r0
 8003a9e:	db01      	blt.n	8003aa4 <_malloc_r+0x1c>
 8003aa0:	42a9      	cmp	r1, r5
 8003aa2:	d905      	bls.n	8003ab0 <_malloc_r+0x28>
 8003aa4:	230c      	movs	r3, #12
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	2600      	movs	r6, #0
 8003aaa:	4630      	mov	r0, r6
 8003aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ab0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b84 <_malloc_r+0xfc>
 8003ab4:	f000 f868 	bl	8003b88 <__malloc_lock>
 8003ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8003abc:	461c      	mov	r4, r3
 8003abe:	bb5c      	cbnz	r4, 8003b18 <_malloc_r+0x90>
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	4638      	mov	r0, r7
 8003ac4:	f7ff ffc0 	bl	8003a48 <sbrk_aligned>
 8003ac8:	1c43      	adds	r3, r0, #1
 8003aca:	4604      	mov	r4, r0
 8003acc:	d155      	bne.n	8003b7a <_malloc_r+0xf2>
 8003ace:	f8d8 4000 	ldr.w	r4, [r8]
 8003ad2:	4626      	mov	r6, r4
 8003ad4:	2e00      	cmp	r6, #0
 8003ad6:	d145      	bne.n	8003b64 <_malloc_r+0xdc>
 8003ad8:	2c00      	cmp	r4, #0
 8003ada:	d048      	beq.n	8003b6e <_malloc_r+0xe6>
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	4631      	mov	r1, r6
 8003ae0:	4638      	mov	r0, r7
 8003ae2:	eb04 0903 	add.w	r9, r4, r3
 8003ae6:	f000 fa6d 	bl	8003fc4 <_sbrk_r>
 8003aea:	4581      	cmp	r9, r0
 8003aec:	d13f      	bne.n	8003b6e <_malloc_r+0xe6>
 8003aee:	6821      	ldr	r1, [r4, #0]
 8003af0:	1a6d      	subs	r5, r5, r1
 8003af2:	4629      	mov	r1, r5
 8003af4:	4638      	mov	r0, r7
 8003af6:	f7ff ffa7 	bl	8003a48 <sbrk_aligned>
 8003afa:	3001      	adds	r0, #1
 8003afc:	d037      	beq.n	8003b6e <_malloc_r+0xe6>
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	442b      	add	r3, r5
 8003b02:	6023      	str	r3, [r4, #0]
 8003b04:	f8d8 3000 	ldr.w	r3, [r8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d038      	beq.n	8003b7e <_malloc_r+0xf6>
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	42a2      	cmp	r2, r4
 8003b10:	d12b      	bne.n	8003b6a <_malloc_r+0xe2>
 8003b12:	2200      	movs	r2, #0
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	e00f      	b.n	8003b38 <_malloc_r+0xb0>
 8003b18:	6822      	ldr	r2, [r4, #0]
 8003b1a:	1b52      	subs	r2, r2, r5
 8003b1c:	d41f      	bmi.n	8003b5e <_malloc_r+0xd6>
 8003b1e:	2a0b      	cmp	r2, #11
 8003b20:	d917      	bls.n	8003b52 <_malloc_r+0xca>
 8003b22:	1961      	adds	r1, r4, r5
 8003b24:	42a3      	cmp	r3, r4
 8003b26:	6025      	str	r5, [r4, #0]
 8003b28:	bf18      	it	ne
 8003b2a:	6059      	strne	r1, [r3, #4]
 8003b2c:	6863      	ldr	r3, [r4, #4]
 8003b2e:	bf08      	it	eq
 8003b30:	f8c8 1000 	streq.w	r1, [r8]
 8003b34:	5162      	str	r2, [r4, r5]
 8003b36:	604b      	str	r3, [r1, #4]
 8003b38:	4638      	mov	r0, r7
 8003b3a:	f104 060b 	add.w	r6, r4, #11
 8003b3e:	f000 f829 	bl	8003b94 <__malloc_unlock>
 8003b42:	f026 0607 	bic.w	r6, r6, #7
 8003b46:	1d23      	adds	r3, r4, #4
 8003b48:	1af2      	subs	r2, r6, r3
 8003b4a:	d0ae      	beq.n	8003aaa <_malloc_r+0x22>
 8003b4c:	1b9b      	subs	r3, r3, r6
 8003b4e:	50a3      	str	r3, [r4, r2]
 8003b50:	e7ab      	b.n	8003aaa <_malloc_r+0x22>
 8003b52:	42a3      	cmp	r3, r4
 8003b54:	6862      	ldr	r2, [r4, #4]
 8003b56:	d1dd      	bne.n	8003b14 <_malloc_r+0x8c>
 8003b58:	f8c8 2000 	str.w	r2, [r8]
 8003b5c:	e7ec      	b.n	8003b38 <_malloc_r+0xb0>
 8003b5e:	4623      	mov	r3, r4
 8003b60:	6864      	ldr	r4, [r4, #4]
 8003b62:	e7ac      	b.n	8003abe <_malloc_r+0x36>
 8003b64:	4634      	mov	r4, r6
 8003b66:	6876      	ldr	r6, [r6, #4]
 8003b68:	e7b4      	b.n	8003ad4 <_malloc_r+0x4c>
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	e7cc      	b.n	8003b08 <_malloc_r+0x80>
 8003b6e:	230c      	movs	r3, #12
 8003b70:	603b      	str	r3, [r7, #0]
 8003b72:	4638      	mov	r0, r7
 8003b74:	f000 f80e 	bl	8003b94 <__malloc_unlock>
 8003b78:	e797      	b.n	8003aaa <_malloc_r+0x22>
 8003b7a:	6025      	str	r5, [r4, #0]
 8003b7c:	e7dc      	b.n	8003b38 <_malloc_r+0xb0>
 8003b7e:	605b      	str	r3, [r3, #4]
 8003b80:	deff      	udf	#255	; 0xff
 8003b82:	bf00      	nop
 8003b84:	200000d0 	.word	0x200000d0

08003b88 <__malloc_lock>:
 8003b88:	4801      	ldr	r0, [pc, #4]	; (8003b90 <__malloc_lock+0x8>)
 8003b8a:	f000 ba68 	b.w	800405e <__retarget_lock_acquire_recursive>
 8003b8e:	bf00      	nop
 8003b90:	20000218 	.word	0x20000218

08003b94 <__malloc_unlock>:
 8003b94:	4801      	ldr	r0, [pc, #4]	; (8003b9c <__malloc_unlock+0x8>)
 8003b96:	f000 ba63 	b.w	8004060 <__retarget_lock_release_recursive>
 8003b9a:	bf00      	nop
 8003b9c:	20000218 	.word	0x20000218

08003ba0 <srand>:
 8003ba0:	b538      	push	{r3, r4, r5, lr}
 8003ba2:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <srand+0x44>)
 8003ba4:	681d      	ldr	r5, [r3, #0]
 8003ba6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003ba8:	4604      	mov	r4, r0
 8003baa:	b9b3      	cbnz	r3, 8003bda <srand+0x3a>
 8003bac:	2018      	movs	r0, #24
 8003bae:	f7ff ff3b 	bl	8003a28 <malloc>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	6328      	str	r0, [r5, #48]	; 0x30
 8003bb6:	b920      	cbnz	r0, 8003bc2 <srand+0x22>
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <srand+0x48>)
 8003bba:	480c      	ldr	r0, [pc, #48]	; (8003bec <srand+0x4c>)
 8003bbc:	2146      	movs	r1, #70	; 0x46
 8003bbe:	f000 fa67 	bl	8004090 <__assert_func>
 8003bc2:	490b      	ldr	r1, [pc, #44]	; (8003bf0 <srand+0x50>)
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <srand+0x54>)
 8003bc6:	e9c0 1300 	strd	r1, r3, [r0]
 8003bca:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <srand+0x58>)
 8003bcc:	6083      	str	r3, [r0, #8]
 8003bce:	230b      	movs	r3, #11
 8003bd0:	8183      	strh	r3, [r0, #12]
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003bda:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003bdc:	2200      	movs	r2, #0
 8003bde:	611c      	str	r4, [r3, #16]
 8003be0:	615a      	str	r2, [r3, #20]
 8003be2:	bd38      	pop	{r3, r4, r5, pc}
 8003be4:	2000009c 	.word	0x2000009c
 8003be8:	08004ef8 	.word	0x08004ef8
 8003bec:	08004f0f 	.word	0x08004f0f
 8003bf0:	abcd330e 	.word	0xabcd330e
 8003bf4:	e66d1234 	.word	0xe66d1234
 8003bf8:	0005deec 	.word	0x0005deec

08003bfc <rand>:
 8003bfc:	4b16      	ldr	r3, [pc, #88]	; (8003c58 <rand+0x5c>)
 8003bfe:	b510      	push	{r4, lr}
 8003c00:	681c      	ldr	r4, [r3, #0]
 8003c02:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c04:	b9b3      	cbnz	r3, 8003c34 <rand+0x38>
 8003c06:	2018      	movs	r0, #24
 8003c08:	f7ff ff0e 	bl	8003a28 <malloc>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6320      	str	r0, [r4, #48]	; 0x30
 8003c10:	b920      	cbnz	r0, 8003c1c <rand+0x20>
 8003c12:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <rand+0x60>)
 8003c14:	4812      	ldr	r0, [pc, #72]	; (8003c60 <rand+0x64>)
 8003c16:	2152      	movs	r1, #82	; 0x52
 8003c18:	f000 fa3a 	bl	8004090 <__assert_func>
 8003c1c:	4911      	ldr	r1, [pc, #68]	; (8003c64 <rand+0x68>)
 8003c1e:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <rand+0x6c>)
 8003c20:	e9c0 1300 	strd	r1, r3, [r0]
 8003c24:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <rand+0x70>)
 8003c26:	6083      	str	r3, [r0, #8]
 8003c28:	230b      	movs	r3, #11
 8003c2a:	8183      	strh	r3, [r0, #12]
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	2001      	movs	r0, #1
 8003c30:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003c34:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003c36:	480e      	ldr	r0, [pc, #56]	; (8003c70 <rand+0x74>)
 8003c38:	690b      	ldr	r3, [r1, #16]
 8003c3a:	694c      	ldr	r4, [r1, #20]
 8003c3c:	4a0d      	ldr	r2, [pc, #52]	; (8003c74 <rand+0x78>)
 8003c3e:	4358      	muls	r0, r3
 8003c40:	fb02 0004 	mla	r0, r2, r4, r0
 8003c44:	fba3 3202 	umull	r3, r2, r3, r2
 8003c48:	3301      	adds	r3, #1
 8003c4a:	eb40 0002 	adc.w	r0, r0, r2
 8003c4e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8003c52:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003c56:	bd10      	pop	{r4, pc}
 8003c58:	2000009c 	.word	0x2000009c
 8003c5c:	08004ef8 	.word	0x08004ef8
 8003c60:	08004f0f 	.word	0x08004f0f
 8003c64:	abcd330e 	.word	0xabcd330e
 8003c68:	e66d1234 	.word	0xe66d1234
 8003c6c:	0005deec 	.word	0x0005deec
 8003c70:	5851f42d 	.word	0x5851f42d
 8003c74:	4c957f2d 	.word	0x4c957f2d

08003c78 <std>:
 8003c78:	2300      	movs	r3, #0
 8003c7a:	b510      	push	{r4, lr}
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8003c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c86:	6083      	str	r3, [r0, #8]
 8003c88:	8181      	strh	r1, [r0, #12]
 8003c8a:	6643      	str	r3, [r0, #100]	; 0x64
 8003c8c:	81c2      	strh	r2, [r0, #14]
 8003c8e:	6183      	str	r3, [r0, #24]
 8003c90:	4619      	mov	r1, r3
 8003c92:	2208      	movs	r2, #8
 8003c94:	305c      	adds	r0, #92	; 0x5c
 8003c96:	f000 f914 	bl	8003ec2 <memset>
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <std+0x58>)
 8003c9c:	6263      	str	r3, [r4, #36]	; 0x24
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <std+0x5c>)
 8003ca0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ca2:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <std+0x60>)
 8003ca4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	; (8003cdc <std+0x64>)
 8003ca8:	6323      	str	r3, [r4, #48]	; 0x30
 8003caa:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <std+0x68>)
 8003cac:	6224      	str	r4, [r4, #32]
 8003cae:	429c      	cmp	r4, r3
 8003cb0:	d006      	beq.n	8003cc0 <std+0x48>
 8003cb2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003cb6:	4294      	cmp	r4, r2
 8003cb8:	d002      	beq.n	8003cc0 <std+0x48>
 8003cba:	33d0      	adds	r3, #208	; 0xd0
 8003cbc:	429c      	cmp	r4, r3
 8003cbe:	d105      	bne.n	8003ccc <std+0x54>
 8003cc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cc8:	f000 b9c8 	b.w	800405c <__retarget_lock_init_recursive>
 8003ccc:	bd10      	pop	{r4, pc}
 8003cce:	bf00      	nop
 8003cd0:	08003e3d 	.word	0x08003e3d
 8003cd4:	08003e5f 	.word	0x08003e5f
 8003cd8:	08003e97 	.word	0x08003e97
 8003cdc:	08003ebb 	.word	0x08003ebb
 8003ce0:	200000d8 	.word	0x200000d8

08003ce4 <stdio_exit_handler>:
 8003ce4:	4a02      	ldr	r2, [pc, #8]	; (8003cf0 <stdio_exit_handler+0xc>)
 8003ce6:	4903      	ldr	r1, [pc, #12]	; (8003cf4 <stdio_exit_handler+0x10>)
 8003ce8:	4803      	ldr	r0, [pc, #12]	; (8003cf8 <stdio_exit_handler+0x14>)
 8003cea:	f000 b869 	b.w	8003dc0 <_fwalk_sglue>
 8003cee:	bf00      	nop
 8003cf0:	20000044 	.word	0x20000044
 8003cf4:	08004841 	.word	0x08004841
 8003cf8:	20000050 	.word	0x20000050

08003cfc <cleanup_stdio>:
 8003cfc:	6841      	ldr	r1, [r0, #4]
 8003cfe:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <cleanup_stdio+0x34>)
 8003d00:	4299      	cmp	r1, r3
 8003d02:	b510      	push	{r4, lr}
 8003d04:	4604      	mov	r4, r0
 8003d06:	d001      	beq.n	8003d0c <cleanup_stdio+0x10>
 8003d08:	f000 fd9a 	bl	8004840 <_fflush_r>
 8003d0c:	68a1      	ldr	r1, [r4, #8]
 8003d0e:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <cleanup_stdio+0x38>)
 8003d10:	4299      	cmp	r1, r3
 8003d12:	d002      	beq.n	8003d1a <cleanup_stdio+0x1e>
 8003d14:	4620      	mov	r0, r4
 8003d16:	f000 fd93 	bl	8004840 <_fflush_r>
 8003d1a:	68e1      	ldr	r1, [r4, #12]
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <cleanup_stdio+0x3c>)
 8003d1e:	4299      	cmp	r1, r3
 8003d20:	d004      	beq.n	8003d2c <cleanup_stdio+0x30>
 8003d22:	4620      	mov	r0, r4
 8003d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d28:	f000 bd8a 	b.w	8004840 <_fflush_r>
 8003d2c:	bd10      	pop	{r4, pc}
 8003d2e:	bf00      	nop
 8003d30:	200000d8 	.word	0x200000d8
 8003d34:	20000140 	.word	0x20000140
 8003d38:	200001a8 	.word	0x200001a8

08003d3c <global_stdio_init.part.0>:
 8003d3c:	b510      	push	{r4, lr}
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <global_stdio_init.part.0+0x30>)
 8003d40:	4c0b      	ldr	r4, [pc, #44]	; (8003d70 <global_stdio_init.part.0+0x34>)
 8003d42:	4a0c      	ldr	r2, [pc, #48]	; (8003d74 <global_stdio_init.part.0+0x38>)
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	4620      	mov	r0, r4
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2104      	movs	r1, #4
 8003d4c:	f7ff ff94 	bl	8003c78 <std>
 8003d50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003d54:	2201      	movs	r2, #1
 8003d56:	2109      	movs	r1, #9
 8003d58:	f7ff ff8e 	bl	8003c78 <std>
 8003d5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d60:	2202      	movs	r2, #2
 8003d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d66:	2112      	movs	r1, #18
 8003d68:	f7ff bf86 	b.w	8003c78 <std>
 8003d6c:	20000210 	.word	0x20000210
 8003d70:	200000d8 	.word	0x200000d8
 8003d74:	08003ce5 	.word	0x08003ce5

08003d78 <__sfp_lock_acquire>:
 8003d78:	4801      	ldr	r0, [pc, #4]	; (8003d80 <__sfp_lock_acquire+0x8>)
 8003d7a:	f000 b970 	b.w	800405e <__retarget_lock_acquire_recursive>
 8003d7e:	bf00      	nop
 8003d80:	20000219 	.word	0x20000219

08003d84 <__sfp_lock_release>:
 8003d84:	4801      	ldr	r0, [pc, #4]	; (8003d8c <__sfp_lock_release+0x8>)
 8003d86:	f000 b96b 	b.w	8004060 <__retarget_lock_release_recursive>
 8003d8a:	bf00      	nop
 8003d8c:	20000219 	.word	0x20000219

08003d90 <__sinit>:
 8003d90:	b510      	push	{r4, lr}
 8003d92:	4604      	mov	r4, r0
 8003d94:	f7ff fff0 	bl	8003d78 <__sfp_lock_acquire>
 8003d98:	6a23      	ldr	r3, [r4, #32]
 8003d9a:	b11b      	cbz	r3, 8003da4 <__sinit+0x14>
 8003d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003da0:	f7ff bff0 	b.w	8003d84 <__sfp_lock_release>
 8003da4:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <__sinit+0x28>)
 8003da6:	6223      	str	r3, [r4, #32]
 8003da8:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <__sinit+0x2c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1f5      	bne.n	8003d9c <__sinit+0xc>
 8003db0:	f7ff ffc4 	bl	8003d3c <global_stdio_init.part.0>
 8003db4:	e7f2      	b.n	8003d9c <__sinit+0xc>
 8003db6:	bf00      	nop
 8003db8:	08003cfd 	.word	0x08003cfd
 8003dbc:	20000210 	.word	0x20000210

08003dc0 <_fwalk_sglue>:
 8003dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dc4:	4607      	mov	r7, r0
 8003dc6:	4688      	mov	r8, r1
 8003dc8:	4614      	mov	r4, r2
 8003dca:	2600      	movs	r6, #0
 8003dcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003dd0:	f1b9 0901 	subs.w	r9, r9, #1
 8003dd4:	d505      	bpl.n	8003de2 <_fwalk_sglue+0x22>
 8003dd6:	6824      	ldr	r4, [r4, #0]
 8003dd8:	2c00      	cmp	r4, #0
 8003dda:	d1f7      	bne.n	8003dcc <_fwalk_sglue+0xc>
 8003ddc:	4630      	mov	r0, r6
 8003dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003de2:	89ab      	ldrh	r3, [r5, #12]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d907      	bls.n	8003df8 <_fwalk_sglue+0x38>
 8003de8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003dec:	3301      	adds	r3, #1
 8003dee:	d003      	beq.n	8003df8 <_fwalk_sglue+0x38>
 8003df0:	4629      	mov	r1, r5
 8003df2:	4638      	mov	r0, r7
 8003df4:	47c0      	blx	r8
 8003df6:	4306      	orrs	r6, r0
 8003df8:	3568      	adds	r5, #104	; 0x68
 8003dfa:	e7e9      	b.n	8003dd0 <_fwalk_sglue+0x10>

08003dfc <siprintf>:
 8003dfc:	b40e      	push	{r1, r2, r3}
 8003dfe:	b500      	push	{lr}
 8003e00:	b09c      	sub	sp, #112	; 0x70
 8003e02:	ab1d      	add	r3, sp, #116	; 0x74
 8003e04:	9002      	str	r0, [sp, #8]
 8003e06:	9006      	str	r0, [sp, #24]
 8003e08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e0c:	4809      	ldr	r0, [pc, #36]	; (8003e34 <siprintf+0x38>)
 8003e0e:	9107      	str	r1, [sp, #28]
 8003e10:	9104      	str	r1, [sp, #16]
 8003e12:	4909      	ldr	r1, [pc, #36]	; (8003e38 <siprintf+0x3c>)
 8003e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e18:	9105      	str	r1, [sp, #20]
 8003e1a:	6800      	ldr	r0, [r0, #0]
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	a902      	add	r1, sp, #8
 8003e20:	f000 f9fa 	bl	8004218 <_svfiprintf_r>
 8003e24:	9b02      	ldr	r3, [sp, #8]
 8003e26:	2200      	movs	r2, #0
 8003e28:	701a      	strb	r2, [r3, #0]
 8003e2a:	b01c      	add	sp, #112	; 0x70
 8003e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e30:	b003      	add	sp, #12
 8003e32:	4770      	bx	lr
 8003e34:	2000009c 	.word	0x2000009c
 8003e38:	ffff0208 	.word	0xffff0208

08003e3c <__sread>:
 8003e3c:	b510      	push	{r4, lr}
 8003e3e:	460c      	mov	r4, r1
 8003e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e44:	f000 f898 	bl	8003f78 <_read_r>
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	bfab      	itete	ge
 8003e4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8003e50:	181b      	addge	r3, r3, r0
 8003e52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e56:	bfac      	ite	ge
 8003e58:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e5a:	81a3      	strhlt	r3, [r4, #12]
 8003e5c:	bd10      	pop	{r4, pc}

08003e5e <__swrite>:
 8003e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e62:	461f      	mov	r7, r3
 8003e64:	898b      	ldrh	r3, [r1, #12]
 8003e66:	05db      	lsls	r3, r3, #23
 8003e68:	4605      	mov	r5, r0
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	4616      	mov	r6, r2
 8003e6e:	d505      	bpl.n	8003e7c <__swrite+0x1e>
 8003e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e74:	2302      	movs	r3, #2
 8003e76:	2200      	movs	r2, #0
 8003e78:	f000 f86c 	bl	8003f54 <_lseek_r>
 8003e7c:	89a3      	ldrh	r3, [r4, #12]
 8003e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e86:	81a3      	strh	r3, [r4, #12]
 8003e88:	4632      	mov	r2, r6
 8003e8a:	463b      	mov	r3, r7
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e92:	f000 b8a7 	b.w	8003fe4 <_write_r>

08003e96 <__sseek>:
 8003e96:	b510      	push	{r4, lr}
 8003e98:	460c      	mov	r4, r1
 8003e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e9e:	f000 f859 	bl	8003f54 <_lseek_r>
 8003ea2:	1c43      	adds	r3, r0, #1
 8003ea4:	89a3      	ldrh	r3, [r4, #12]
 8003ea6:	bf15      	itete	ne
 8003ea8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003eaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003eae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003eb2:	81a3      	strheq	r3, [r4, #12]
 8003eb4:	bf18      	it	ne
 8003eb6:	81a3      	strhne	r3, [r4, #12]
 8003eb8:	bd10      	pop	{r4, pc}

08003eba <__sclose>:
 8003eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ebe:	f000 b839 	b.w	8003f34 <_close_r>

08003ec2 <memset>:
 8003ec2:	4402      	add	r2, r0
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d100      	bne.n	8003ecc <memset+0xa>
 8003eca:	4770      	bx	lr
 8003ecc:	f803 1b01 	strb.w	r1, [r3], #1
 8003ed0:	e7f9      	b.n	8003ec6 <memset+0x4>

08003ed2 <_raise_r>:
 8003ed2:	291f      	cmp	r1, #31
 8003ed4:	b538      	push	{r3, r4, r5, lr}
 8003ed6:	4604      	mov	r4, r0
 8003ed8:	460d      	mov	r5, r1
 8003eda:	d904      	bls.n	8003ee6 <_raise_r+0x14>
 8003edc:	2316      	movs	r3, #22
 8003ede:	6003      	str	r3, [r0, #0]
 8003ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ee4:	bd38      	pop	{r3, r4, r5, pc}
 8003ee6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003ee8:	b112      	cbz	r2, 8003ef0 <_raise_r+0x1e>
 8003eea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003eee:	b94b      	cbnz	r3, 8003f04 <_raise_r+0x32>
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f000 f865 	bl	8003fc0 <_getpid_r>
 8003ef6:	462a      	mov	r2, r5
 8003ef8:	4601      	mov	r1, r0
 8003efa:	4620      	mov	r0, r4
 8003efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f00:	f000 b84c 	b.w	8003f9c <_kill_r>
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d00a      	beq.n	8003f1e <_raise_r+0x4c>
 8003f08:	1c59      	adds	r1, r3, #1
 8003f0a:	d103      	bne.n	8003f14 <_raise_r+0x42>
 8003f0c:	2316      	movs	r3, #22
 8003f0e:	6003      	str	r3, [r0, #0]
 8003f10:	2001      	movs	r0, #1
 8003f12:	e7e7      	b.n	8003ee4 <_raise_r+0x12>
 8003f14:	2400      	movs	r4, #0
 8003f16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	4798      	blx	r3
 8003f1e:	2000      	movs	r0, #0
 8003f20:	e7e0      	b.n	8003ee4 <_raise_r+0x12>
	...

08003f24 <raise>:
 8003f24:	4b02      	ldr	r3, [pc, #8]	; (8003f30 <raise+0xc>)
 8003f26:	4601      	mov	r1, r0
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	f7ff bfd2 	b.w	8003ed2 <_raise_r>
 8003f2e:	bf00      	nop
 8003f30:	2000009c 	.word	0x2000009c

08003f34 <_close_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4d06      	ldr	r5, [pc, #24]	; (8003f50 <_close_r+0x1c>)
 8003f38:	2300      	movs	r3, #0
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	602b      	str	r3, [r5, #0]
 8003f40:	f7fe fb19 	bl	8002576 <_close>
 8003f44:	1c43      	adds	r3, r0, #1
 8003f46:	d102      	bne.n	8003f4e <_close_r+0x1a>
 8003f48:	682b      	ldr	r3, [r5, #0]
 8003f4a:	b103      	cbz	r3, 8003f4e <_close_r+0x1a>
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	bd38      	pop	{r3, r4, r5, pc}
 8003f50:	20000214 	.word	0x20000214

08003f54 <_lseek_r>:
 8003f54:	b538      	push	{r3, r4, r5, lr}
 8003f56:	4d07      	ldr	r5, [pc, #28]	; (8003f74 <_lseek_r+0x20>)
 8003f58:	4604      	mov	r4, r0
 8003f5a:	4608      	mov	r0, r1
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	2200      	movs	r2, #0
 8003f60:	602a      	str	r2, [r5, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f7fe fb2e 	bl	80025c4 <_lseek>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d102      	bne.n	8003f72 <_lseek_r+0x1e>
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	b103      	cbz	r3, 8003f72 <_lseek_r+0x1e>
 8003f70:	6023      	str	r3, [r4, #0]
 8003f72:	bd38      	pop	{r3, r4, r5, pc}
 8003f74:	20000214 	.word	0x20000214

08003f78 <_read_r>:
 8003f78:	b538      	push	{r3, r4, r5, lr}
 8003f7a:	4d07      	ldr	r5, [pc, #28]	; (8003f98 <_read_r+0x20>)
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	4608      	mov	r0, r1
 8003f80:	4611      	mov	r1, r2
 8003f82:	2200      	movs	r2, #0
 8003f84:	602a      	str	r2, [r5, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	f7fe fabc 	bl	8002504 <_read>
 8003f8c:	1c43      	adds	r3, r0, #1
 8003f8e:	d102      	bne.n	8003f96 <_read_r+0x1e>
 8003f90:	682b      	ldr	r3, [r5, #0]
 8003f92:	b103      	cbz	r3, 8003f96 <_read_r+0x1e>
 8003f94:	6023      	str	r3, [r4, #0]
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	20000214 	.word	0x20000214

08003f9c <_kill_r>:
 8003f9c:	b538      	push	{r3, r4, r5, lr}
 8003f9e:	4d07      	ldr	r5, [pc, #28]	; (8003fbc <_kill_r+0x20>)
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	4604      	mov	r4, r0
 8003fa4:	4608      	mov	r0, r1
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	602b      	str	r3, [r5, #0]
 8003faa:	f7fe fa91 	bl	80024d0 <_kill>
 8003fae:	1c43      	adds	r3, r0, #1
 8003fb0:	d102      	bne.n	8003fb8 <_kill_r+0x1c>
 8003fb2:	682b      	ldr	r3, [r5, #0]
 8003fb4:	b103      	cbz	r3, 8003fb8 <_kill_r+0x1c>
 8003fb6:	6023      	str	r3, [r4, #0]
 8003fb8:	bd38      	pop	{r3, r4, r5, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000214 	.word	0x20000214

08003fc0 <_getpid_r>:
 8003fc0:	f7fe ba7e 	b.w	80024c0 <_getpid>

08003fc4 <_sbrk_r>:
 8003fc4:	b538      	push	{r3, r4, r5, lr}
 8003fc6:	4d06      	ldr	r5, [pc, #24]	; (8003fe0 <_sbrk_r+0x1c>)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	4604      	mov	r4, r0
 8003fcc:	4608      	mov	r0, r1
 8003fce:	602b      	str	r3, [r5, #0]
 8003fd0:	f7fe fb06 	bl	80025e0 <_sbrk>
 8003fd4:	1c43      	adds	r3, r0, #1
 8003fd6:	d102      	bne.n	8003fde <_sbrk_r+0x1a>
 8003fd8:	682b      	ldr	r3, [r5, #0]
 8003fda:	b103      	cbz	r3, 8003fde <_sbrk_r+0x1a>
 8003fdc:	6023      	str	r3, [r4, #0]
 8003fde:	bd38      	pop	{r3, r4, r5, pc}
 8003fe0:	20000214 	.word	0x20000214

08003fe4 <_write_r>:
 8003fe4:	b538      	push	{r3, r4, r5, lr}
 8003fe6:	4d07      	ldr	r5, [pc, #28]	; (8004004 <_write_r+0x20>)
 8003fe8:	4604      	mov	r4, r0
 8003fea:	4608      	mov	r0, r1
 8003fec:	4611      	mov	r1, r2
 8003fee:	2200      	movs	r2, #0
 8003ff0:	602a      	str	r2, [r5, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f7fe faa3 	bl	800253e <_write>
 8003ff8:	1c43      	adds	r3, r0, #1
 8003ffa:	d102      	bne.n	8004002 <_write_r+0x1e>
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	b103      	cbz	r3, 8004002 <_write_r+0x1e>
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	bd38      	pop	{r3, r4, r5, pc}
 8004004:	20000214 	.word	0x20000214

08004008 <__errno>:
 8004008:	4b01      	ldr	r3, [pc, #4]	; (8004010 <__errno+0x8>)
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	2000009c 	.word	0x2000009c

08004014 <__libc_init_array>:
 8004014:	b570      	push	{r4, r5, r6, lr}
 8004016:	4d0d      	ldr	r5, [pc, #52]	; (800404c <__libc_init_array+0x38>)
 8004018:	4c0d      	ldr	r4, [pc, #52]	; (8004050 <__libc_init_array+0x3c>)
 800401a:	1b64      	subs	r4, r4, r5
 800401c:	10a4      	asrs	r4, r4, #2
 800401e:	2600      	movs	r6, #0
 8004020:	42a6      	cmp	r6, r4
 8004022:	d109      	bne.n	8004038 <__libc_init_array+0x24>
 8004024:	4d0b      	ldr	r5, [pc, #44]	; (8004054 <__libc_init_array+0x40>)
 8004026:	4c0c      	ldr	r4, [pc, #48]	; (8004058 <__libc_init_array+0x44>)
 8004028:	f000 fef2 	bl	8004e10 <_init>
 800402c:	1b64      	subs	r4, r4, r5
 800402e:	10a4      	asrs	r4, r4, #2
 8004030:	2600      	movs	r6, #0
 8004032:	42a6      	cmp	r6, r4
 8004034:	d105      	bne.n	8004042 <__libc_init_array+0x2e>
 8004036:	bd70      	pop	{r4, r5, r6, pc}
 8004038:	f855 3b04 	ldr.w	r3, [r5], #4
 800403c:	4798      	blx	r3
 800403e:	3601      	adds	r6, #1
 8004040:	e7ee      	b.n	8004020 <__libc_init_array+0xc>
 8004042:	f855 3b04 	ldr.w	r3, [r5], #4
 8004046:	4798      	blx	r3
 8004048:	3601      	adds	r6, #1
 800404a:	e7f2      	b.n	8004032 <__libc_init_array+0x1e>
 800404c:	08004fd8 	.word	0x08004fd8
 8004050:	08004fd8 	.word	0x08004fd8
 8004054:	08004fd8 	.word	0x08004fd8
 8004058:	08004fdc 	.word	0x08004fdc

0800405c <__retarget_lock_init_recursive>:
 800405c:	4770      	bx	lr

0800405e <__retarget_lock_acquire_recursive>:
 800405e:	4770      	bx	lr

08004060 <__retarget_lock_release_recursive>:
 8004060:	4770      	bx	lr

08004062 <strcpy>:
 8004062:	4603      	mov	r3, r0
 8004064:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004068:	f803 2b01 	strb.w	r2, [r3], #1
 800406c:	2a00      	cmp	r2, #0
 800406e:	d1f9      	bne.n	8004064 <strcpy+0x2>
 8004070:	4770      	bx	lr

08004072 <memcpy>:
 8004072:	440a      	add	r2, r1
 8004074:	4291      	cmp	r1, r2
 8004076:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800407a:	d100      	bne.n	800407e <memcpy+0xc>
 800407c:	4770      	bx	lr
 800407e:	b510      	push	{r4, lr}
 8004080:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004084:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004088:	4291      	cmp	r1, r2
 800408a:	d1f9      	bne.n	8004080 <memcpy+0xe>
 800408c:	bd10      	pop	{r4, pc}
	...

08004090 <__assert_func>:
 8004090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004092:	4614      	mov	r4, r2
 8004094:	461a      	mov	r2, r3
 8004096:	4b09      	ldr	r3, [pc, #36]	; (80040bc <__assert_func+0x2c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4605      	mov	r5, r0
 800409c:	68d8      	ldr	r0, [r3, #12]
 800409e:	b14c      	cbz	r4, 80040b4 <__assert_func+0x24>
 80040a0:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <__assert_func+0x30>)
 80040a2:	9100      	str	r1, [sp, #0]
 80040a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80040a8:	4906      	ldr	r1, [pc, #24]	; (80040c4 <__assert_func+0x34>)
 80040aa:	462b      	mov	r3, r5
 80040ac:	f000 fbf0 	bl	8004890 <fiprintf>
 80040b0:	f7ff fcb2 	bl	8003a18 <abort>
 80040b4:	4b04      	ldr	r3, [pc, #16]	; (80040c8 <__assert_func+0x38>)
 80040b6:	461c      	mov	r4, r3
 80040b8:	e7f3      	b.n	80040a2 <__assert_func+0x12>
 80040ba:	bf00      	nop
 80040bc:	2000009c 	.word	0x2000009c
 80040c0:	08004f67 	.word	0x08004f67
 80040c4:	08004f74 	.word	0x08004f74
 80040c8:	08004fa2 	.word	0x08004fa2

080040cc <_free_r>:
 80040cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040ce:	2900      	cmp	r1, #0
 80040d0:	d044      	beq.n	800415c <_free_r+0x90>
 80040d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040d6:	9001      	str	r0, [sp, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f1a1 0404 	sub.w	r4, r1, #4
 80040de:	bfb8      	it	lt
 80040e0:	18e4      	addlt	r4, r4, r3
 80040e2:	f7ff fd51 	bl	8003b88 <__malloc_lock>
 80040e6:	4a1e      	ldr	r2, [pc, #120]	; (8004160 <_free_r+0x94>)
 80040e8:	9801      	ldr	r0, [sp, #4]
 80040ea:	6813      	ldr	r3, [r2, #0]
 80040ec:	b933      	cbnz	r3, 80040fc <_free_r+0x30>
 80040ee:	6063      	str	r3, [r4, #4]
 80040f0:	6014      	str	r4, [r2, #0]
 80040f2:	b003      	add	sp, #12
 80040f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040f8:	f7ff bd4c 	b.w	8003b94 <__malloc_unlock>
 80040fc:	42a3      	cmp	r3, r4
 80040fe:	d908      	bls.n	8004112 <_free_r+0x46>
 8004100:	6825      	ldr	r5, [r4, #0]
 8004102:	1961      	adds	r1, r4, r5
 8004104:	428b      	cmp	r3, r1
 8004106:	bf01      	itttt	eq
 8004108:	6819      	ldreq	r1, [r3, #0]
 800410a:	685b      	ldreq	r3, [r3, #4]
 800410c:	1949      	addeq	r1, r1, r5
 800410e:	6021      	streq	r1, [r4, #0]
 8004110:	e7ed      	b.n	80040ee <_free_r+0x22>
 8004112:	461a      	mov	r2, r3
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	b10b      	cbz	r3, 800411c <_free_r+0x50>
 8004118:	42a3      	cmp	r3, r4
 800411a:	d9fa      	bls.n	8004112 <_free_r+0x46>
 800411c:	6811      	ldr	r1, [r2, #0]
 800411e:	1855      	adds	r5, r2, r1
 8004120:	42a5      	cmp	r5, r4
 8004122:	d10b      	bne.n	800413c <_free_r+0x70>
 8004124:	6824      	ldr	r4, [r4, #0]
 8004126:	4421      	add	r1, r4
 8004128:	1854      	adds	r4, r2, r1
 800412a:	42a3      	cmp	r3, r4
 800412c:	6011      	str	r1, [r2, #0]
 800412e:	d1e0      	bne.n	80040f2 <_free_r+0x26>
 8004130:	681c      	ldr	r4, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	6053      	str	r3, [r2, #4]
 8004136:	440c      	add	r4, r1
 8004138:	6014      	str	r4, [r2, #0]
 800413a:	e7da      	b.n	80040f2 <_free_r+0x26>
 800413c:	d902      	bls.n	8004144 <_free_r+0x78>
 800413e:	230c      	movs	r3, #12
 8004140:	6003      	str	r3, [r0, #0]
 8004142:	e7d6      	b.n	80040f2 <_free_r+0x26>
 8004144:	6825      	ldr	r5, [r4, #0]
 8004146:	1961      	adds	r1, r4, r5
 8004148:	428b      	cmp	r3, r1
 800414a:	bf04      	itt	eq
 800414c:	6819      	ldreq	r1, [r3, #0]
 800414e:	685b      	ldreq	r3, [r3, #4]
 8004150:	6063      	str	r3, [r4, #4]
 8004152:	bf04      	itt	eq
 8004154:	1949      	addeq	r1, r1, r5
 8004156:	6021      	streq	r1, [r4, #0]
 8004158:	6054      	str	r4, [r2, #4]
 800415a:	e7ca      	b.n	80040f2 <_free_r+0x26>
 800415c:	b003      	add	sp, #12
 800415e:	bd30      	pop	{r4, r5, pc}
 8004160:	200000d0 	.word	0x200000d0

08004164 <__ssputs_r>:
 8004164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004168:	688e      	ldr	r6, [r1, #8]
 800416a:	461f      	mov	r7, r3
 800416c:	42be      	cmp	r6, r7
 800416e:	680b      	ldr	r3, [r1, #0]
 8004170:	4682      	mov	sl, r0
 8004172:	460c      	mov	r4, r1
 8004174:	4690      	mov	r8, r2
 8004176:	d82c      	bhi.n	80041d2 <__ssputs_r+0x6e>
 8004178:	898a      	ldrh	r2, [r1, #12]
 800417a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800417e:	d026      	beq.n	80041ce <__ssputs_r+0x6a>
 8004180:	6965      	ldr	r5, [r4, #20]
 8004182:	6909      	ldr	r1, [r1, #16]
 8004184:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004188:	eba3 0901 	sub.w	r9, r3, r1
 800418c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004190:	1c7b      	adds	r3, r7, #1
 8004192:	444b      	add	r3, r9
 8004194:	106d      	asrs	r5, r5, #1
 8004196:	429d      	cmp	r5, r3
 8004198:	bf38      	it	cc
 800419a:	461d      	movcc	r5, r3
 800419c:	0553      	lsls	r3, r2, #21
 800419e:	d527      	bpl.n	80041f0 <__ssputs_r+0x8c>
 80041a0:	4629      	mov	r1, r5
 80041a2:	f7ff fc71 	bl	8003a88 <_malloc_r>
 80041a6:	4606      	mov	r6, r0
 80041a8:	b360      	cbz	r0, 8004204 <__ssputs_r+0xa0>
 80041aa:	6921      	ldr	r1, [r4, #16]
 80041ac:	464a      	mov	r2, r9
 80041ae:	f7ff ff60 	bl	8004072 <memcpy>
 80041b2:	89a3      	ldrh	r3, [r4, #12]
 80041b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041bc:	81a3      	strh	r3, [r4, #12]
 80041be:	6126      	str	r6, [r4, #16]
 80041c0:	6165      	str	r5, [r4, #20]
 80041c2:	444e      	add	r6, r9
 80041c4:	eba5 0509 	sub.w	r5, r5, r9
 80041c8:	6026      	str	r6, [r4, #0]
 80041ca:	60a5      	str	r5, [r4, #8]
 80041cc:	463e      	mov	r6, r7
 80041ce:	42be      	cmp	r6, r7
 80041d0:	d900      	bls.n	80041d4 <__ssputs_r+0x70>
 80041d2:	463e      	mov	r6, r7
 80041d4:	6820      	ldr	r0, [r4, #0]
 80041d6:	4632      	mov	r2, r6
 80041d8:	4641      	mov	r1, r8
 80041da:	f000 fb6b 	bl	80048b4 <memmove>
 80041de:	68a3      	ldr	r3, [r4, #8]
 80041e0:	1b9b      	subs	r3, r3, r6
 80041e2:	60a3      	str	r3, [r4, #8]
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	4433      	add	r3, r6
 80041e8:	6023      	str	r3, [r4, #0]
 80041ea:	2000      	movs	r0, #0
 80041ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041f0:	462a      	mov	r2, r5
 80041f2:	f000 fb79 	bl	80048e8 <_realloc_r>
 80041f6:	4606      	mov	r6, r0
 80041f8:	2800      	cmp	r0, #0
 80041fa:	d1e0      	bne.n	80041be <__ssputs_r+0x5a>
 80041fc:	6921      	ldr	r1, [r4, #16]
 80041fe:	4650      	mov	r0, sl
 8004200:	f7ff ff64 	bl	80040cc <_free_r>
 8004204:	230c      	movs	r3, #12
 8004206:	f8ca 3000 	str.w	r3, [sl]
 800420a:	89a3      	ldrh	r3, [r4, #12]
 800420c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004210:	81a3      	strh	r3, [r4, #12]
 8004212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004216:	e7e9      	b.n	80041ec <__ssputs_r+0x88>

08004218 <_svfiprintf_r>:
 8004218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800421c:	4698      	mov	r8, r3
 800421e:	898b      	ldrh	r3, [r1, #12]
 8004220:	061b      	lsls	r3, r3, #24
 8004222:	b09d      	sub	sp, #116	; 0x74
 8004224:	4607      	mov	r7, r0
 8004226:	460d      	mov	r5, r1
 8004228:	4614      	mov	r4, r2
 800422a:	d50e      	bpl.n	800424a <_svfiprintf_r+0x32>
 800422c:	690b      	ldr	r3, [r1, #16]
 800422e:	b963      	cbnz	r3, 800424a <_svfiprintf_r+0x32>
 8004230:	2140      	movs	r1, #64	; 0x40
 8004232:	f7ff fc29 	bl	8003a88 <_malloc_r>
 8004236:	6028      	str	r0, [r5, #0]
 8004238:	6128      	str	r0, [r5, #16]
 800423a:	b920      	cbnz	r0, 8004246 <_svfiprintf_r+0x2e>
 800423c:	230c      	movs	r3, #12
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004244:	e0d0      	b.n	80043e8 <_svfiprintf_r+0x1d0>
 8004246:	2340      	movs	r3, #64	; 0x40
 8004248:	616b      	str	r3, [r5, #20]
 800424a:	2300      	movs	r3, #0
 800424c:	9309      	str	r3, [sp, #36]	; 0x24
 800424e:	2320      	movs	r3, #32
 8004250:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004254:	f8cd 800c 	str.w	r8, [sp, #12]
 8004258:	2330      	movs	r3, #48	; 0x30
 800425a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004400 <_svfiprintf_r+0x1e8>
 800425e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004262:	f04f 0901 	mov.w	r9, #1
 8004266:	4623      	mov	r3, r4
 8004268:	469a      	mov	sl, r3
 800426a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800426e:	b10a      	cbz	r2, 8004274 <_svfiprintf_r+0x5c>
 8004270:	2a25      	cmp	r2, #37	; 0x25
 8004272:	d1f9      	bne.n	8004268 <_svfiprintf_r+0x50>
 8004274:	ebba 0b04 	subs.w	fp, sl, r4
 8004278:	d00b      	beq.n	8004292 <_svfiprintf_r+0x7a>
 800427a:	465b      	mov	r3, fp
 800427c:	4622      	mov	r2, r4
 800427e:	4629      	mov	r1, r5
 8004280:	4638      	mov	r0, r7
 8004282:	f7ff ff6f 	bl	8004164 <__ssputs_r>
 8004286:	3001      	adds	r0, #1
 8004288:	f000 80a9 	beq.w	80043de <_svfiprintf_r+0x1c6>
 800428c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800428e:	445a      	add	r2, fp
 8004290:	9209      	str	r2, [sp, #36]	; 0x24
 8004292:	f89a 3000 	ldrb.w	r3, [sl]
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 80a1 	beq.w	80043de <_svfiprintf_r+0x1c6>
 800429c:	2300      	movs	r3, #0
 800429e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042a6:	f10a 0a01 	add.w	sl, sl, #1
 80042aa:	9304      	str	r3, [sp, #16]
 80042ac:	9307      	str	r3, [sp, #28]
 80042ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042b2:	931a      	str	r3, [sp, #104]	; 0x68
 80042b4:	4654      	mov	r4, sl
 80042b6:	2205      	movs	r2, #5
 80042b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042bc:	4850      	ldr	r0, [pc, #320]	; (8004400 <_svfiprintf_r+0x1e8>)
 80042be:	f7fb ff87 	bl	80001d0 <memchr>
 80042c2:	9a04      	ldr	r2, [sp, #16]
 80042c4:	b9d8      	cbnz	r0, 80042fe <_svfiprintf_r+0xe6>
 80042c6:	06d0      	lsls	r0, r2, #27
 80042c8:	bf44      	itt	mi
 80042ca:	2320      	movmi	r3, #32
 80042cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042d0:	0711      	lsls	r1, r2, #28
 80042d2:	bf44      	itt	mi
 80042d4:	232b      	movmi	r3, #43	; 0x2b
 80042d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042da:	f89a 3000 	ldrb.w	r3, [sl]
 80042de:	2b2a      	cmp	r3, #42	; 0x2a
 80042e0:	d015      	beq.n	800430e <_svfiprintf_r+0xf6>
 80042e2:	9a07      	ldr	r2, [sp, #28]
 80042e4:	4654      	mov	r4, sl
 80042e6:	2000      	movs	r0, #0
 80042e8:	f04f 0c0a 	mov.w	ip, #10
 80042ec:	4621      	mov	r1, r4
 80042ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042f2:	3b30      	subs	r3, #48	; 0x30
 80042f4:	2b09      	cmp	r3, #9
 80042f6:	d94d      	bls.n	8004394 <_svfiprintf_r+0x17c>
 80042f8:	b1b0      	cbz	r0, 8004328 <_svfiprintf_r+0x110>
 80042fa:	9207      	str	r2, [sp, #28]
 80042fc:	e014      	b.n	8004328 <_svfiprintf_r+0x110>
 80042fe:	eba0 0308 	sub.w	r3, r0, r8
 8004302:	fa09 f303 	lsl.w	r3, r9, r3
 8004306:	4313      	orrs	r3, r2
 8004308:	9304      	str	r3, [sp, #16]
 800430a:	46a2      	mov	sl, r4
 800430c:	e7d2      	b.n	80042b4 <_svfiprintf_r+0x9c>
 800430e:	9b03      	ldr	r3, [sp, #12]
 8004310:	1d19      	adds	r1, r3, #4
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	9103      	str	r1, [sp, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	bfbb      	ittet	lt
 800431a:	425b      	neglt	r3, r3
 800431c:	f042 0202 	orrlt.w	r2, r2, #2
 8004320:	9307      	strge	r3, [sp, #28]
 8004322:	9307      	strlt	r3, [sp, #28]
 8004324:	bfb8      	it	lt
 8004326:	9204      	strlt	r2, [sp, #16]
 8004328:	7823      	ldrb	r3, [r4, #0]
 800432a:	2b2e      	cmp	r3, #46	; 0x2e
 800432c:	d10c      	bne.n	8004348 <_svfiprintf_r+0x130>
 800432e:	7863      	ldrb	r3, [r4, #1]
 8004330:	2b2a      	cmp	r3, #42	; 0x2a
 8004332:	d134      	bne.n	800439e <_svfiprintf_r+0x186>
 8004334:	9b03      	ldr	r3, [sp, #12]
 8004336:	1d1a      	adds	r2, r3, #4
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	9203      	str	r2, [sp, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	bfb8      	it	lt
 8004340:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004344:	3402      	adds	r4, #2
 8004346:	9305      	str	r3, [sp, #20]
 8004348:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004410 <_svfiprintf_r+0x1f8>
 800434c:	7821      	ldrb	r1, [r4, #0]
 800434e:	2203      	movs	r2, #3
 8004350:	4650      	mov	r0, sl
 8004352:	f7fb ff3d 	bl	80001d0 <memchr>
 8004356:	b138      	cbz	r0, 8004368 <_svfiprintf_r+0x150>
 8004358:	9b04      	ldr	r3, [sp, #16]
 800435a:	eba0 000a 	sub.w	r0, r0, sl
 800435e:	2240      	movs	r2, #64	; 0x40
 8004360:	4082      	lsls	r2, r0
 8004362:	4313      	orrs	r3, r2
 8004364:	3401      	adds	r4, #1
 8004366:	9304      	str	r3, [sp, #16]
 8004368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800436c:	4825      	ldr	r0, [pc, #148]	; (8004404 <_svfiprintf_r+0x1ec>)
 800436e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004372:	2206      	movs	r2, #6
 8004374:	f7fb ff2c 	bl	80001d0 <memchr>
 8004378:	2800      	cmp	r0, #0
 800437a:	d038      	beq.n	80043ee <_svfiprintf_r+0x1d6>
 800437c:	4b22      	ldr	r3, [pc, #136]	; (8004408 <_svfiprintf_r+0x1f0>)
 800437e:	bb1b      	cbnz	r3, 80043c8 <_svfiprintf_r+0x1b0>
 8004380:	9b03      	ldr	r3, [sp, #12]
 8004382:	3307      	adds	r3, #7
 8004384:	f023 0307 	bic.w	r3, r3, #7
 8004388:	3308      	adds	r3, #8
 800438a:	9303      	str	r3, [sp, #12]
 800438c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800438e:	4433      	add	r3, r6
 8004390:	9309      	str	r3, [sp, #36]	; 0x24
 8004392:	e768      	b.n	8004266 <_svfiprintf_r+0x4e>
 8004394:	fb0c 3202 	mla	r2, ip, r2, r3
 8004398:	460c      	mov	r4, r1
 800439a:	2001      	movs	r0, #1
 800439c:	e7a6      	b.n	80042ec <_svfiprintf_r+0xd4>
 800439e:	2300      	movs	r3, #0
 80043a0:	3401      	adds	r4, #1
 80043a2:	9305      	str	r3, [sp, #20]
 80043a4:	4619      	mov	r1, r3
 80043a6:	f04f 0c0a 	mov.w	ip, #10
 80043aa:	4620      	mov	r0, r4
 80043ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043b0:	3a30      	subs	r2, #48	; 0x30
 80043b2:	2a09      	cmp	r2, #9
 80043b4:	d903      	bls.n	80043be <_svfiprintf_r+0x1a6>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0c6      	beq.n	8004348 <_svfiprintf_r+0x130>
 80043ba:	9105      	str	r1, [sp, #20]
 80043bc:	e7c4      	b.n	8004348 <_svfiprintf_r+0x130>
 80043be:	fb0c 2101 	mla	r1, ip, r1, r2
 80043c2:	4604      	mov	r4, r0
 80043c4:	2301      	movs	r3, #1
 80043c6:	e7f0      	b.n	80043aa <_svfiprintf_r+0x192>
 80043c8:	ab03      	add	r3, sp, #12
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	462a      	mov	r2, r5
 80043ce:	4b0f      	ldr	r3, [pc, #60]	; (800440c <_svfiprintf_r+0x1f4>)
 80043d0:	a904      	add	r1, sp, #16
 80043d2:	4638      	mov	r0, r7
 80043d4:	f3af 8000 	nop.w
 80043d8:	1c42      	adds	r2, r0, #1
 80043da:	4606      	mov	r6, r0
 80043dc:	d1d6      	bne.n	800438c <_svfiprintf_r+0x174>
 80043de:	89ab      	ldrh	r3, [r5, #12]
 80043e0:	065b      	lsls	r3, r3, #25
 80043e2:	f53f af2d 	bmi.w	8004240 <_svfiprintf_r+0x28>
 80043e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043e8:	b01d      	add	sp, #116	; 0x74
 80043ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ee:	ab03      	add	r3, sp, #12
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	462a      	mov	r2, r5
 80043f4:	4b05      	ldr	r3, [pc, #20]	; (800440c <_svfiprintf_r+0x1f4>)
 80043f6:	a904      	add	r1, sp, #16
 80043f8:	4638      	mov	r0, r7
 80043fa:	f000 f879 	bl	80044f0 <_printf_i>
 80043fe:	e7eb      	b.n	80043d8 <_svfiprintf_r+0x1c0>
 8004400:	08004fa3 	.word	0x08004fa3
 8004404:	08004fad 	.word	0x08004fad
 8004408:	00000000 	.word	0x00000000
 800440c:	08004165 	.word	0x08004165
 8004410:	08004fa9 	.word	0x08004fa9

08004414 <_printf_common>:
 8004414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004418:	4616      	mov	r6, r2
 800441a:	4699      	mov	r9, r3
 800441c:	688a      	ldr	r2, [r1, #8]
 800441e:	690b      	ldr	r3, [r1, #16]
 8004420:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004424:	4293      	cmp	r3, r2
 8004426:	bfb8      	it	lt
 8004428:	4613      	movlt	r3, r2
 800442a:	6033      	str	r3, [r6, #0]
 800442c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004430:	4607      	mov	r7, r0
 8004432:	460c      	mov	r4, r1
 8004434:	b10a      	cbz	r2, 800443a <_printf_common+0x26>
 8004436:	3301      	adds	r3, #1
 8004438:	6033      	str	r3, [r6, #0]
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	0699      	lsls	r1, r3, #26
 800443e:	bf42      	ittt	mi
 8004440:	6833      	ldrmi	r3, [r6, #0]
 8004442:	3302      	addmi	r3, #2
 8004444:	6033      	strmi	r3, [r6, #0]
 8004446:	6825      	ldr	r5, [r4, #0]
 8004448:	f015 0506 	ands.w	r5, r5, #6
 800444c:	d106      	bne.n	800445c <_printf_common+0x48>
 800444e:	f104 0a19 	add.w	sl, r4, #25
 8004452:	68e3      	ldr	r3, [r4, #12]
 8004454:	6832      	ldr	r2, [r6, #0]
 8004456:	1a9b      	subs	r3, r3, r2
 8004458:	42ab      	cmp	r3, r5
 800445a:	dc26      	bgt.n	80044aa <_printf_common+0x96>
 800445c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004460:	1e13      	subs	r3, r2, #0
 8004462:	6822      	ldr	r2, [r4, #0]
 8004464:	bf18      	it	ne
 8004466:	2301      	movne	r3, #1
 8004468:	0692      	lsls	r2, r2, #26
 800446a:	d42b      	bmi.n	80044c4 <_printf_common+0xb0>
 800446c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004470:	4649      	mov	r1, r9
 8004472:	4638      	mov	r0, r7
 8004474:	47c0      	blx	r8
 8004476:	3001      	adds	r0, #1
 8004478:	d01e      	beq.n	80044b8 <_printf_common+0xa4>
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	6922      	ldr	r2, [r4, #16]
 800447e:	f003 0306 	and.w	r3, r3, #6
 8004482:	2b04      	cmp	r3, #4
 8004484:	bf02      	ittt	eq
 8004486:	68e5      	ldreq	r5, [r4, #12]
 8004488:	6833      	ldreq	r3, [r6, #0]
 800448a:	1aed      	subeq	r5, r5, r3
 800448c:	68a3      	ldr	r3, [r4, #8]
 800448e:	bf0c      	ite	eq
 8004490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004494:	2500      	movne	r5, #0
 8004496:	4293      	cmp	r3, r2
 8004498:	bfc4      	itt	gt
 800449a:	1a9b      	subgt	r3, r3, r2
 800449c:	18ed      	addgt	r5, r5, r3
 800449e:	2600      	movs	r6, #0
 80044a0:	341a      	adds	r4, #26
 80044a2:	42b5      	cmp	r5, r6
 80044a4:	d11a      	bne.n	80044dc <_printf_common+0xc8>
 80044a6:	2000      	movs	r0, #0
 80044a8:	e008      	b.n	80044bc <_printf_common+0xa8>
 80044aa:	2301      	movs	r3, #1
 80044ac:	4652      	mov	r2, sl
 80044ae:	4649      	mov	r1, r9
 80044b0:	4638      	mov	r0, r7
 80044b2:	47c0      	blx	r8
 80044b4:	3001      	adds	r0, #1
 80044b6:	d103      	bne.n	80044c0 <_printf_common+0xac>
 80044b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044c0:	3501      	adds	r5, #1
 80044c2:	e7c6      	b.n	8004452 <_printf_common+0x3e>
 80044c4:	18e1      	adds	r1, r4, r3
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	2030      	movs	r0, #48	; 0x30
 80044ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044ce:	4422      	add	r2, r4
 80044d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044d8:	3302      	adds	r3, #2
 80044da:	e7c7      	b.n	800446c <_printf_common+0x58>
 80044dc:	2301      	movs	r3, #1
 80044de:	4622      	mov	r2, r4
 80044e0:	4649      	mov	r1, r9
 80044e2:	4638      	mov	r0, r7
 80044e4:	47c0      	blx	r8
 80044e6:	3001      	adds	r0, #1
 80044e8:	d0e6      	beq.n	80044b8 <_printf_common+0xa4>
 80044ea:	3601      	adds	r6, #1
 80044ec:	e7d9      	b.n	80044a2 <_printf_common+0x8e>
	...

080044f0 <_printf_i>:
 80044f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044f4:	7e0f      	ldrb	r7, [r1, #24]
 80044f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044f8:	2f78      	cmp	r7, #120	; 0x78
 80044fa:	4691      	mov	r9, r2
 80044fc:	4680      	mov	r8, r0
 80044fe:	460c      	mov	r4, r1
 8004500:	469a      	mov	sl, r3
 8004502:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004506:	d807      	bhi.n	8004518 <_printf_i+0x28>
 8004508:	2f62      	cmp	r7, #98	; 0x62
 800450a:	d80a      	bhi.n	8004522 <_printf_i+0x32>
 800450c:	2f00      	cmp	r7, #0
 800450e:	f000 80d4 	beq.w	80046ba <_printf_i+0x1ca>
 8004512:	2f58      	cmp	r7, #88	; 0x58
 8004514:	f000 80c0 	beq.w	8004698 <_printf_i+0x1a8>
 8004518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800451c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004520:	e03a      	b.n	8004598 <_printf_i+0xa8>
 8004522:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004526:	2b15      	cmp	r3, #21
 8004528:	d8f6      	bhi.n	8004518 <_printf_i+0x28>
 800452a:	a101      	add	r1, pc, #4	; (adr r1, 8004530 <_printf_i+0x40>)
 800452c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004530:	08004589 	.word	0x08004589
 8004534:	0800459d 	.word	0x0800459d
 8004538:	08004519 	.word	0x08004519
 800453c:	08004519 	.word	0x08004519
 8004540:	08004519 	.word	0x08004519
 8004544:	08004519 	.word	0x08004519
 8004548:	0800459d 	.word	0x0800459d
 800454c:	08004519 	.word	0x08004519
 8004550:	08004519 	.word	0x08004519
 8004554:	08004519 	.word	0x08004519
 8004558:	08004519 	.word	0x08004519
 800455c:	080046a1 	.word	0x080046a1
 8004560:	080045c9 	.word	0x080045c9
 8004564:	0800465b 	.word	0x0800465b
 8004568:	08004519 	.word	0x08004519
 800456c:	08004519 	.word	0x08004519
 8004570:	080046c3 	.word	0x080046c3
 8004574:	08004519 	.word	0x08004519
 8004578:	080045c9 	.word	0x080045c9
 800457c:	08004519 	.word	0x08004519
 8004580:	08004519 	.word	0x08004519
 8004584:	08004663 	.word	0x08004663
 8004588:	682b      	ldr	r3, [r5, #0]
 800458a:	1d1a      	adds	r2, r3, #4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	602a      	str	r2, [r5, #0]
 8004590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004594:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004598:	2301      	movs	r3, #1
 800459a:	e09f      	b.n	80046dc <_printf_i+0x1ec>
 800459c:	6820      	ldr	r0, [r4, #0]
 800459e:	682b      	ldr	r3, [r5, #0]
 80045a0:	0607      	lsls	r7, r0, #24
 80045a2:	f103 0104 	add.w	r1, r3, #4
 80045a6:	6029      	str	r1, [r5, #0]
 80045a8:	d501      	bpl.n	80045ae <_printf_i+0xbe>
 80045aa:	681e      	ldr	r6, [r3, #0]
 80045ac:	e003      	b.n	80045b6 <_printf_i+0xc6>
 80045ae:	0646      	lsls	r6, r0, #25
 80045b0:	d5fb      	bpl.n	80045aa <_printf_i+0xba>
 80045b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80045b6:	2e00      	cmp	r6, #0
 80045b8:	da03      	bge.n	80045c2 <_printf_i+0xd2>
 80045ba:	232d      	movs	r3, #45	; 0x2d
 80045bc:	4276      	negs	r6, r6
 80045be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045c2:	485a      	ldr	r0, [pc, #360]	; (800472c <_printf_i+0x23c>)
 80045c4:	230a      	movs	r3, #10
 80045c6:	e012      	b.n	80045ee <_printf_i+0xfe>
 80045c8:	682b      	ldr	r3, [r5, #0]
 80045ca:	6820      	ldr	r0, [r4, #0]
 80045cc:	1d19      	adds	r1, r3, #4
 80045ce:	6029      	str	r1, [r5, #0]
 80045d0:	0605      	lsls	r5, r0, #24
 80045d2:	d501      	bpl.n	80045d8 <_printf_i+0xe8>
 80045d4:	681e      	ldr	r6, [r3, #0]
 80045d6:	e002      	b.n	80045de <_printf_i+0xee>
 80045d8:	0641      	lsls	r1, r0, #25
 80045da:	d5fb      	bpl.n	80045d4 <_printf_i+0xe4>
 80045dc:	881e      	ldrh	r6, [r3, #0]
 80045de:	4853      	ldr	r0, [pc, #332]	; (800472c <_printf_i+0x23c>)
 80045e0:	2f6f      	cmp	r7, #111	; 0x6f
 80045e2:	bf0c      	ite	eq
 80045e4:	2308      	moveq	r3, #8
 80045e6:	230a      	movne	r3, #10
 80045e8:	2100      	movs	r1, #0
 80045ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045ee:	6865      	ldr	r5, [r4, #4]
 80045f0:	60a5      	str	r5, [r4, #8]
 80045f2:	2d00      	cmp	r5, #0
 80045f4:	bfa2      	ittt	ge
 80045f6:	6821      	ldrge	r1, [r4, #0]
 80045f8:	f021 0104 	bicge.w	r1, r1, #4
 80045fc:	6021      	strge	r1, [r4, #0]
 80045fe:	b90e      	cbnz	r6, 8004604 <_printf_i+0x114>
 8004600:	2d00      	cmp	r5, #0
 8004602:	d04b      	beq.n	800469c <_printf_i+0x1ac>
 8004604:	4615      	mov	r5, r2
 8004606:	fbb6 f1f3 	udiv	r1, r6, r3
 800460a:	fb03 6711 	mls	r7, r3, r1, r6
 800460e:	5dc7      	ldrb	r7, [r0, r7]
 8004610:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004614:	4637      	mov	r7, r6
 8004616:	42bb      	cmp	r3, r7
 8004618:	460e      	mov	r6, r1
 800461a:	d9f4      	bls.n	8004606 <_printf_i+0x116>
 800461c:	2b08      	cmp	r3, #8
 800461e:	d10b      	bne.n	8004638 <_printf_i+0x148>
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	07de      	lsls	r6, r3, #31
 8004624:	d508      	bpl.n	8004638 <_printf_i+0x148>
 8004626:	6923      	ldr	r3, [r4, #16]
 8004628:	6861      	ldr	r1, [r4, #4]
 800462a:	4299      	cmp	r1, r3
 800462c:	bfde      	ittt	le
 800462e:	2330      	movle	r3, #48	; 0x30
 8004630:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004634:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004638:	1b52      	subs	r2, r2, r5
 800463a:	6122      	str	r2, [r4, #16]
 800463c:	f8cd a000 	str.w	sl, [sp]
 8004640:	464b      	mov	r3, r9
 8004642:	aa03      	add	r2, sp, #12
 8004644:	4621      	mov	r1, r4
 8004646:	4640      	mov	r0, r8
 8004648:	f7ff fee4 	bl	8004414 <_printf_common>
 800464c:	3001      	adds	r0, #1
 800464e:	d14a      	bne.n	80046e6 <_printf_i+0x1f6>
 8004650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004654:	b004      	add	sp, #16
 8004656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	f043 0320 	orr.w	r3, r3, #32
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	4833      	ldr	r0, [pc, #204]	; (8004730 <_printf_i+0x240>)
 8004664:	2778      	movs	r7, #120	; 0x78
 8004666:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	6829      	ldr	r1, [r5, #0]
 800466e:	061f      	lsls	r7, r3, #24
 8004670:	f851 6b04 	ldr.w	r6, [r1], #4
 8004674:	d402      	bmi.n	800467c <_printf_i+0x18c>
 8004676:	065f      	lsls	r7, r3, #25
 8004678:	bf48      	it	mi
 800467a:	b2b6      	uxthmi	r6, r6
 800467c:	07df      	lsls	r7, r3, #31
 800467e:	bf48      	it	mi
 8004680:	f043 0320 	orrmi.w	r3, r3, #32
 8004684:	6029      	str	r1, [r5, #0]
 8004686:	bf48      	it	mi
 8004688:	6023      	strmi	r3, [r4, #0]
 800468a:	b91e      	cbnz	r6, 8004694 <_printf_i+0x1a4>
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	f023 0320 	bic.w	r3, r3, #32
 8004692:	6023      	str	r3, [r4, #0]
 8004694:	2310      	movs	r3, #16
 8004696:	e7a7      	b.n	80045e8 <_printf_i+0xf8>
 8004698:	4824      	ldr	r0, [pc, #144]	; (800472c <_printf_i+0x23c>)
 800469a:	e7e4      	b.n	8004666 <_printf_i+0x176>
 800469c:	4615      	mov	r5, r2
 800469e:	e7bd      	b.n	800461c <_printf_i+0x12c>
 80046a0:	682b      	ldr	r3, [r5, #0]
 80046a2:	6826      	ldr	r6, [r4, #0]
 80046a4:	6961      	ldr	r1, [r4, #20]
 80046a6:	1d18      	adds	r0, r3, #4
 80046a8:	6028      	str	r0, [r5, #0]
 80046aa:	0635      	lsls	r5, r6, #24
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	d501      	bpl.n	80046b4 <_printf_i+0x1c4>
 80046b0:	6019      	str	r1, [r3, #0]
 80046b2:	e002      	b.n	80046ba <_printf_i+0x1ca>
 80046b4:	0670      	lsls	r0, r6, #25
 80046b6:	d5fb      	bpl.n	80046b0 <_printf_i+0x1c0>
 80046b8:	8019      	strh	r1, [r3, #0]
 80046ba:	2300      	movs	r3, #0
 80046bc:	6123      	str	r3, [r4, #16]
 80046be:	4615      	mov	r5, r2
 80046c0:	e7bc      	b.n	800463c <_printf_i+0x14c>
 80046c2:	682b      	ldr	r3, [r5, #0]
 80046c4:	1d1a      	adds	r2, r3, #4
 80046c6:	602a      	str	r2, [r5, #0]
 80046c8:	681d      	ldr	r5, [r3, #0]
 80046ca:	6862      	ldr	r2, [r4, #4]
 80046cc:	2100      	movs	r1, #0
 80046ce:	4628      	mov	r0, r5
 80046d0:	f7fb fd7e 	bl	80001d0 <memchr>
 80046d4:	b108      	cbz	r0, 80046da <_printf_i+0x1ea>
 80046d6:	1b40      	subs	r0, r0, r5
 80046d8:	6060      	str	r0, [r4, #4]
 80046da:	6863      	ldr	r3, [r4, #4]
 80046dc:	6123      	str	r3, [r4, #16]
 80046de:	2300      	movs	r3, #0
 80046e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046e4:	e7aa      	b.n	800463c <_printf_i+0x14c>
 80046e6:	6923      	ldr	r3, [r4, #16]
 80046e8:	462a      	mov	r2, r5
 80046ea:	4649      	mov	r1, r9
 80046ec:	4640      	mov	r0, r8
 80046ee:	47d0      	blx	sl
 80046f0:	3001      	adds	r0, #1
 80046f2:	d0ad      	beq.n	8004650 <_printf_i+0x160>
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	079b      	lsls	r3, r3, #30
 80046f8:	d413      	bmi.n	8004722 <_printf_i+0x232>
 80046fa:	68e0      	ldr	r0, [r4, #12]
 80046fc:	9b03      	ldr	r3, [sp, #12]
 80046fe:	4298      	cmp	r0, r3
 8004700:	bfb8      	it	lt
 8004702:	4618      	movlt	r0, r3
 8004704:	e7a6      	b.n	8004654 <_printf_i+0x164>
 8004706:	2301      	movs	r3, #1
 8004708:	4632      	mov	r2, r6
 800470a:	4649      	mov	r1, r9
 800470c:	4640      	mov	r0, r8
 800470e:	47d0      	blx	sl
 8004710:	3001      	adds	r0, #1
 8004712:	d09d      	beq.n	8004650 <_printf_i+0x160>
 8004714:	3501      	adds	r5, #1
 8004716:	68e3      	ldr	r3, [r4, #12]
 8004718:	9903      	ldr	r1, [sp, #12]
 800471a:	1a5b      	subs	r3, r3, r1
 800471c:	42ab      	cmp	r3, r5
 800471e:	dcf2      	bgt.n	8004706 <_printf_i+0x216>
 8004720:	e7eb      	b.n	80046fa <_printf_i+0x20a>
 8004722:	2500      	movs	r5, #0
 8004724:	f104 0619 	add.w	r6, r4, #25
 8004728:	e7f5      	b.n	8004716 <_printf_i+0x226>
 800472a:	bf00      	nop
 800472c:	08004fb4 	.word	0x08004fb4
 8004730:	08004fc5 	.word	0x08004fc5

08004734 <__sflush_r>:
 8004734:	898a      	ldrh	r2, [r1, #12]
 8004736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800473a:	4605      	mov	r5, r0
 800473c:	0710      	lsls	r0, r2, #28
 800473e:	460c      	mov	r4, r1
 8004740:	d458      	bmi.n	80047f4 <__sflush_r+0xc0>
 8004742:	684b      	ldr	r3, [r1, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	dc05      	bgt.n	8004754 <__sflush_r+0x20>
 8004748:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	dc02      	bgt.n	8004754 <__sflush_r+0x20>
 800474e:	2000      	movs	r0, #0
 8004750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004756:	2e00      	cmp	r6, #0
 8004758:	d0f9      	beq.n	800474e <__sflush_r+0x1a>
 800475a:	2300      	movs	r3, #0
 800475c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004760:	682f      	ldr	r7, [r5, #0]
 8004762:	6a21      	ldr	r1, [r4, #32]
 8004764:	602b      	str	r3, [r5, #0]
 8004766:	d032      	beq.n	80047ce <__sflush_r+0x9a>
 8004768:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800476a:	89a3      	ldrh	r3, [r4, #12]
 800476c:	075a      	lsls	r2, r3, #29
 800476e:	d505      	bpl.n	800477c <__sflush_r+0x48>
 8004770:	6863      	ldr	r3, [r4, #4]
 8004772:	1ac0      	subs	r0, r0, r3
 8004774:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004776:	b10b      	cbz	r3, 800477c <__sflush_r+0x48>
 8004778:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800477a:	1ac0      	subs	r0, r0, r3
 800477c:	2300      	movs	r3, #0
 800477e:	4602      	mov	r2, r0
 8004780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004782:	6a21      	ldr	r1, [r4, #32]
 8004784:	4628      	mov	r0, r5
 8004786:	47b0      	blx	r6
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	89a3      	ldrh	r3, [r4, #12]
 800478c:	d106      	bne.n	800479c <__sflush_r+0x68>
 800478e:	6829      	ldr	r1, [r5, #0]
 8004790:	291d      	cmp	r1, #29
 8004792:	d82b      	bhi.n	80047ec <__sflush_r+0xb8>
 8004794:	4a29      	ldr	r2, [pc, #164]	; (800483c <__sflush_r+0x108>)
 8004796:	410a      	asrs	r2, r1
 8004798:	07d6      	lsls	r6, r2, #31
 800479a:	d427      	bmi.n	80047ec <__sflush_r+0xb8>
 800479c:	2200      	movs	r2, #0
 800479e:	6062      	str	r2, [r4, #4]
 80047a0:	04d9      	lsls	r1, r3, #19
 80047a2:	6922      	ldr	r2, [r4, #16]
 80047a4:	6022      	str	r2, [r4, #0]
 80047a6:	d504      	bpl.n	80047b2 <__sflush_r+0x7e>
 80047a8:	1c42      	adds	r2, r0, #1
 80047aa:	d101      	bne.n	80047b0 <__sflush_r+0x7c>
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	b903      	cbnz	r3, 80047b2 <__sflush_r+0x7e>
 80047b0:	6560      	str	r0, [r4, #84]	; 0x54
 80047b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047b4:	602f      	str	r7, [r5, #0]
 80047b6:	2900      	cmp	r1, #0
 80047b8:	d0c9      	beq.n	800474e <__sflush_r+0x1a>
 80047ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047be:	4299      	cmp	r1, r3
 80047c0:	d002      	beq.n	80047c8 <__sflush_r+0x94>
 80047c2:	4628      	mov	r0, r5
 80047c4:	f7ff fc82 	bl	80040cc <_free_r>
 80047c8:	2000      	movs	r0, #0
 80047ca:	6360      	str	r0, [r4, #52]	; 0x34
 80047cc:	e7c0      	b.n	8004750 <__sflush_r+0x1c>
 80047ce:	2301      	movs	r3, #1
 80047d0:	4628      	mov	r0, r5
 80047d2:	47b0      	blx	r6
 80047d4:	1c41      	adds	r1, r0, #1
 80047d6:	d1c8      	bne.n	800476a <__sflush_r+0x36>
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0c5      	beq.n	800476a <__sflush_r+0x36>
 80047de:	2b1d      	cmp	r3, #29
 80047e0:	d001      	beq.n	80047e6 <__sflush_r+0xb2>
 80047e2:	2b16      	cmp	r3, #22
 80047e4:	d101      	bne.n	80047ea <__sflush_r+0xb6>
 80047e6:	602f      	str	r7, [r5, #0]
 80047e8:	e7b1      	b.n	800474e <__sflush_r+0x1a>
 80047ea:	89a3      	ldrh	r3, [r4, #12]
 80047ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047f0:	81a3      	strh	r3, [r4, #12]
 80047f2:	e7ad      	b.n	8004750 <__sflush_r+0x1c>
 80047f4:	690f      	ldr	r7, [r1, #16]
 80047f6:	2f00      	cmp	r7, #0
 80047f8:	d0a9      	beq.n	800474e <__sflush_r+0x1a>
 80047fa:	0793      	lsls	r3, r2, #30
 80047fc:	680e      	ldr	r6, [r1, #0]
 80047fe:	bf08      	it	eq
 8004800:	694b      	ldreq	r3, [r1, #20]
 8004802:	600f      	str	r7, [r1, #0]
 8004804:	bf18      	it	ne
 8004806:	2300      	movne	r3, #0
 8004808:	eba6 0807 	sub.w	r8, r6, r7
 800480c:	608b      	str	r3, [r1, #8]
 800480e:	f1b8 0f00 	cmp.w	r8, #0
 8004812:	dd9c      	ble.n	800474e <__sflush_r+0x1a>
 8004814:	6a21      	ldr	r1, [r4, #32]
 8004816:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004818:	4643      	mov	r3, r8
 800481a:	463a      	mov	r2, r7
 800481c:	4628      	mov	r0, r5
 800481e:	47b0      	blx	r6
 8004820:	2800      	cmp	r0, #0
 8004822:	dc06      	bgt.n	8004832 <__sflush_r+0xfe>
 8004824:	89a3      	ldrh	r3, [r4, #12]
 8004826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800482a:	81a3      	strh	r3, [r4, #12]
 800482c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004830:	e78e      	b.n	8004750 <__sflush_r+0x1c>
 8004832:	4407      	add	r7, r0
 8004834:	eba8 0800 	sub.w	r8, r8, r0
 8004838:	e7e9      	b.n	800480e <__sflush_r+0xda>
 800483a:	bf00      	nop
 800483c:	dfbffffe 	.word	0xdfbffffe

08004840 <_fflush_r>:
 8004840:	b538      	push	{r3, r4, r5, lr}
 8004842:	690b      	ldr	r3, [r1, #16]
 8004844:	4605      	mov	r5, r0
 8004846:	460c      	mov	r4, r1
 8004848:	b913      	cbnz	r3, 8004850 <_fflush_r+0x10>
 800484a:	2500      	movs	r5, #0
 800484c:	4628      	mov	r0, r5
 800484e:	bd38      	pop	{r3, r4, r5, pc}
 8004850:	b118      	cbz	r0, 800485a <_fflush_r+0x1a>
 8004852:	6a03      	ldr	r3, [r0, #32]
 8004854:	b90b      	cbnz	r3, 800485a <_fflush_r+0x1a>
 8004856:	f7ff fa9b 	bl	8003d90 <__sinit>
 800485a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0f3      	beq.n	800484a <_fflush_r+0xa>
 8004862:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004864:	07d0      	lsls	r0, r2, #31
 8004866:	d404      	bmi.n	8004872 <_fflush_r+0x32>
 8004868:	0599      	lsls	r1, r3, #22
 800486a:	d402      	bmi.n	8004872 <_fflush_r+0x32>
 800486c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800486e:	f7ff fbf6 	bl	800405e <__retarget_lock_acquire_recursive>
 8004872:	4628      	mov	r0, r5
 8004874:	4621      	mov	r1, r4
 8004876:	f7ff ff5d 	bl	8004734 <__sflush_r>
 800487a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800487c:	07da      	lsls	r2, r3, #31
 800487e:	4605      	mov	r5, r0
 8004880:	d4e4      	bmi.n	800484c <_fflush_r+0xc>
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	059b      	lsls	r3, r3, #22
 8004886:	d4e1      	bmi.n	800484c <_fflush_r+0xc>
 8004888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800488a:	f7ff fbe9 	bl	8004060 <__retarget_lock_release_recursive>
 800488e:	e7dd      	b.n	800484c <_fflush_r+0xc>

08004890 <fiprintf>:
 8004890:	b40e      	push	{r1, r2, r3}
 8004892:	b503      	push	{r0, r1, lr}
 8004894:	4601      	mov	r1, r0
 8004896:	ab03      	add	r3, sp, #12
 8004898:	4805      	ldr	r0, [pc, #20]	; (80048b0 <fiprintf+0x20>)
 800489a:	f853 2b04 	ldr.w	r2, [r3], #4
 800489e:	6800      	ldr	r0, [r0, #0]
 80048a0:	9301      	str	r3, [sp, #4]
 80048a2:	f000 f879 	bl	8004998 <_vfiprintf_r>
 80048a6:	b002      	add	sp, #8
 80048a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048ac:	b003      	add	sp, #12
 80048ae:	4770      	bx	lr
 80048b0:	2000009c 	.word	0x2000009c

080048b4 <memmove>:
 80048b4:	4288      	cmp	r0, r1
 80048b6:	b510      	push	{r4, lr}
 80048b8:	eb01 0402 	add.w	r4, r1, r2
 80048bc:	d902      	bls.n	80048c4 <memmove+0x10>
 80048be:	4284      	cmp	r4, r0
 80048c0:	4623      	mov	r3, r4
 80048c2:	d807      	bhi.n	80048d4 <memmove+0x20>
 80048c4:	1e43      	subs	r3, r0, #1
 80048c6:	42a1      	cmp	r1, r4
 80048c8:	d008      	beq.n	80048dc <memmove+0x28>
 80048ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048d2:	e7f8      	b.n	80048c6 <memmove+0x12>
 80048d4:	4402      	add	r2, r0
 80048d6:	4601      	mov	r1, r0
 80048d8:	428a      	cmp	r2, r1
 80048da:	d100      	bne.n	80048de <memmove+0x2a>
 80048dc:	bd10      	pop	{r4, pc}
 80048de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048e6:	e7f7      	b.n	80048d8 <memmove+0x24>

080048e8 <_realloc_r>:
 80048e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ec:	4680      	mov	r8, r0
 80048ee:	4614      	mov	r4, r2
 80048f0:	460e      	mov	r6, r1
 80048f2:	b921      	cbnz	r1, 80048fe <_realloc_r+0x16>
 80048f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048f8:	4611      	mov	r1, r2
 80048fa:	f7ff b8c5 	b.w	8003a88 <_malloc_r>
 80048fe:	b92a      	cbnz	r2, 800490c <_realloc_r+0x24>
 8004900:	f7ff fbe4 	bl	80040cc <_free_r>
 8004904:	4625      	mov	r5, r4
 8004906:	4628      	mov	r0, r5
 8004908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800490c:	f000 f9f4 	bl	8004cf8 <_malloc_usable_size_r>
 8004910:	4284      	cmp	r4, r0
 8004912:	4607      	mov	r7, r0
 8004914:	d802      	bhi.n	800491c <_realloc_r+0x34>
 8004916:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800491a:	d812      	bhi.n	8004942 <_realloc_r+0x5a>
 800491c:	4621      	mov	r1, r4
 800491e:	4640      	mov	r0, r8
 8004920:	f7ff f8b2 	bl	8003a88 <_malloc_r>
 8004924:	4605      	mov	r5, r0
 8004926:	2800      	cmp	r0, #0
 8004928:	d0ed      	beq.n	8004906 <_realloc_r+0x1e>
 800492a:	42bc      	cmp	r4, r7
 800492c:	4622      	mov	r2, r4
 800492e:	4631      	mov	r1, r6
 8004930:	bf28      	it	cs
 8004932:	463a      	movcs	r2, r7
 8004934:	f7ff fb9d 	bl	8004072 <memcpy>
 8004938:	4631      	mov	r1, r6
 800493a:	4640      	mov	r0, r8
 800493c:	f7ff fbc6 	bl	80040cc <_free_r>
 8004940:	e7e1      	b.n	8004906 <_realloc_r+0x1e>
 8004942:	4635      	mov	r5, r6
 8004944:	e7df      	b.n	8004906 <_realloc_r+0x1e>

08004946 <__sfputc_r>:
 8004946:	6893      	ldr	r3, [r2, #8]
 8004948:	3b01      	subs	r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	b410      	push	{r4}
 800494e:	6093      	str	r3, [r2, #8]
 8004950:	da08      	bge.n	8004964 <__sfputc_r+0x1e>
 8004952:	6994      	ldr	r4, [r2, #24]
 8004954:	42a3      	cmp	r3, r4
 8004956:	db01      	blt.n	800495c <__sfputc_r+0x16>
 8004958:	290a      	cmp	r1, #10
 800495a:	d103      	bne.n	8004964 <__sfputc_r+0x1e>
 800495c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004960:	f000 b934 	b.w	8004bcc <__swbuf_r>
 8004964:	6813      	ldr	r3, [r2, #0]
 8004966:	1c58      	adds	r0, r3, #1
 8004968:	6010      	str	r0, [r2, #0]
 800496a:	7019      	strb	r1, [r3, #0]
 800496c:	4608      	mov	r0, r1
 800496e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004972:	4770      	bx	lr

08004974 <__sfputs_r>:
 8004974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004976:	4606      	mov	r6, r0
 8004978:	460f      	mov	r7, r1
 800497a:	4614      	mov	r4, r2
 800497c:	18d5      	adds	r5, r2, r3
 800497e:	42ac      	cmp	r4, r5
 8004980:	d101      	bne.n	8004986 <__sfputs_r+0x12>
 8004982:	2000      	movs	r0, #0
 8004984:	e007      	b.n	8004996 <__sfputs_r+0x22>
 8004986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800498a:	463a      	mov	r2, r7
 800498c:	4630      	mov	r0, r6
 800498e:	f7ff ffda 	bl	8004946 <__sfputc_r>
 8004992:	1c43      	adds	r3, r0, #1
 8004994:	d1f3      	bne.n	800497e <__sfputs_r+0xa>
 8004996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004998 <_vfiprintf_r>:
 8004998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499c:	460d      	mov	r5, r1
 800499e:	b09d      	sub	sp, #116	; 0x74
 80049a0:	4614      	mov	r4, r2
 80049a2:	4698      	mov	r8, r3
 80049a4:	4606      	mov	r6, r0
 80049a6:	b118      	cbz	r0, 80049b0 <_vfiprintf_r+0x18>
 80049a8:	6a03      	ldr	r3, [r0, #32]
 80049aa:	b90b      	cbnz	r3, 80049b0 <_vfiprintf_r+0x18>
 80049ac:	f7ff f9f0 	bl	8003d90 <__sinit>
 80049b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049b2:	07d9      	lsls	r1, r3, #31
 80049b4:	d405      	bmi.n	80049c2 <_vfiprintf_r+0x2a>
 80049b6:	89ab      	ldrh	r3, [r5, #12]
 80049b8:	059a      	lsls	r2, r3, #22
 80049ba:	d402      	bmi.n	80049c2 <_vfiprintf_r+0x2a>
 80049bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049be:	f7ff fb4e 	bl	800405e <__retarget_lock_acquire_recursive>
 80049c2:	89ab      	ldrh	r3, [r5, #12]
 80049c4:	071b      	lsls	r3, r3, #28
 80049c6:	d501      	bpl.n	80049cc <_vfiprintf_r+0x34>
 80049c8:	692b      	ldr	r3, [r5, #16]
 80049ca:	b99b      	cbnz	r3, 80049f4 <_vfiprintf_r+0x5c>
 80049cc:	4629      	mov	r1, r5
 80049ce:	4630      	mov	r0, r6
 80049d0:	f000 f93a 	bl	8004c48 <__swsetup_r>
 80049d4:	b170      	cbz	r0, 80049f4 <_vfiprintf_r+0x5c>
 80049d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049d8:	07dc      	lsls	r4, r3, #31
 80049da:	d504      	bpl.n	80049e6 <_vfiprintf_r+0x4e>
 80049dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049e0:	b01d      	add	sp, #116	; 0x74
 80049e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e6:	89ab      	ldrh	r3, [r5, #12]
 80049e8:	0598      	lsls	r0, r3, #22
 80049ea:	d4f7      	bmi.n	80049dc <_vfiprintf_r+0x44>
 80049ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049ee:	f7ff fb37 	bl	8004060 <__retarget_lock_release_recursive>
 80049f2:	e7f3      	b.n	80049dc <_vfiprintf_r+0x44>
 80049f4:	2300      	movs	r3, #0
 80049f6:	9309      	str	r3, [sp, #36]	; 0x24
 80049f8:	2320      	movs	r3, #32
 80049fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a02:	2330      	movs	r3, #48	; 0x30
 8004a04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004bb8 <_vfiprintf_r+0x220>
 8004a08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a0c:	f04f 0901 	mov.w	r9, #1
 8004a10:	4623      	mov	r3, r4
 8004a12:	469a      	mov	sl, r3
 8004a14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a18:	b10a      	cbz	r2, 8004a1e <_vfiprintf_r+0x86>
 8004a1a:	2a25      	cmp	r2, #37	; 0x25
 8004a1c:	d1f9      	bne.n	8004a12 <_vfiprintf_r+0x7a>
 8004a1e:	ebba 0b04 	subs.w	fp, sl, r4
 8004a22:	d00b      	beq.n	8004a3c <_vfiprintf_r+0xa4>
 8004a24:	465b      	mov	r3, fp
 8004a26:	4622      	mov	r2, r4
 8004a28:	4629      	mov	r1, r5
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	f7ff ffa2 	bl	8004974 <__sfputs_r>
 8004a30:	3001      	adds	r0, #1
 8004a32:	f000 80a9 	beq.w	8004b88 <_vfiprintf_r+0x1f0>
 8004a36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a38:	445a      	add	r2, fp
 8004a3a:	9209      	str	r2, [sp, #36]	; 0x24
 8004a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 80a1 	beq.w	8004b88 <_vfiprintf_r+0x1f0>
 8004a46:	2300      	movs	r3, #0
 8004a48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a50:	f10a 0a01 	add.w	sl, sl, #1
 8004a54:	9304      	str	r3, [sp, #16]
 8004a56:	9307      	str	r3, [sp, #28]
 8004a58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a5c:	931a      	str	r3, [sp, #104]	; 0x68
 8004a5e:	4654      	mov	r4, sl
 8004a60:	2205      	movs	r2, #5
 8004a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a66:	4854      	ldr	r0, [pc, #336]	; (8004bb8 <_vfiprintf_r+0x220>)
 8004a68:	f7fb fbb2 	bl	80001d0 <memchr>
 8004a6c:	9a04      	ldr	r2, [sp, #16]
 8004a6e:	b9d8      	cbnz	r0, 8004aa8 <_vfiprintf_r+0x110>
 8004a70:	06d1      	lsls	r1, r2, #27
 8004a72:	bf44      	itt	mi
 8004a74:	2320      	movmi	r3, #32
 8004a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a7a:	0713      	lsls	r3, r2, #28
 8004a7c:	bf44      	itt	mi
 8004a7e:	232b      	movmi	r3, #43	; 0x2b
 8004a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a84:	f89a 3000 	ldrb.w	r3, [sl]
 8004a88:	2b2a      	cmp	r3, #42	; 0x2a
 8004a8a:	d015      	beq.n	8004ab8 <_vfiprintf_r+0x120>
 8004a8c:	9a07      	ldr	r2, [sp, #28]
 8004a8e:	4654      	mov	r4, sl
 8004a90:	2000      	movs	r0, #0
 8004a92:	f04f 0c0a 	mov.w	ip, #10
 8004a96:	4621      	mov	r1, r4
 8004a98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a9c:	3b30      	subs	r3, #48	; 0x30
 8004a9e:	2b09      	cmp	r3, #9
 8004aa0:	d94d      	bls.n	8004b3e <_vfiprintf_r+0x1a6>
 8004aa2:	b1b0      	cbz	r0, 8004ad2 <_vfiprintf_r+0x13a>
 8004aa4:	9207      	str	r2, [sp, #28]
 8004aa6:	e014      	b.n	8004ad2 <_vfiprintf_r+0x13a>
 8004aa8:	eba0 0308 	sub.w	r3, r0, r8
 8004aac:	fa09 f303 	lsl.w	r3, r9, r3
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	9304      	str	r3, [sp, #16]
 8004ab4:	46a2      	mov	sl, r4
 8004ab6:	e7d2      	b.n	8004a5e <_vfiprintf_r+0xc6>
 8004ab8:	9b03      	ldr	r3, [sp, #12]
 8004aba:	1d19      	adds	r1, r3, #4
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	9103      	str	r1, [sp, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	bfbb      	ittet	lt
 8004ac4:	425b      	neglt	r3, r3
 8004ac6:	f042 0202 	orrlt.w	r2, r2, #2
 8004aca:	9307      	strge	r3, [sp, #28]
 8004acc:	9307      	strlt	r3, [sp, #28]
 8004ace:	bfb8      	it	lt
 8004ad0:	9204      	strlt	r2, [sp, #16]
 8004ad2:	7823      	ldrb	r3, [r4, #0]
 8004ad4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ad6:	d10c      	bne.n	8004af2 <_vfiprintf_r+0x15a>
 8004ad8:	7863      	ldrb	r3, [r4, #1]
 8004ada:	2b2a      	cmp	r3, #42	; 0x2a
 8004adc:	d134      	bne.n	8004b48 <_vfiprintf_r+0x1b0>
 8004ade:	9b03      	ldr	r3, [sp, #12]
 8004ae0:	1d1a      	adds	r2, r3, #4
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	9203      	str	r2, [sp, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	bfb8      	it	lt
 8004aea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004aee:	3402      	adds	r4, #2
 8004af0:	9305      	str	r3, [sp, #20]
 8004af2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004bc8 <_vfiprintf_r+0x230>
 8004af6:	7821      	ldrb	r1, [r4, #0]
 8004af8:	2203      	movs	r2, #3
 8004afa:	4650      	mov	r0, sl
 8004afc:	f7fb fb68 	bl	80001d0 <memchr>
 8004b00:	b138      	cbz	r0, 8004b12 <_vfiprintf_r+0x17a>
 8004b02:	9b04      	ldr	r3, [sp, #16]
 8004b04:	eba0 000a 	sub.w	r0, r0, sl
 8004b08:	2240      	movs	r2, #64	; 0x40
 8004b0a:	4082      	lsls	r2, r0
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	3401      	adds	r4, #1
 8004b10:	9304      	str	r3, [sp, #16]
 8004b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b16:	4829      	ldr	r0, [pc, #164]	; (8004bbc <_vfiprintf_r+0x224>)
 8004b18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b1c:	2206      	movs	r2, #6
 8004b1e:	f7fb fb57 	bl	80001d0 <memchr>
 8004b22:	2800      	cmp	r0, #0
 8004b24:	d03f      	beq.n	8004ba6 <_vfiprintf_r+0x20e>
 8004b26:	4b26      	ldr	r3, [pc, #152]	; (8004bc0 <_vfiprintf_r+0x228>)
 8004b28:	bb1b      	cbnz	r3, 8004b72 <_vfiprintf_r+0x1da>
 8004b2a:	9b03      	ldr	r3, [sp, #12]
 8004b2c:	3307      	adds	r3, #7
 8004b2e:	f023 0307 	bic.w	r3, r3, #7
 8004b32:	3308      	adds	r3, #8
 8004b34:	9303      	str	r3, [sp, #12]
 8004b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b38:	443b      	add	r3, r7
 8004b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b3c:	e768      	b.n	8004a10 <_vfiprintf_r+0x78>
 8004b3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b42:	460c      	mov	r4, r1
 8004b44:	2001      	movs	r0, #1
 8004b46:	e7a6      	b.n	8004a96 <_vfiprintf_r+0xfe>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	3401      	adds	r4, #1
 8004b4c:	9305      	str	r3, [sp, #20]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	f04f 0c0a 	mov.w	ip, #10
 8004b54:	4620      	mov	r0, r4
 8004b56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b5a:	3a30      	subs	r2, #48	; 0x30
 8004b5c:	2a09      	cmp	r2, #9
 8004b5e:	d903      	bls.n	8004b68 <_vfiprintf_r+0x1d0>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0c6      	beq.n	8004af2 <_vfiprintf_r+0x15a>
 8004b64:	9105      	str	r1, [sp, #20]
 8004b66:	e7c4      	b.n	8004af2 <_vfiprintf_r+0x15a>
 8004b68:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e7f0      	b.n	8004b54 <_vfiprintf_r+0x1bc>
 8004b72:	ab03      	add	r3, sp, #12
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	462a      	mov	r2, r5
 8004b78:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <_vfiprintf_r+0x22c>)
 8004b7a:	a904      	add	r1, sp, #16
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	f3af 8000 	nop.w
 8004b82:	4607      	mov	r7, r0
 8004b84:	1c78      	adds	r0, r7, #1
 8004b86:	d1d6      	bne.n	8004b36 <_vfiprintf_r+0x19e>
 8004b88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b8a:	07d9      	lsls	r1, r3, #31
 8004b8c:	d405      	bmi.n	8004b9a <_vfiprintf_r+0x202>
 8004b8e:	89ab      	ldrh	r3, [r5, #12]
 8004b90:	059a      	lsls	r2, r3, #22
 8004b92:	d402      	bmi.n	8004b9a <_vfiprintf_r+0x202>
 8004b94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b96:	f7ff fa63 	bl	8004060 <__retarget_lock_release_recursive>
 8004b9a:	89ab      	ldrh	r3, [r5, #12]
 8004b9c:	065b      	lsls	r3, r3, #25
 8004b9e:	f53f af1d 	bmi.w	80049dc <_vfiprintf_r+0x44>
 8004ba2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ba4:	e71c      	b.n	80049e0 <_vfiprintf_r+0x48>
 8004ba6:	ab03      	add	r3, sp, #12
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	462a      	mov	r2, r5
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <_vfiprintf_r+0x22c>)
 8004bae:	a904      	add	r1, sp, #16
 8004bb0:	4630      	mov	r0, r6
 8004bb2:	f7ff fc9d 	bl	80044f0 <_printf_i>
 8004bb6:	e7e4      	b.n	8004b82 <_vfiprintf_r+0x1ea>
 8004bb8:	08004fa3 	.word	0x08004fa3
 8004bbc:	08004fad 	.word	0x08004fad
 8004bc0:	00000000 	.word	0x00000000
 8004bc4:	08004975 	.word	0x08004975
 8004bc8:	08004fa9 	.word	0x08004fa9

08004bcc <__swbuf_r>:
 8004bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bce:	460e      	mov	r6, r1
 8004bd0:	4614      	mov	r4, r2
 8004bd2:	4605      	mov	r5, r0
 8004bd4:	b118      	cbz	r0, 8004bde <__swbuf_r+0x12>
 8004bd6:	6a03      	ldr	r3, [r0, #32]
 8004bd8:	b90b      	cbnz	r3, 8004bde <__swbuf_r+0x12>
 8004bda:	f7ff f8d9 	bl	8003d90 <__sinit>
 8004bde:	69a3      	ldr	r3, [r4, #24]
 8004be0:	60a3      	str	r3, [r4, #8]
 8004be2:	89a3      	ldrh	r3, [r4, #12]
 8004be4:	071a      	lsls	r2, r3, #28
 8004be6:	d525      	bpl.n	8004c34 <__swbuf_r+0x68>
 8004be8:	6923      	ldr	r3, [r4, #16]
 8004bea:	b31b      	cbz	r3, 8004c34 <__swbuf_r+0x68>
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	6922      	ldr	r2, [r4, #16]
 8004bf0:	1a98      	subs	r0, r3, r2
 8004bf2:	6963      	ldr	r3, [r4, #20]
 8004bf4:	b2f6      	uxtb	r6, r6
 8004bf6:	4283      	cmp	r3, r0
 8004bf8:	4637      	mov	r7, r6
 8004bfa:	dc04      	bgt.n	8004c06 <__swbuf_r+0x3a>
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	4628      	mov	r0, r5
 8004c00:	f7ff fe1e 	bl	8004840 <_fflush_r>
 8004c04:	b9e0      	cbnz	r0, 8004c40 <__swbuf_r+0x74>
 8004c06:	68a3      	ldr	r3, [r4, #8]
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	60a3      	str	r3, [r4, #8]
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	6022      	str	r2, [r4, #0]
 8004c12:	701e      	strb	r6, [r3, #0]
 8004c14:	6962      	ldr	r2, [r4, #20]
 8004c16:	1c43      	adds	r3, r0, #1
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d004      	beq.n	8004c26 <__swbuf_r+0x5a>
 8004c1c:	89a3      	ldrh	r3, [r4, #12]
 8004c1e:	07db      	lsls	r3, r3, #31
 8004c20:	d506      	bpl.n	8004c30 <__swbuf_r+0x64>
 8004c22:	2e0a      	cmp	r6, #10
 8004c24:	d104      	bne.n	8004c30 <__swbuf_r+0x64>
 8004c26:	4621      	mov	r1, r4
 8004c28:	4628      	mov	r0, r5
 8004c2a:	f7ff fe09 	bl	8004840 <_fflush_r>
 8004c2e:	b938      	cbnz	r0, 8004c40 <__swbuf_r+0x74>
 8004c30:	4638      	mov	r0, r7
 8004c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c34:	4621      	mov	r1, r4
 8004c36:	4628      	mov	r0, r5
 8004c38:	f000 f806 	bl	8004c48 <__swsetup_r>
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	d0d5      	beq.n	8004bec <__swbuf_r+0x20>
 8004c40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004c44:	e7f4      	b.n	8004c30 <__swbuf_r+0x64>
	...

08004c48 <__swsetup_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4b2a      	ldr	r3, [pc, #168]	; (8004cf4 <__swsetup_r+0xac>)
 8004c4c:	4605      	mov	r5, r0
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	460c      	mov	r4, r1
 8004c52:	b118      	cbz	r0, 8004c5c <__swsetup_r+0x14>
 8004c54:	6a03      	ldr	r3, [r0, #32]
 8004c56:	b90b      	cbnz	r3, 8004c5c <__swsetup_r+0x14>
 8004c58:	f7ff f89a 	bl	8003d90 <__sinit>
 8004c5c:	89a3      	ldrh	r3, [r4, #12]
 8004c5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c62:	0718      	lsls	r0, r3, #28
 8004c64:	d422      	bmi.n	8004cac <__swsetup_r+0x64>
 8004c66:	06d9      	lsls	r1, r3, #27
 8004c68:	d407      	bmi.n	8004c7a <__swsetup_r+0x32>
 8004c6a:	2309      	movs	r3, #9
 8004c6c:	602b      	str	r3, [r5, #0]
 8004c6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c72:	81a3      	strh	r3, [r4, #12]
 8004c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c78:	e034      	b.n	8004ce4 <__swsetup_r+0x9c>
 8004c7a:	0758      	lsls	r0, r3, #29
 8004c7c:	d512      	bpl.n	8004ca4 <__swsetup_r+0x5c>
 8004c7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c80:	b141      	cbz	r1, 8004c94 <__swsetup_r+0x4c>
 8004c82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c86:	4299      	cmp	r1, r3
 8004c88:	d002      	beq.n	8004c90 <__swsetup_r+0x48>
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	f7ff fa1e 	bl	80040cc <_free_r>
 8004c90:	2300      	movs	r3, #0
 8004c92:	6363      	str	r3, [r4, #52]	; 0x34
 8004c94:	89a3      	ldrh	r3, [r4, #12]
 8004c96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c9a:	81a3      	strh	r3, [r4, #12]
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	6063      	str	r3, [r4, #4]
 8004ca0:	6923      	ldr	r3, [r4, #16]
 8004ca2:	6023      	str	r3, [r4, #0]
 8004ca4:	89a3      	ldrh	r3, [r4, #12]
 8004ca6:	f043 0308 	orr.w	r3, r3, #8
 8004caa:	81a3      	strh	r3, [r4, #12]
 8004cac:	6923      	ldr	r3, [r4, #16]
 8004cae:	b94b      	cbnz	r3, 8004cc4 <__swsetup_r+0x7c>
 8004cb0:	89a3      	ldrh	r3, [r4, #12]
 8004cb2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cba:	d003      	beq.n	8004cc4 <__swsetup_r+0x7c>
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f000 f848 	bl	8004d54 <__smakebuf_r>
 8004cc4:	89a0      	ldrh	r0, [r4, #12]
 8004cc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cca:	f010 0301 	ands.w	r3, r0, #1
 8004cce:	d00a      	beq.n	8004ce6 <__swsetup_r+0x9e>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60a3      	str	r3, [r4, #8]
 8004cd4:	6963      	ldr	r3, [r4, #20]
 8004cd6:	425b      	negs	r3, r3
 8004cd8:	61a3      	str	r3, [r4, #24]
 8004cda:	6923      	ldr	r3, [r4, #16]
 8004cdc:	b943      	cbnz	r3, 8004cf0 <__swsetup_r+0xa8>
 8004cde:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ce2:	d1c4      	bne.n	8004c6e <__swsetup_r+0x26>
 8004ce4:	bd38      	pop	{r3, r4, r5, pc}
 8004ce6:	0781      	lsls	r1, r0, #30
 8004ce8:	bf58      	it	pl
 8004cea:	6963      	ldrpl	r3, [r4, #20]
 8004cec:	60a3      	str	r3, [r4, #8]
 8004cee:	e7f4      	b.n	8004cda <__swsetup_r+0x92>
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	e7f7      	b.n	8004ce4 <__swsetup_r+0x9c>
 8004cf4:	2000009c 	.word	0x2000009c

08004cf8 <_malloc_usable_size_r>:
 8004cf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cfc:	1f18      	subs	r0, r3, #4
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	bfbc      	itt	lt
 8004d02:	580b      	ldrlt	r3, [r1, r0]
 8004d04:	18c0      	addlt	r0, r0, r3
 8004d06:	4770      	bx	lr

08004d08 <__swhatbuf_r>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d10:	2900      	cmp	r1, #0
 8004d12:	b096      	sub	sp, #88	; 0x58
 8004d14:	4615      	mov	r5, r2
 8004d16:	461e      	mov	r6, r3
 8004d18:	da0d      	bge.n	8004d36 <__swhatbuf_r+0x2e>
 8004d1a:	89a3      	ldrh	r3, [r4, #12]
 8004d1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d20:	f04f 0100 	mov.w	r1, #0
 8004d24:	bf0c      	ite	eq
 8004d26:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004d2a:	2340      	movne	r3, #64	; 0x40
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	6031      	str	r1, [r6, #0]
 8004d30:	602b      	str	r3, [r5, #0]
 8004d32:	b016      	add	sp, #88	; 0x58
 8004d34:	bd70      	pop	{r4, r5, r6, pc}
 8004d36:	466a      	mov	r2, sp
 8004d38:	f000 f848 	bl	8004dcc <_fstat_r>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	dbec      	blt.n	8004d1a <__swhatbuf_r+0x12>
 8004d40:	9901      	ldr	r1, [sp, #4]
 8004d42:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004d46:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004d4a:	4259      	negs	r1, r3
 8004d4c:	4159      	adcs	r1, r3
 8004d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d52:	e7eb      	b.n	8004d2c <__swhatbuf_r+0x24>

08004d54 <__smakebuf_r>:
 8004d54:	898b      	ldrh	r3, [r1, #12]
 8004d56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d58:	079d      	lsls	r5, r3, #30
 8004d5a:	4606      	mov	r6, r0
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	d507      	bpl.n	8004d70 <__smakebuf_r+0x1c>
 8004d60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	6123      	str	r3, [r4, #16]
 8004d68:	2301      	movs	r3, #1
 8004d6a:	6163      	str	r3, [r4, #20]
 8004d6c:	b002      	add	sp, #8
 8004d6e:	bd70      	pop	{r4, r5, r6, pc}
 8004d70:	ab01      	add	r3, sp, #4
 8004d72:	466a      	mov	r2, sp
 8004d74:	f7ff ffc8 	bl	8004d08 <__swhatbuf_r>
 8004d78:	9900      	ldr	r1, [sp, #0]
 8004d7a:	4605      	mov	r5, r0
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	f7fe fe83 	bl	8003a88 <_malloc_r>
 8004d82:	b948      	cbnz	r0, 8004d98 <__smakebuf_r+0x44>
 8004d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d88:	059a      	lsls	r2, r3, #22
 8004d8a:	d4ef      	bmi.n	8004d6c <__smakebuf_r+0x18>
 8004d8c:	f023 0303 	bic.w	r3, r3, #3
 8004d90:	f043 0302 	orr.w	r3, r3, #2
 8004d94:	81a3      	strh	r3, [r4, #12]
 8004d96:	e7e3      	b.n	8004d60 <__smakebuf_r+0xc>
 8004d98:	89a3      	ldrh	r3, [r4, #12]
 8004d9a:	6020      	str	r0, [r4, #0]
 8004d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da0:	81a3      	strh	r3, [r4, #12]
 8004da2:	9b00      	ldr	r3, [sp, #0]
 8004da4:	6163      	str	r3, [r4, #20]
 8004da6:	9b01      	ldr	r3, [sp, #4]
 8004da8:	6120      	str	r0, [r4, #16]
 8004daa:	b15b      	cbz	r3, 8004dc4 <__smakebuf_r+0x70>
 8004dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004db0:	4630      	mov	r0, r6
 8004db2:	f000 f81d 	bl	8004df0 <_isatty_r>
 8004db6:	b128      	cbz	r0, 8004dc4 <__smakebuf_r+0x70>
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	f023 0303 	bic.w	r3, r3, #3
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	81a3      	strh	r3, [r4, #12]
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	431d      	orrs	r5, r3
 8004dc8:	81a5      	strh	r5, [r4, #12]
 8004dca:	e7cf      	b.n	8004d6c <__smakebuf_r+0x18>

08004dcc <_fstat_r>:
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	4d07      	ldr	r5, [pc, #28]	; (8004dec <_fstat_r+0x20>)
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	4608      	mov	r0, r1
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	602b      	str	r3, [r5, #0]
 8004dda:	f7fd fbd8 	bl	800258e <_fstat>
 8004dde:	1c43      	adds	r3, r0, #1
 8004de0:	d102      	bne.n	8004de8 <_fstat_r+0x1c>
 8004de2:	682b      	ldr	r3, [r5, #0]
 8004de4:	b103      	cbz	r3, 8004de8 <_fstat_r+0x1c>
 8004de6:	6023      	str	r3, [r4, #0]
 8004de8:	bd38      	pop	{r3, r4, r5, pc}
 8004dea:	bf00      	nop
 8004dec:	20000214 	.word	0x20000214

08004df0 <_isatty_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4d06      	ldr	r5, [pc, #24]	; (8004e0c <_isatty_r+0x1c>)
 8004df4:	2300      	movs	r3, #0
 8004df6:	4604      	mov	r4, r0
 8004df8:	4608      	mov	r0, r1
 8004dfa:	602b      	str	r3, [r5, #0]
 8004dfc:	f7fd fbd7 	bl	80025ae <_isatty>
 8004e00:	1c43      	adds	r3, r0, #1
 8004e02:	d102      	bne.n	8004e0a <_isatty_r+0x1a>
 8004e04:	682b      	ldr	r3, [r5, #0]
 8004e06:	b103      	cbz	r3, 8004e0a <_isatty_r+0x1a>
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	bd38      	pop	{r3, r4, r5, pc}
 8004e0c:	20000214 	.word	0x20000214

08004e10 <_init>:
 8004e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e12:	bf00      	nop
 8004e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e16:	bc08      	pop	{r3}
 8004e18:	469e      	mov	lr, r3
 8004e1a:	4770      	bx	lr

08004e1c <_fini>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	bf00      	nop
 8004e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e22:	bc08      	pop	{r3}
 8004e24:	469e      	mov	lr, r3
 8004e26:	4770      	bx	lr
