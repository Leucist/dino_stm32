
dino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001da8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08001f30  08001f30  00011f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fa8  08001fa8  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08001fa8  08001fa8  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fa8  08001fa8  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fa8  08001fa8  00011fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fac  08001fac  00011fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08001fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000034  08001fe4  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08001fe4  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a367  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a26  00000000  00000000  0002a40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000908  00000000  00000000  0002be38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006a7  00000000  00000000  0002c740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025bf2  00000000  00000000  0002cde7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000081ce  00000000  00000000  000529d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eab9d  00000000  00000000  0005aba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002434  00000000  00000000  00145744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00147b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001f18 	.word	0x08001f18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	08001f18 	.word	0x08001f18

080001c8 <_Z5Delaym>:
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	e002      	b.n	80001d8 <_Z5Delaym+0x10>
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	3b01      	subs	r3, #1
 80001d6:	607b      	str	r3, [r7, #4]
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d1f9      	bne.n	80001d2 <_Z5Delaym+0xa>
 80001de:	bf00      	nop
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr

080001ec <_Z9lcd_delayv>:
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
 80001f0:	20c8      	movs	r0, #200	; 0xc8
 80001f2:	f7ff ffe9 	bl	80001c8 <_Z5Delaym>
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
	...

080001fc <_Z7lcd_cmdc>:
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
 8000206:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800020a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800020e:	629a      	str	r2, [r3, #40]	; 0x28
 8000210:	4b64      	ldr	r3, [pc, #400]	; (80003a4 <_Z7lcd_cmdc+0x1a8>)
 8000212:	2280      	movs	r2, #128	; 0x80
 8000214:	629a      	str	r2, [r3, #40]	; 0x28
 8000216:	4b64      	ldr	r3, [pc, #400]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 8000218:	2220      	movs	r2, #32
 800021a:	629a      	str	r2, [r3, #40]	; 0x28
 800021c:	4b62      	ldr	r3, [pc, #392]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 800021e:	2210      	movs	r2, #16
 8000220:	629a      	str	r2, [r3, #40]	; 0x28
 8000222:	4b61      	ldr	r3, [pc, #388]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 8000224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000228:	629a      	str	r2, [r3, #40]	; 0x28
 800022a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800022e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000232:	629a      	str	r2, [r3, #40]	; 0x28
 8000234:	f7ff ffda 	bl	80001ec <_Z9lcd_delayv>
 8000238:	4b5a      	ldr	r3, [pc, #360]	; (80003a4 <_Z7lcd_cmdc+0x1a8>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	4a59      	ldr	r2, [pc, #356]	; (80003a4 <_Z7lcd_cmdc+0x1a8>)
 800023e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000242:	6153      	str	r3, [r2, #20]
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	091b      	lsrs	r3, r3, #4
 8000248:	b2db      	uxtb	r3, r3
 800024a:	f003 0301 	and.w	r3, r3, #1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d003      	beq.n	800025a <_Z7lcd_cmdc+0x5e>
 8000252:	4b55      	ldr	r3, [pc, #340]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 8000254:	2220      	movs	r2, #32
 8000256:	619a      	str	r2, [r3, #24]
 8000258:	e003      	b.n	8000262 <_Z7lcd_cmdc+0x66>
 800025a:	4b53      	ldr	r3, [pc, #332]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 800025c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000260:	619a      	str	r2, [r3, #24]
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	095b      	lsrs	r3, r3, #5
 8000266:	b2db      	uxtb	r3, r3
 8000268:	f003 0301 	and.w	r3, r3, #1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d003      	beq.n	8000278 <_Z7lcd_cmdc+0x7c>
 8000270:	4b4d      	ldr	r3, [pc, #308]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 8000272:	2210      	movs	r2, #16
 8000274:	619a      	str	r2, [r3, #24]
 8000276:	e003      	b.n	8000280 <_Z7lcd_cmdc+0x84>
 8000278:	4b4b      	ldr	r3, [pc, #300]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 800027a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800027e:	619a      	str	r2, [r3, #24]
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	099b      	lsrs	r3, r3, #6
 8000284:	b2db      	uxtb	r3, r3
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	2b00      	cmp	r3, #0
 800028c:	d004      	beq.n	8000298 <_Z7lcd_cmdc+0x9c>
 800028e:	4b46      	ldr	r3, [pc, #280]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 8000290:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000294:	619a      	str	r2, [r3, #24]
 8000296:	e003      	b.n	80002a0 <_Z7lcd_cmdc+0xa4>
 8000298:	4b43      	ldr	r3, [pc, #268]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 800029a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800029e:	619a      	str	r2, [r3, #24]
 80002a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	da05      	bge.n	80002b4 <_Z7lcd_cmdc+0xb8>
 80002a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002b0:	619a      	str	r2, [r3, #24]
 80002b2:	e004      	b.n	80002be <_Z7lcd_cmdc+0xc2>
 80002b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002bc:	619a      	str	r2, [r3, #24]
 80002be:	f7ff ff95 	bl	80001ec <_Z9lcd_delayv>
 80002c2:	4b38      	ldr	r3, [pc, #224]	; (80003a4 <_Z7lcd_cmdc+0x1a8>)
 80002c4:	2280      	movs	r2, #128	; 0x80
 80002c6:	629a      	str	r2, [r3, #40]	; 0x28
 80002c8:	4b37      	ldr	r3, [pc, #220]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 80002ca:	2220      	movs	r2, #32
 80002cc:	629a      	str	r2, [r3, #40]	; 0x28
 80002ce:	4b36      	ldr	r3, [pc, #216]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 80002d0:	2210      	movs	r2, #16
 80002d2:	629a      	str	r2, [r3, #40]	; 0x28
 80002d4:	4b34      	ldr	r3, [pc, #208]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 80002d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002da:	629a      	str	r2, [r3, #40]	; 0x28
 80002dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002e4:	629a      	str	r2, [r3, #40]	; 0x28
 80002e6:	f7ff ff81 	bl	80001ec <_Z9lcd_delayv>
 80002ea:	4b2e      	ldr	r3, [pc, #184]	; (80003a4 <_Z7lcd_cmdc+0x1a8>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a2d      	ldr	r2, [pc, #180]	; (80003a4 <_Z7lcd_cmdc+0x1a8>)
 80002f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002f4:	6153      	str	r3, [r2, #20]
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d003      	beq.n	8000308 <_Z7lcd_cmdc+0x10c>
 8000300:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 8000302:	2220      	movs	r2, #32
 8000304:	619a      	str	r2, [r3, #24]
 8000306:	e003      	b.n	8000310 <_Z7lcd_cmdc+0x114>
 8000308:	4b27      	ldr	r3, [pc, #156]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 800030a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800030e:	619a      	str	r2, [r3, #24]
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	085b      	lsrs	r3, r3, #1
 8000314:	b2db      	uxtb	r3, r3
 8000316:	f003 0301 	and.w	r3, r3, #1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d003      	beq.n	8000326 <_Z7lcd_cmdc+0x12a>
 800031e:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 8000320:	2210      	movs	r2, #16
 8000322:	619a      	str	r2, [r3, #24]
 8000324:	e003      	b.n	800032e <_Z7lcd_cmdc+0x132>
 8000326:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 8000328:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800032c:	619a      	str	r2, [r3, #24]
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	089b      	lsrs	r3, r3, #2
 8000332:	b2db      	uxtb	r3, r3
 8000334:	f003 0301 	and.w	r3, r3, #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	d004      	beq.n	8000346 <_Z7lcd_cmdc+0x14a>
 800033c:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 800033e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000342:	619a      	str	r2, [r3, #24]
 8000344:	e003      	b.n	800034e <_Z7lcd_cmdc+0x152>
 8000346:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 8000348:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800034c:	619a      	str	r2, [r3, #24]
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	08db      	lsrs	r3, r3, #3
 8000352:	b2db      	uxtb	r3, r3
 8000354:	f003 0301 	and.w	r3, r3, #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d005      	beq.n	8000368 <_Z7lcd_cmdc+0x16c>
 800035c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000360:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000364:	619a      	str	r2, [r3, #24]
 8000366:	e004      	b.n	8000372 <_Z7lcd_cmdc+0x176>
 8000368:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800036c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000370:	619a      	str	r2, [r3, #24]
 8000372:	f7ff ff3b 	bl	80001ec <_Z9lcd_delayv>
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <_Z7lcd_cmdc+0x1a8>)
 8000378:	2280      	movs	r2, #128	; 0x80
 800037a:	629a      	str	r2, [r3, #40]	; 0x28
 800037c:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 800037e:	2220      	movs	r2, #32
 8000380:	629a      	str	r2, [r3, #40]	; 0x28
 8000382:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 8000384:	2210      	movs	r2, #16
 8000386:	629a      	str	r2, [r3, #40]	; 0x28
 8000388:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <_Z7lcd_cmdc+0x1ac>)
 800038a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800038e:	629a      	str	r2, [r3, #40]	; 0x28
 8000390:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000394:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000398:	629a      	str	r2, [r3, #40]	; 0x28
 800039a:	bf00      	nop
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	48000800 	.word	0x48000800
 80003a8:	48000400 	.word	0x48000400

080003ac <_Z11lcd_char_cpc>:
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
 80003b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003c4:	6153      	str	r3, [r2, #20]
 80003c6:	4b64      	ldr	r3, [pc, #400]	; (8000558 <_Z11lcd_char_cpc+0x1ac>)
 80003c8:	2280      	movs	r2, #128	; 0x80
 80003ca:	629a      	str	r2, [r3, #40]	; 0x28
 80003cc:	4b63      	ldr	r3, [pc, #396]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 80003ce:	2220      	movs	r2, #32
 80003d0:	629a      	str	r2, [r3, #40]	; 0x28
 80003d2:	4b62      	ldr	r3, [pc, #392]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 80003d4:	2210      	movs	r2, #16
 80003d6:	629a      	str	r2, [r3, #40]	; 0x28
 80003d8:	4b60      	ldr	r3, [pc, #384]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 80003da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003de:	629a      	str	r2, [r3, #40]	; 0x28
 80003e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003e8:	629a      	str	r2, [r3, #40]	; 0x28
 80003ea:	f7ff feff 	bl	80001ec <_Z9lcd_delayv>
 80003ee:	4b5a      	ldr	r3, [pc, #360]	; (8000558 <_Z11lcd_char_cpc+0x1ac>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a59      	ldr	r2, [pc, #356]	; (8000558 <_Z11lcd_char_cpc+0x1ac>)
 80003f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	091b      	lsrs	r3, r3, #4
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	f003 0301 	and.w	r3, r3, #1
 8000404:	2b00      	cmp	r3, #0
 8000406:	d003      	beq.n	8000410 <_Z11lcd_char_cpc+0x64>
 8000408:	4b54      	ldr	r3, [pc, #336]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 800040a:	2220      	movs	r2, #32
 800040c:	619a      	str	r2, [r3, #24]
 800040e:	e003      	b.n	8000418 <_Z11lcd_char_cpc+0x6c>
 8000410:	4b52      	ldr	r3, [pc, #328]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 8000412:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000416:	619a      	str	r2, [r3, #24]
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	095b      	lsrs	r3, r3, #5
 800041c:	b2db      	uxtb	r3, r3
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	2b00      	cmp	r3, #0
 8000424:	d003      	beq.n	800042e <_Z11lcd_char_cpc+0x82>
 8000426:	4b4d      	ldr	r3, [pc, #308]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 8000428:	2210      	movs	r2, #16
 800042a:	619a      	str	r2, [r3, #24]
 800042c:	e003      	b.n	8000436 <_Z11lcd_char_cpc+0x8a>
 800042e:	4b4b      	ldr	r3, [pc, #300]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 8000430:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000434:	619a      	str	r2, [r3, #24]
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	099b      	lsrs	r3, r3, #6
 800043a:	b2db      	uxtb	r3, r3
 800043c:	f003 0301 	and.w	r3, r3, #1
 8000440:	2b00      	cmp	r3, #0
 8000442:	d004      	beq.n	800044e <_Z11lcd_char_cpc+0xa2>
 8000444:	4b45      	ldr	r3, [pc, #276]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 8000446:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800044a:	619a      	str	r2, [r3, #24]
 800044c:	e003      	b.n	8000456 <_Z11lcd_char_cpc+0xaa>
 800044e:	4b43      	ldr	r3, [pc, #268]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 8000450:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000454:	619a      	str	r2, [r3, #24]
 8000456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800045a:	2b00      	cmp	r3, #0
 800045c:	da05      	bge.n	800046a <_Z11lcd_char_cpc+0xbe>
 800045e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000466:	619a      	str	r2, [r3, #24]
 8000468:	e004      	b.n	8000474 <_Z11lcd_char_cpc+0xc8>
 800046a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800046e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000472:	619a      	str	r2, [r3, #24]
 8000474:	f7ff feba 	bl	80001ec <_Z9lcd_delayv>
 8000478:	4b37      	ldr	r3, [pc, #220]	; (8000558 <_Z11lcd_char_cpc+0x1ac>)
 800047a:	2280      	movs	r2, #128	; 0x80
 800047c:	629a      	str	r2, [r3, #40]	; 0x28
 800047e:	4b37      	ldr	r3, [pc, #220]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 8000480:	2220      	movs	r2, #32
 8000482:	629a      	str	r2, [r3, #40]	; 0x28
 8000484:	4b35      	ldr	r3, [pc, #212]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 8000486:	2210      	movs	r2, #16
 8000488:	629a      	str	r2, [r3, #40]	; 0x28
 800048a:	4b34      	ldr	r3, [pc, #208]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 800048c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000490:	629a      	str	r2, [r3, #40]	; 0x28
 8000492:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800049a:	629a      	str	r2, [r3, #40]	; 0x28
 800049c:	f7ff fea6 	bl	80001ec <_Z9lcd_delayv>
 80004a0:	4b2d      	ldr	r3, [pc, #180]	; (8000558 <_Z11lcd_char_cpc+0x1ac>)
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	4a2c      	ldr	r2, [pc, #176]	; (8000558 <_Z11lcd_char_cpc+0x1ac>)
 80004a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004aa:	6153      	str	r3, [r2, #20]
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d003      	beq.n	80004be <_Z11lcd_char_cpc+0x112>
 80004b6:	4b29      	ldr	r3, [pc, #164]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 80004b8:	2220      	movs	r2, #32
 80004ba:	619a      	str	r2, [r3, #24]
 80004bc:	e003      	b.n	80004c6 <_Z11lcd_char_cpc+0x11a>
 80004be:	4b27      	ldr	r3, [pc, #156]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 80004c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80004c4:	619a      	str	r2, [r3, #24]
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	085b      	lsrs	r3, r3, #1
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	f003 0301 	and.w	r3, r3, #1
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d003      	beq.n	80004dc <_Z11lcd_char_cpc+0x130>
 80004d4:	4b21      	ldr	r3, [pc, #132]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 80004d6:	2210      	movs	r2, #16
 80004d8:	619a      	str	r2, [r3, #24]
 80004da:	e003      	b.n	80004e4 <_Z11lcd_char_cpc+0x138>
 80004dc:	4b1f      	ldr	r3, [pc, #124]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 80004de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80004e2:	619a      	str	r2, [r3, #24]
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	089b      	lsrs	r3, r3, #2
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d004      	beq.n	80004fc <_Z11lcd_char_cpc+0x150>
 80004f2:	4b1a      	ldr	r3, [pc, #104]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 80004f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004f8:	619a      	str	r2, [r3, #24]
 80004fa:	e003      	b.n	8000504 <_Z11lcd_char_cpc+0x158>
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 80004fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000502:	619a      	str	r2, [r3, #24]
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	08db      	lsrs	r3, r3, #3
 8000508:	b2db      	uxtb	r3, r3
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	2b00      	cmp	r3, #0
 8000510:	d005      	beq.n	800051e <_Z11lcd_char_cpc+0x172>
 8000512:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800051a:	619a      	str	r2, [r3, #24]
 800051c:	e004      	b.n	8000528 <_Z11lcd_char_cpc+0x17c>
 800051e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000522:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000526:	619a      	str	r2, [r3, #24]
 8000528:	f7ff fe60 	bl	80001ec <_Z9lcd_delayv>
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <_Z11lcd_char_cpc+0x1ac>)
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	629a      	str	r2, [r3, #40]	; 0x28
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 8000534:	2220      	movs	r2, #32
 8000536:	629a      	str	r2, [r3, #40]	; 0x28
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 800053a:	2210      	movs	r2, #16
 800053c:	629a      	str	r2, [r3, #40]	; 0x28
 800053e:	4b07      	ldr	r3, [pc, #28]	; (800055c <_Z11lcd_char_cpc+0x1b0>)
 8000540:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000544:	629a      	str	r2, [r3, #40]	; 0x28
 8000546:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800054a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800054e:	629a      	str	r2, [r3, #40]	; 0x28
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	48000800 	.word	0x48000800
 800055c:	48000400 	.word	0x48000400

08000560 <_Z10lcd_out_cpPc>:
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	e008      	b.n	800057c <_Z10lcd_out_cpPc+0x1c>
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	1c5a      	adds	r2, r3, #1
 800056e:	607a      	str	r2, [r7, #4]
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ff1a 	bl	80003ac <_Z11lcd_char_cpc>
 8000578:	f7ff fe38 	bl	80001ec <_Z9lcd_delayv>
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d1f2      	bne.n	800056a <_Z10lcd_out_cpPc+0xa>
 8000584:	bf00      	nop
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <_Z8lcd_initccc>:
 800058e:	b580      	push	{r7, lr}
 8000590:	b082      	sub	sp, #8
 8000592:	af00      	add	r7, sp, #0
 8000594:	4603      	mov	r3, r0
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	460b      	mov	r3, r1
 800059a:	71bb      	strb	r3, [r7, #6]
 800059c:	4613      	mov	r3, r2
 800059e:	717b      	strb	r3, [r7, #5]
 80005a0:	20fa      	movs	r0, #250	; 0xfa
 80005a2:	f000 fb95 	bl	8000cd0 <HAL_Delay>
 80005a6:	2002      	movs	r0, #2
 80005a8:	f7ff fe28 	bl	80001fc <_Z7lcd_cmdc>
 80005ac:	2032      	movs	r0, #50	; 0x32
 80005ae:	f000 fb8f 	bl	8000cd0 <HAL_Delay>
 80005b2:	79fa      	ldrb	r2, [r7, #7]
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	4313      	orrs	r3, r2
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	797b      	ldrb	r3, [r7, #5]
 80005bc:	4313      	orrs	r3, r2
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	f043 0320 	orr.w	r3, r3, #32
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fe18 	bl	80001fc <_Z7lcd_cmdc>
 80005cc:	2032      	movs	r0, #50	; 0x32
 80005ce:	f000 fb7f 	bl	8000cd0 <HAL_Delay>
 80005d2:	2006      	movs	r0, #6
 80005d4:	f7ff fe12 	bl	80001fc <_Z7lcd_cmdc>
 80005d8:	2032      	movs	r0, #50	; 0x32
 80005da:	f000 fb79 	bl	8000cd0 <HAL_Delay>
 80005de:	200e      	movs	r0, #14
 80005e0:	f7ff fe0c 	bl	80001fc <_Z7lcd_cmdc>
 80005e4:	2032      	movs	r0, #50	; 0x32
 80005e6:	f000 fb73 	bl	8000cd0 <HAL_Delay>
 80005ea:	200c      	movs	r0, #12
 80005ec:	f7ff fe06 	bl	80001fc <_Z7lcd_cmdc>
 80005f0:	2032      	movs	r0, #50	; 0x32
 80005f2:	f000 fb6d 	bl	8000cd0 <HAL_Delay>
 80005f6:	2001      	movs	r0, #1
 80005f8:	f7ff fe00 	bl	80001fc <_Z7lcd_cmdc>
 80005fc:	2064      	movs	r0, #100	; 0x64
 80005fe:	f000 fb67 	bl	8000cd0 <HAL_Delay>
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <_Z10lcd_gotoxyhh>:
 800060a:	b580      	push	{r7, lr}
 800060c:	b082      	sub	sp, #8
 800060e:	af00      	add	r7, sp, #0
 8000610:	4603      	mov	r3, r0
 8000612:	460a      	mov	r2, r1
 8000614:	71fb      	strb	r3, [r7, #7]
 8000616:	4613      	mov	r3, r2
 8000618:	71bb      	strb	r3, [r7, #6]
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d106      	bne.n	800062e <_Z10lcd_gotoxyhh+0x24>
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	337f      	adds	r3, #127	; 0x7f
 8000624:	b2db      	uxtb	r3, r3
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff fde8 	bl	80001fc <_Z7lcd_cmdc>
 800062c:	e008      	b.n	8000640 <_Z10lcd_gotoxyhh+0x36>
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b02      	cmp	r3, #2
 8000632:	d105      	bne.n	8000640 <_Z10lcd_gotoxyhh+0x36>
 8000634:	79bb      	ldrb	r3, [r7, #6]
 8000636:	3b41      	subs	r3, #65	; 0x41
 8000638:	b2db      	uxtb	r3, r3
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff fdde 	bl	80001fc <_Z7lcd_cmdc>
 8000640:	2005      	movs	r0, #5
 8000642:	f000 fb45 	bl	8000cd0 <HAL_Delay>
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <_Z9lcd_printhhPc>:
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
 8000654:	4603      	mov	r3, r0
 8000656:	603a      	str	r2, [r7, #0]
 8000658:	71fb      	strb	r3, [r7, #7]
 800065a:	460b      	mov	r3, r1
 800065c:	71bb      	strb	r3, [r7, #6]
 800065e:	79ba      	ldrb	r2, [r7, #6]
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	4611      	mov	r1, r2
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ffd0 	bl	800060a <_Z10lcd_gotoxyhh>
 800066a:	6838      	ldr	r0, [r7, #0]
 800066c:	f7ff ff78 	bl	8000560 <_Z10lcd_out_cpPc>
 8000670:	2005      	movs	r0, #5
 8000672:	f000 fb2d 	bl	8000cd0 <HAL_Delay>
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <_Z9lcd_clearv>:
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff fdba 	bl	80001fc <_Z7lcd_cmdc>
 8000688:	2005      	movs	r0, #5
 800068a:	f000 fb21 	bl	8000cd0 <HAL_Delay>
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <_ZN10GameObjectC1EPchh>:
    char* texture_;
    uint8_t xPos_;
    uint8_t yPos_;

public:
	GameObject(char* texture, uint8_t xPos, uint8_t yPos)
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	4611      	mov	r1, r2
 80006a0:	461a      	mov	r2, r3
 80006a2:	460b      	mov	r3, r1
 80006a4:	71fb      	strb	r3, [r7, #7]
 80006a6:	4613      	mov	r3, r2
 80006a8:	71bb      	strb	r3, [r7, #6]
    {
 80006aa:	4a09      	ldr	r2, [pc, #36]	; (80006d0 <_ZN10GameObjectC1EPchh+0x3c>)
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	601a      	str	r2, [r3, #0]
    	texture_ = texture;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	605a      	str	r2, [r3, #4]
    	xPos_ = xPos;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	79fa      	ldrb	r2, [r7, #7]
 80006ba:	721a      	strb	r2, [r3, #8]
		yPos_ = yPos;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	79ba      	ldrb	r2, [r7, #6]
 80006c0:	725a      	strb	r2, [r3, #9]
    }
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	4618      	mov	r0, r3
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	08001f64 	.word	0x08001f64

080006d4 <_ZN10GameObject4drawEhh>:

    char* getTexture(){
        return texture_;
	}

    virtual void draw(uint8_t row, uint8_t column){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
 80006e0:	4613      	mov	r3, r2
 80006e2:	70bb      	strb	r3, [r7, #2]
    	lcd_print(row, column, texture_);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	78b9      	ldrb	r1, [r7, #2]
 80006ea:	78fb      	ldrb	r3, [r7, #3]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ffae 	bl	800064e <_Z9lcd_printhhPc>
	}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <_ZN5ScoreC1Ehh>:

public:
	static const uint8_t SCORE_LIMIT = 99;
	uint8_t MAX_SCORE;

	Score(uint8_t xPos, uint8_t yPos) : GameObject("00", xPos, yPos) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
 8000708:	4613      	mov	r3, r2
 800070a:	70bb      	strb	r3, [r7, #2]
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	78bb      	ldrb	r3, [r7, #2]
 8000710:	78fa      	ldrb	r2, [r7, #3]
 8000712:	4908      	ldr	r1, [pc, #32]	; (8000734 <_ZN5ScoreC1Ehh+0x38>)
 8000714:	f7ff ffbe 	bl	8000694 <_ZN10GameObjectC1EPchh>
 8000718:	4a07      	ldr	r2, [pc, #28]	; (8000738 <_ZN5ScoreC1Ehh+0x3c>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	601a      	str	r2, [r3, #0]
		score = 0;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2200      	movs	r2, #0
 8000722:	729a      	strb	r2, [r3, #10]
		MAX_SCORE = 0;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	72da      	strb	r2, [r3, #11]
	}
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	08001f30 	.word	0x08001f30
 8000738:	08001f58 	.word	0x08001f58

0800073c <_Z14loadCustomCharhPKc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void loadCustomChar(uint8_t charNum, const char *pattern) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	71fb      	strb	r3, [r7, #7]
	lcd_cmd(0x40 | (charNum << 3)); // Set CGRAM address
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	b25b      	sxtb	r3, r3
 800074e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000752:	b25b      	sxtb	r3, r3
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fd50 	bl	80001fc <_Z7lcd_cmdc>
	for (int i = 0; i < 8; ++i)
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	e009      	b.n	8000776 <_Z14loadCustomCharhPKc+0x3a>
	{
		lcd_char_cp(pattern[i]);
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	4413      	add	r3, r2
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fe1e 	bl	80003ac <_Z11lcd_char_cpc>
	for (int i = 0; i < 8; ++i)
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	3301      	adds	r3, #1
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	2b07      	cmp	r3, #7
 800077a:	ddf2      	ble.n	8000762 <_Z14loadCustomCharhPKc+0x26>
	}
}
 800077c:	bf00      	nop
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <_Z17load_custom_charsv>:

void load_custom_chars(){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
     loadCustomChar(0, dinosaur_1);
 800078c:	490c      	ldr	r1, [pc, #48]	; (80007c0 <_Z17load_custom_charsv+0x38>)
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff ffd4 	bl	800073c <_Z14loadCustomCharhPKc>
     loadCustomChar(1, dinosaur_2);
 8000794:	490b      	ldr	r1, [pc, #44]	; (80007c4 <_Z17load_custom_charsv+0x3c>)
 8000796:	2001      	movs	r0, #1
 8000798:	f7ff ffd0 	bl	800073c <_Z14loadCustomCharhPKc>
     loadCustomChar(2, cactus_1);
 800079c:	490a      	ldr	r1, [pc, #40]	; (80007c8 <_Z17load_custom_charsv+0x40>)
 800079e:	2002      	movs	r0, #2
 80007a0:	f7ff ffcc 	bl	800073c <_Z14loadCustomCharhPKc>
     loadCustomChar(3, cactus_2);
 80007a4:	4909      	ldr	r1, [pc, #36]	; (80007cc <_Z17load_custom_charsv+0x44>)
 80007a6:	2003      	movs	r0, #3
 80007a8:	f7ff ffc8 	bl	800073c <_Z14loadCustomCharhPKc>
     loadCustomChar(4, filledSquare);
 80007ac:	4908      	ldr	r1, [pc, #32]	; (80007d0 <_Z17load_custom_charsv+0x48>)
 80007ae:	2004      	movs	r0, #4
 80007b0:	f7ff ffc4 	bl	800073c <_Z14loadCustomCharhPKc>
     loadCustomChar(5, notFilledSquare);
 80007b4:	4907      	ldr	r1, [pc, #28]	; (80007d4 <_Z17load_custom_charsv+0x4c>)
 80007b6:	2005      	movs	r0, #5
 80007b8:	f7ff ffc0 	bl	800073c <_Z14loadCustomCharhPKc>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000010 	.word	0x20000010
 80007cc:	20000018 	.word	0x20000018
 80007d0:	20000020 	.word	0x20000020
 80007d4:	20000050 	.word	0x20000050

080007d8 <_Z14lcd_transitionv>:

void lcd_transition(){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
  int mid = 7;
 80007de:	2307      	movs	r3, #7
 80007e0:	607b      	str	r3, [r7, #4]

  for (int i=0; i <= mid; i++) {
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	e032      	b.n	800084e <_Z14lcd_transitionv+0x76>
    lcd_print(1, mid+i, filledSquare);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4413      	add	r3, r2
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	4a38      	ldr	r2, [pc, #224]	; (80008d8 <_Z14lcd_transitionv+0x100>)
 80007f6:	4619      	mov	r1, r3
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff ff28 	bl	800064e <_Z9lcd_printhhPc>
    lcd_print(1, mid-i+1, filledSquare);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b2db      	uxtb	r3, r3
 800080a:	3301      	adds	r3, #1
 800080c:	b2db      	uxtb	r3, r3
 800080e:	4a32      	ldr	r2, [pc, #200]	; (80008d8 <_Z14lcd_transitionv+0x100>)
 8000810:	4619      	mov	r1, r3
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff ff1b 	bl	800064e <_Z9lcd_printhhPc>
    lcd_print(2, mid+i, filledSquare);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	b2da      	uxtb	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4413      	add	r3, r2
 8000822:	b2db      	uxtb	r3, r3
 8000824:	4a2c      	ldr	r2, [pc, #176]	; (80008d8 <_Z14lcd_transitionv+0x100>)
 8000826:	4619      	mov	r1, r3
 8000828:	2002      	movs	r0, #2
 800082a:	f7ff ff10 	bl	800064e <_Z9lcd_printhhPc>
    lcd_print(2, mid-i+1, filledSquare);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	b2db      	uxtb	r3, r3
 800083a:	3301      	adds	r3, #1
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4a26      	ldr	r2, [pc, #152]	; (80008d8 <_Z14lcd_transitionv+0x100>)
 8000840:	4619      	mov	r1, r3
 8000842:	2002      	movs	r0, #2
 8000844:	f7ff ff03 	bl	800064e <_Z9lcd_printhhPc>
  for (int i=0; i <= mid; i++) {
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3301      	adds	r3, #1
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	429a      	cmp	r2, r3
 8000854:	ddc8      	ble.n	80007e8 <_Z14lcd_transitionv+0x10>
  }

  for (int i=0; i <= mid; i++) {
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	e032      	b.n	80008c2 <_Z14lcd_transitionv+0xea>
      lcd_print(1, mid+i, notFilledSquare);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	b2da      	uxtb	r2, r3
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	4413      	add	r3, r2
 8000866:	b2db      	uxtb	r3, r3
 8000868:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <_Z14lcd_transitionv+0x104>)
 800086a:	4619      	mov	r1, r3
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff feee 	bl	800064e <_Z9lcd_printhhPc>
      lcd_print(1, mid-i+1, notFilledSquare);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	b2da      	uxtb	r2, r3
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	b2db      	uxtb	r3, r3
 800087e:	3301      	adds	r3, #1
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4a16      	ldr	r2, [pc, #88]	; (80008dc <_Z14lcd_transitionv+0x104>)
 8000884:	4619      	mov	r1, r3
 8000886:	2001      	movs	r0, #1
 8000888:	f7ff fee1 	bl	800064e <_Z9lcd_printhhPc>
      lcd_print(2, mid+i, notFilledSquare);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	b2da      	uxtb	r2, r3
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	4413      	add	r3, r2
 8000896:	b2db      	uxtb	r3, r3
 8000898:	4a10      	ldr	r2, [pc, #64]	; (80008dc <_Z14lcd_transitionv+0x104>)
 800089a:	4619      	mov	r1, r3
 800089c:	2002      	movs	r0, #2
 800089e:	f7ff fed6 	bl	800064e <_Z9lcd_printhhPc>
      lcd_print(2, mid-i+1, notFilledSquare);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	3301      	adds	r3, #1
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <_Z14lcd_transitionv+0x104>)
 80008b4:	4619      	mov	r1, r3
 80008b6:	2002      	movs	r0, #2
 80008b8:	f7ff fec9 	bl	800064e <_Z9lcd_printhhPc>
  for (int i=0; i <= mid; i++) {
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	3301      	adds	r3, #1
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	ddc8      	ble.n	800085c <_Z14lcd_transitionv+0x84>
  }

  lcd_clear();
 80008ca:	f7ff fed8 	bl	800067e <_Z9lcd_clearv>

}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000020 	.word	0x20000020
 80008dc:	20000050 	.word	0x20000050

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	lcd_init(8, 1, 2);
 80008e6:	2202      	movs	r2, #2
 80008e8:	2101      	movs	r1, #1
 80008ea:	2008      	movs	r0, #8
 80008ec:	f7ff fe4f 	bl	800058e <_Z8lcd_initccc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f0:	f000 f979 	bl	8000be6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f4:	f000 f80d 	bl	8000912 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f8:	f000 f860 	bl	80009bc <_ZL12MX_GPIO_Initv>
  /* USER CODE BEGIN 2 */
  load_custom_chars();
 80008fc:	f7ff ff44 	bl	8000788 <_Z17load_custom_charsv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Create score display at the (x:14, y:1)
	  Score score(14, 1);
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2201      	movs	r2, #1
 8000904:	210e      	movs	r1, #14
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fef8 	bl	80006fc <_ZN5ScoreC1Ehh>
	  // Make smooth transition to the game start
	  lcd_transition();
 800090c:	f7ff ff64 	bl	80007d8 <_Z14lcd_transitionv>
	  // Shows endgame screen with the Top Score and the Current Score
	  //end_game(&score);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000910:	e7f6      	b.n	8000900 <main+0x20>

08000912 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b096      	sub	sp, #88	; 0x58
 8000916:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2244      	movs	r2, #68	; 0x44
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f001 facd 	bl	8001ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000926:	463b      	mov	r3, r7
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000934:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000938:	f000 fca4 	bl	8001284 <HAL_PWREx_ControlVoltageScaling>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	bf14      	ite	ne
 8000942:	2301      	movne	r3, #1
 8000944:	2300      	moveq	r3, #0
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800094c:	f000 f8bc 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000950:	2310      	movs	r3, #16
 8000952:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000954:	2301      	movs	r3, #1
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800095c:	2360      	movs	r3, #96	; 0x60
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000960:	2300      	movs	r3, #0
 8000962:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4618      	mov	r0, r3
 800096a:	f000 fce1 	bl	8001330 <HAL_RCC_OscConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	bf14      	ite	ne
 8000974:	2301      	movne	r3, #1
 8000976:	2300      	moveq	r3, #0
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 800097e:	f000 f8a3 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000982:	230f      	movs	r3, #15
 8000984:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000996:	463b      	mov	r3, r7
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f001 f8a4 	bl	8001ae8 <HAL_RCC_ClockConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bf14      	ite	ne
 80009a6:	2301      	movne	r3, #1
 80009a8:	2300      	moveq	r3, #0
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80009b0:	f000 f88a 	bl	8000ac8 <Error_Handler>
  }
}
 80009b4:	bf00      	nop
 80009b6:	3758      	adds	r7, #88	; 0x58
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b3a      	ldr	r3, [pc, #232]	; (8000abc <_ZL12MX_GPIO_Initv+0x100>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a39      	ldr	r2, [pc, #228]	; (8000abc <_ZL12MX_GPIO_Initv+0x100>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b37      	ldr	r3, [pc, #220]	; (8000abc <_ZL12MX_GPIO_Initv+0x100>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b34      	ldr	r3, [pc, #208]	; (8000abc <_ZL12MX_GPIO_Initv+0x100>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a33      	ldr	r2, [pc, #204]	; (8000abc <_ZL12MX_GPIO_Initv+0x100>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b31      	ldr	r3, [pc, #196]	; (8000abc <_ZL12MX_GPIO_Initv+0x100>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <_ZL12MX_GPIO_Initv+0x100>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a2d      	ldr	r2, [pc, #180]	; (8000abc <_ZL12MX_GPIO_Initv+0x100>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <_ZL12MX_GPIO_Initv+0x100>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000a20:	4827      	ldr	r0, [pc, #156]	; (8000ac0 <_ZL12MX_GPIO_Initv+0x104>)
 8000a22:	f000 fc09 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2180      	movs	r1, #128	; 0x80
 8000a2a:	4826      	ldr	r0, [pc, #152]	; (8000ac4 <_ZL12MX_GPIO_Initv+0x108>)
 8000a2c:	f000 fc04 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3a:	f000 fbfd 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	4619      	mov	r1, r3
 8000a52:	481c      	ldr	r0, [pc, #112]	; (8000ac4 <_ZL12MX_GPIO_Initv+0x108>)
 8000a54:	f000 fa46 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 8000a58:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000a5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4813      	ldr	r0, [pc, #76]	; (8000ac0 <_ZL12MX_GPIO_Initv+0x104>)
 8000a72:	f000 fa37 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin;
 8000a76:	2380      	movs	r3, #128	; 0x80
 8000a78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_EN_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <_ZL12MX_GPIO_Initv+0x108>)
 8000a8e:	f000 fa29 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_RS_Pin;
 8000a92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aae:	f000 fa19 	bl	8000ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab2:	bf00      	nop
 8000ab4:	3720      	adds	r7, #32
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	48000400 	.word	0x48000400
 8000ac4:	48000800 	.word	0x48000800

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <HAL_MspInit>:
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_MspInit+0x44>)
 8000adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x44>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_MspInit+0x44>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afc:	6593      	str	r3, [r2, #88]	; 0x58
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_MspInit+0x44>)
 8000b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 f892 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b98:	f7ff ffea 	bl	8000b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9e:	490d      	ldr	r1, [pc, #52]	; (8000bd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <LoopForever+0xe>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb4:	4c0a      	ldr	r4, [pc, #40]	; (8000be0 <LoopForever+0x16>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f001 f985 	bl	8001ed0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bc6:	f7ff fe8b 	bl	80008e0 <main>

08000bca <LoopForever>:

LoopForever:
    b LoopForever
 8000bca:	e7fe      	b.n	8000bca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000bd8:	08001fb0 	.word	0x08001fb0
  ldr r2, =_sbss
 8000bdc:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000be0:	2000005c 	.word	0x2000005c

08000be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC1_2_IRQHandler>

08000be6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 f943 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf6:	200f      	movs	r0, #15
 8000bf8:	f000 f80e 	bl	8000c18 <HAL_InitTick>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	71fb      	strb	r3, [r7, #7]
 8000c06:	e001      	b.n	8000c0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c08:	f7ff ff64 	bl	8000ad4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <HAL_InitTick+0x6c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d023      	beq.n	8000c74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <HAL_InitTick+0x70>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_InitTick+0x6c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f941 	bl	8000eca <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10f      	bne.n	8000c6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d809      	bhi.n	8000c68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f000 f919 	bl	8000e92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c60:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <HAL_InitTick+0x74>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e007      	b.n	8000c78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	e004      	b.n	8000c78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
 8000c72:	e001      	b.n	8000c78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000030 	.word	0x20000030
 8000c88:	20000028 	.word	0x20000028
 8000c8c:	2000002c 	.word	0x2000002c

08000c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000030 	.word	0x20000030
 8000cb4:	20000058 	.word	0x20000058

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000058 	.word	0x20000058

08000cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff ffee 	bl	8000cb8 <HAL_GetTick>
 8000cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce8:	d005      	beq.n	8000cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_Delay+0x44>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf6:	bf00      	nop
 8000cf8:	f7ff ffde 	bl	8000cb8 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_Delay+0x28>
  {
  }
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000030 	.word	0x20000030

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	; (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	; 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f7ff ff8e 	bl	8000d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff47 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff5c 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff8e 	bl	8000dd0 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5d 	bl	8000d7c <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffb0 	bl	8000e38 <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef2:	e17f      	b.n	80011f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	2101      	movs	r1, #1
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	4013      	ands	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 8171 	beq.w	80011ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d005      	beq.n	8000f24 <HAL_GPIO_Init+0x40>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d130      	bne.n	8000f86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	f003 0201 	and.w	r2, r3, #1
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d118      	bne.n	8000fc4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d017      	beq.n	8001000 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	6939      	ldr	r1, [r7, #16]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80ac 	beq.w	80011ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	4b5f      	ldr	r3, [pc, #380]	; (8001214 <HAL_GPIO_Init+0x330>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109a:	4a5e      	ldr	r2, [pc, #376]	; (8001214 <HAL_GPIO_Init+0x330>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6613      	str	r3, [r2, #96]	; 0x60
 80010a2:	4b5c      	ldr	r3, [pc, #368]	; (8001214 <HAL_GPIO_Init+0x330>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010ae:	4a5a      	ldr	r2, [pc, #360]	; (8001218 <HAL_GPIO_Init+0x334>)
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010d8:	d025      	beq.n	8001126 <HAL_GPIO_Init+0x242>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4f      	ldr	r2, [pc, #316]	; (800121c <HAL_GPIO_Init+0x338>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d01f      	beq.n	8001122 <HAL_GPIO_Init+0x23e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4e      	ldr	r2, [pc, #312]	; (8001220 <HAL_GPIO_Init+0x33c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x23a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4d      	ldr	r2, [pc, #308]	; (8001224 <HAL_GPIO_Init+0x340>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x236>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4c      	ldr	r2, [pc, #304]	; (8001228 <HAL_GPIO_Init+0x344>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x232>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4b      	ldr	r2, [pc, #300]	; (800122c <HAL_GPIO_Init+0x348>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x22e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4a      	ldr	r2, [pc, #296]	; (8001230 <HAL_GPIO_Init+0x34c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x22a>
 800110a:	2306      	movs	r3, #6
 800110c:	e00c      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800110e:	2307      	movs	r3, #7
 8001110:	e00a      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001112:	2305      	movs	r3, #5
 8001114:	e008      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001116:	2304      	movs	r3, #4
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800111a:	2303      	movs	r3, #3
 800111c:	e004      	b.n	8001128 <HAL_GPIO_Init+0x244>
 800111e:	2302      	movs	r3, #2
 8001120:	e002      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x244>
 8001126:	2300      	movs	r3, #0
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4093      	lsls	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001138:	4937      	ldr	r1, [pc, #220]	; (8001218 <HAL_GPIO_Init+0x334>)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001146:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <HAL_GPIO_Init+0x350>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800116a:	4a32      	ldr	r2, [pc, #200]	; (8001234 <HAL_GPIO_Init+0x350>)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001170:	4b30      	ldr	r3, [pc, #192]	; (8001234 <HAL_GPIO_Init+0x350>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001194:	4a27      	ldr	r2, [pc, #156]	; (8001234 <HAL_GPIO_Init+0x350>)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <HAL_GPIO_Init+0x350>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011be:	4a1d      	ldr	r2, [pc, #116]	; (8001234 <HAL_GPIO_Init+0x350>)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <HAL_GPIO_Init+0x350>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <HAL_GPIO_Init+0x350>)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa22 f303 	lsr.w	r3, r2, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f47f ae78 	bne.w	8000ef4 <HAL_GPIO_Init+0x10>
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	371c      	adds	r7, #28
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	40010000 	.word	0x40010000
 800121c:	48000400 	.word	0x48000400
 8001220:	48000800 	.word	0x48000800
 8001224:	48000c00 	.word	0x48000c00
 8001228:	48001000 	.word	0x48001000
 800122c:	48001400 	.word	0x48001400
 8001230:	48001800 	.word	0x48001800
 8001234:	40010400 	.word	0x40010400

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001254:	e002      	b.n	800125c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001256:	887a      	ldrh	r2, [r7, #2]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <HAL_PWREx_GetVoltageRange+0x18>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40007000 	.word	0x40007000

08001284 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001292:	d130      	bne.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001294:	4b23      	ldr	r3, [pc, #140]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800129c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012a0:	d038      	beq.n	8001314 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012aa:	4a1e      	ldr	r2, [pc, #120]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2232      	movs	r2, #50	; 0x32
 80012b8:	fb02 f303 	mul.w	r3, r2, r3
 80012bc:	4a1b      	ldr	r2, [pc, #108]	; (800132c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	0c9b      	lsrs	r3, r3, #18
 80012c4:	3301      	adds	r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c8:	e002      	b.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012dc:	d102      	bne.n	80012e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f2      	bne.n	80012ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f0:	d110      	bne.n	8001314 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e00f      	b.n	8001316 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001302:	d007      	beq.n	8001314 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800130c:	4a05      	ldr	r2, [pc, #20]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001312:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40007000 	.word	0x40007000
 8001328:	20000028 	.word	0x20000028
 800132c:	431bde83 	.word	0x431bde83

08001330 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e3ca      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001342:	4b97      	ldr	r3, [pc, #604]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800134c:	4b94      	ldr	r3, [pc, #592]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0310 	and.w	r3, r3, #16
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 80e4 	beq.w	800152c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <HAL_RCC_OscConfig+0x4a>
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	2b0c      	cmp	r3, #12
 800136e:	f040 808b 	bne.w	8001488 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	2b01      	cmp	r3, #1
 8001376:	f040 8087 	bne.w	8001488 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800137a:	4b89      	ldr	r3, [pc, #548]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d005      	beq.n	8001392 <HAL_RCC_OscConfig+0x62>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e3a2      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1a      	ldr	r2, [r3, #32]
 8001396:	4b82      	ldr	r3, [pc, #520]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d004      	beq.n	80013ac <HAL_RCC_OscConfig+0x7c>
 80013a2:	4b7f      	ldr	r3, [pc, #508]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013aa:	e005      	b.n	80013b8 <HAL_RCC_OscConfig+0x88>
 80013ac:	4b7c      	ldr	r3, [pc, #496]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013b2:	091b      	lsrs	r3, r3, #4
 80013b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d223      	bcs.n	8001404 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fd1d 	bl	8001e00 <RCC_SetFlashLatencyFromMSIRange>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e383      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013d0:	4b73      	ldr	r3, [pc, #460]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a72      	ldr	r2, [pc, #456]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013d6:	f043 0308 	orr.w	r3, r3, #8
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b70      	ldr	r3, [pc, #448]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	496d      	ldr	r1, [pc, #436]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ee:	4b6c      	ldr	r3, [pc, #432]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	4968      	ldr	r1, [pc, #416]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	604b      	str	r3, [r1, #4]
 8001402:	e025      	b.n	8001450 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001404:	4b66      	ldr	r3, [pc, #408]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a65      	ldr	r2, [pc, #404]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 800140a:	f043 0308 	orr.w	r3, r3, #8
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b63      	ldr	r3, [pc, #396]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4960      	ldr	r1, [pc, #384]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001422:	4b5f      	ldr	r3, [pc, #380]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	495b      	ldr	r1, [pc, #364]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001432:	4313      	orrs	r3, r2
 8001434:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d109      	bne.n	8001450 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fcdd 	bl	8001e00 <RCC_SetFlashLatencyFromMSIRange>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e343      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001450:	f000 fc4a 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001454:	4602      	mov	r2, r0
 8001456:	4b52      	ldr	r3, [pc, #328]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	4950      	ldr	r1, [pc, #320]	; (80015a4 <HAL_RCC_OscConfig+0x274>)
 8001462:	5ccb      	ldrb	r3, [r1, r3]
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	fa22 f303 	lsr.w	r3, r2, r3
 800146c:	4a4e      	ldr	r2, [pc, #312]	; (80015a8 <HAL_RCC_OscConfig+0x278>)
 800146e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001470:	4b4e      	ldr	r3, [pc, #312]	; (80015ac <HAL_RCC_OscConfig+0x27c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fbcf 	bl	8000c18 <HAL_InitTick>
 800147a:	4603      	mov	r3, r0
 800147c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d052      	beq.n	800152a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	e327      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d032      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001490:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a42      	ldr	r2, [pc, #264]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800149c:	f7ff fc0c 	bl	8000cb8 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014a4:	f7ff fc08 	bl	8000cb8 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e310      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014b6:	4b3a      	ldr	r3, [pc, #232]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c2:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a36      	ldr	r2, [pc, #216]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014c8:	f043 0308 	orr.w	r3, r3, #8
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4931      	ldr	r1, [pc, #196]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e0:	4b2f      	ldr	r3, [pc, #188]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	492c      	ldr	r1, [pc, #176]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
 80014f4:	e01a      	b.n	800152c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a29      	ldr	r2, [pc, #164]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001502:	f7ff fbd9 	bl	8000cb8 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800150a:	f7ff fbd5 	bl	8000cb8 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e2dd      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800151c:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f0      	bne.n	800150a <HAL_RCC_OscConfig+0x1da>
 8001528:	e000      	b.n	800152c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800152a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d074      	beq.n	8001622 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2b08      	cmp	r3, #8
 800153c:	d005      	beq.n	800154a <HAL_RCC_OscConfig+0x21a>
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b0c      	cmp	r3, #12
 8001542:	d10e      	bne.n	8001562 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	2b03      	cmp	r3, #3
 8001548:	d10b      	bne.n	8001562 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d064      	beq.n	8001620 <HAL_RCC_OscConfig+0x2f0>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d160      	bne.n	8001620 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e2ba      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x24a>
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	e026      	b.n	80015c8 <HAL_RCC_OscConfig+0x298>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001582:	d115      	bne.n	80015b0 <HAL_RCC_OscConfig+0x280>
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 800158a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a02      	ldr	r2, [pc, #8]	; (80015a0 <HAL_RCC_OscConfig+0x270>)
 8001596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	e014      	b.n	80015c8 <HAL_RCC_OscConfig+0x298>
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	08001f68 	.word	0x08001f68
 80015a8:	20000028 	.word	0x20000028
 80015ac:	2000002c 	.word	0x2000002c
 80015b0:	4ba0      	ldr	r3, [pc, #640]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a9f      	ldr	r2, [pc, #636]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 80015b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b9d      	ldr	r3, [pc, #628]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a9c      	ldr	r2, [pc, #624]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 80015c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d013      	beq.n	80015f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff fb72 	bl	8000cb8 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fb6e 	bl	8000cb8 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	; 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e276      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ea:	4b92      	ldr	r3, [pc, #584]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x2a8>
 80015f6:	e014      	b.n	8001622 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fb5e 	bl	8000cb8 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fb5a 	bl	8000cb8 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	; 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e262      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001612:	4b88      	ldr	r3, [pc, #544]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x2d0>
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d060      	beq.n	80016f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2b04      	cmp	r3, #4
 8001632:	d005      	beq.n	8001640 <HAL_RCC_OscConfig+0x310>
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2b0c      	cmp	r3, #12
 8001638:	d119      	bne.n	800166e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d116      	bne.n	800166e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001640:	4b7c      	ldr	r3, [pc, #496]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_OscConfig+0x328>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e23f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001658:	4b76      	ldr	r3, [pc, #472]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	061b      	lsls	r3, r3, #24
 8001666:	4973      	ldr	r1, [pc, #460]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800166c:	e040      	b.n	80016f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d023      	beq.n	80016be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001676:	4b6f      	ldr	r3, [pc, #444]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6e      	ldr	r2, [pc, #440]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001682:	f7ff fb19 	bl	8000cb8 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168a:	f7ff fb15 	bl	8000cb8 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e21d      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800169c:	4b65      	ldr	r3, [pc, #404]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a8:	4b62      	ldr	r3, [pc, #392]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	061b      	lsls	r3, r3, #24
 80016b6:	495f      	ldr	r1, [pc, #380]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
 80016bc:	e018      	b.n	80016f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016be:	4b5d      	ldr	r3, [pc, #372]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a5c      	ldr	r2, [pc, #368]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 80016c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ca:	f7ff faf5 	bl	8000cb8 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d2:	f7ff faf1 	bl	8000cb8 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e1f9      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e4:	4b53      	ldr	r3, [pc, #332]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d03c      	beq.n	8001776 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d01c      	beq.n	800173e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001704:	4b4b      	ldr	r3, [pc, #300]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 8001706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170a:	4a4a      	ldr	r2, [pc, #296]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001714:	f7ff fad0 	bl	8000cb8 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800171c:	f7ff facc 	bl	8000cb8 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e1d4      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800172e:	4b41      	ldr	r3, [pc, #260]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 8001730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0ef      	beq.n	800171c <HAL_RCC_OscConfig+0x3ec>
 800173c:	e01b      	b.n	8001776 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173e:	4b3d      	ldr	r3, [pc, #244]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 8001740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001744:	4a3b      	ldr	r2, [pc, #236]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff fab3 	bl	8000cb8 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001756:	f7ff faaf 	bl	8000cb8 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1b7      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001768:	4b32      	ldr	r3, [pc, #200]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 800176a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1ef      	bne.n	8001756 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80a6 	beq.w	80018d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001788:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10d      	bne.n	80017b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001798:	4a26      	ldr	r2, [pc, #152]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 800179a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179e:	6593      	str	r3, [r2, #88]	; 0x58
 80017a0:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 80017a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ac:	2301      	movs	r3, #1
 80017ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017b0:	4b21      	ldr	r3, [pc, #132]	; (8001838 <HAL_RCC_OscConfig+0x508>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d118      	bne.n	80017ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <HAL_RCC_OscConfig+0x508>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1d      	ldr	r2, [pc, #116]	; (8001838 <HAL_RCC_OscConfig+0x508>)
 80017c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c8:	f7ff fa76 	bl	8000cb8 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d0:	f7ff fa72 	bl	8000cb8 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e17a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_RCC_OscConfig+0x508>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d108      	bne.n	8001808 <HAL_RCC_OscConfig+0x4d8>
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 80017f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fc:	4a0d      	ldr	r2, [pc, #52]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001806:	e029      	b.n	800185c <HAL_RCC_OscConfig+0x52c>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b05      	cmp	r3, #5
 800180e:	d115      	bne.n	800183c <HAL_RCC_OscConfig+0x50c>
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 8001812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001816:	4a07      	ldr	r2, [pc, #28]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 8001822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001826:	4a03      	ldr	r2, [pc, #12]	; (8001834 <HAL_RCC_OscConfig+0x504>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001830:	e014      	b.n	800185c <HAL_RCC_OscConfig+0x52c>
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	40007000 	.word	0x40007000
 800183c:	4b9c      	ldr	r3, [pc, #624]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 800183e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001842:	4a9b      	ldr	r2, [pc, #620]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800184c:	4b98      	ldr	r3, [pc, #608]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 800184e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001852:	4a97      	ldr	r2, [pc, #604]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001854:	f023 0304 	bic.w	r3, r3, #4
 8001858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d016      	beq.n	8001892 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff fa28 	bl	8000cb8 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800186a:	e00a      	b.n	8001882 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186c:	f7ff fa24 	bl	8000cb8 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	; 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e12a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001882:	4b8b      	ldr	r3, [pc, #556]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ed      	beq.n	800186c <HAL_RCC_OscConfig+0x53c>
 8001890:	e015      	b.n	80018be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001892:	f7ff fa11 	bl	8000cb8 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7ff fa0d 	bl	8000cb8 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e113      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018b0:	4b7f      	ldr	r3, [pc, #508]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1ed      	bne.n	800189a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018be:	7ffb      	ldrb	r3, [r7, #31]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d105      	bne.n	80018d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c4:	4b7a      	ldr	r3, [pc, #488]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c8:	4a79      	ldr	r2, [pc, #484]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 80018ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80fe 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	2b02      	cmp	r3, #2
 80018e0:	f040 80d0 	bne.w	8001a84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018e4:	4b72      	ldr	r3, [pc, #456]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 0203 	and.w	r2, r3, #3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d130      	bne.n	800195a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	3b01      	subs	r3, #1
 8001904:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001906:	429a      	cmp	r2, r3
 8001908:	d127      	bne.n	800195a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001914:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d11f      	bne.n	800195a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001924:	2a07      	cmp	r2, #7
 8001926:	bf14      	ite	ne
 8001928:	2201      	movne	r2, #1
 800192a:	2200      	moveq	r2, #0
 800192c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800192e:	4293      	cmp	r3, r2
 8001930:	d113      	bne.n	800195a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193c:	085b      	lsrs	r3, r3, #1
 800193e:	3b01      	subs	r3, #1
 8001940:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d109      	bne.n	800195a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	085b      	lsrs	r3, r3, #1
 8001952:	3b01      	subs	r3, #1
 8001954:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d06e      	beq.n	8001a38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b0c      	cmp	r3, #12
 800195e:	d069      	beq.n	8001a34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001960:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d105      	bne.n	8001978 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800196c:	4b50      	ldr	r3, [pc, #320]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0ad      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800197c:	4b4c      	ldr	r3, [pc, #304]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a4b      	ldr	r2, [pc, #300]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001986:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001988:	f7ff f996 	bl	8000cb8 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff f992 	bl	8000cb8 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e09a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a2:	4b43      	ldr	r3, [pc, #268]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ae:	4b40      	ldr	r3, [pc, #256]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	4b40      	ldr	r3, [pc, #256]	; (8001ab4 <HAL_RCC_OscConfig+0x784>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019be:	3a01      	subs	r2, #1
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	4311      	orrs	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019c8:	0212      	lsls	r2, r2, #8
 80019ca:	4311      	orrs	r1, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019d0:	0852      	lsrs	r2, r2, #1
 80019d2:	3a01      	subs	r2, #1
 80019d4:	0552      	lsls	r2, r2, #21
 80019d6:	4311      	orrs	r1, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019dc:	0852      	lsrs	r2, r2, #1
 80019de:	3a01      	subs	r2, #1
 80019e0:	0652      	lsls	r2, r2, #25
 80019e2:	4311      	orrs	r1, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019e8:	0912      	lsrs	r2, r2, #4
 80019ea:	0452      	lsls	r2, r2, #17
 80019ec:	430a      	orrs	r2, r1
 80019ee:	4930      	ldr	r1, [pc, #192]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019f4:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a2d      	ldr	r2, [pc, #180]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 80019fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a00:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4a2a      	ldr	r2, [pc, #168]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a0c:	f7ff f954 	bl	8000cb8 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a14:	f7ff f950 	bl	8000cb8 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e058      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a26:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a32:	e050      	b.n	8001ad6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e04f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d148      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a44:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a19      	ldr	r2, [pc, #100]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4a16      	ldr	r2, [pc, #88]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a5c:	f7ff f92c 	bl	8000cb8 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff f928 	bl	8000cb8 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e030      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x734>
 8001a82:	e028      	b.n	8001ad6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d023      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a08      	ldr	r2, [pc, #32]	; (8001ab0 <HAL_RCC_OscConfig+0x780>)
 8001a90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7ff f90f 	bl	8000cb8 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a9c:	e00c      	b.n	8001ab8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7ff f90b 	bl	8000cb8 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d905      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e013      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_RCC_OscConfig+0x7b0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1ec      	bne.n	8001a9e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_RCC_OscConfig+0x7b0>)
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	4905      	ldr	r1, [pc, #20]	; (8001ae0 <HAL_RCC_OscConfig+0x7b0>)
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_RCC_OscConfig+0x7b4>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	60cb      	str	r3, [r1, #12]
 8001ad0:	e001      	b.n	8001ad6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3720      	adds	r7, #32
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	feeefffc 	.word	0xfeeefffc

08001ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0e7      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001afc:	4b75      	ldr	r3, [pc, #468]	; (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d910      	bls.n	8001b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b72      	ldr	r3, [pc, #456]	; (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 0207 	bic.w	r2, r3, #7
 8001b12:	4970      	ldr	r1, [pc, #448]	; (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b6e      	ldr	r3, [pc, #440]	; (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0cf      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d010      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	4b66      	ldr	r3, [pc, #408]	; (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d908      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b48:	4b63      	ldr	r3, [pc, #396]	; (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4960      	ldr	r1, [pc, #384]	; (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d04c      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6e:	4b5a      	ldr	r3, [pc, #360]	; (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d121      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e0a6      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b86:	4b54      	ldr	r3, [pc, #336]	; (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d115      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e09a      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b9e:	4b4e      	ldr	r3, [pc, #312]	; (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e08e      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bae:	4b4a      	ldr	r3, [pc, #296]	; (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e086      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bbe:	4b46      	ldr	r3, [pc, #280]	; (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f023 0203 	bic.w	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4943      	ldr	r1, [pc, #268]	; (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bd0:	f7ff f872 	bl	8000cb8 <HAL_GetTick>
 8001bd4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd8:	f7ff f86e 	bl	8000cb8 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e06e      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 020c 	and.w	r2, r3, #12
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d1eb      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d010      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d208      	bcs.n	8001c2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	492b      	ldr	r1, [pc, #172]	; (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2e:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d210      	bcs.n	8001c5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3c:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 0207 	bic.w	r2, r3, #7
 8001c44:	4923      	ldr	r1, [pc, #140]	; (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4c:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e036      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d008      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	4918      	ldr	r1, [pc, #96]	; (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d009      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4910      	ldr	r1, [pc, #64]	; (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c9c:	f000 f824 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	091b      	lsrs	r3, r3, #4
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	490b      	ldr	r1, [pc, #44]	; (8001cdc <HAL_RCC_ClockConfig+0x1f4>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb8:	4a09      	ldr	r2, [pc, #36]	; (8001ce0 <HAL_RCC_ClockConfig+0x1f8>)
 8001cba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_RCC_ClockConfig+0x1fc>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe ffa9 	bl	8000c18 <HAL_InitTick>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cca:	7afb      	ldrb	r3, [r7, #11]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40022000 	.word	0x40022000
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	08001f68 	.word	0x08001f68
 8001ce0:	20000028 	.word	0x20000028
 8001ce4:	2000002c 	.word	0x2000002c

08001ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf6:	4b3e      	ldr	r3, [pc, #248]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d00:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0x34>
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d121      	bne.n	8001d5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d11e      	bne.n	8001d5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d1c:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d107      	bne.n	8001d38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d28:	4b31      	ldr	r3, [pc, #196]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	e005      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d38:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d44:	4a2b      	ldr	r2, [pc, #172]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10d      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d58:	e00a      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d102      	bne.n	8001d66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d60:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d62:	61bb      	str	r3, [r7, #24]
 8001d64:	e004      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d6c:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d134      	bne.n	8001de0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0xa6>
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d003      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0xac>
 8001d8c:	e005      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d90:	617b      	str	r3, [r7, #20]
      break;
 8001d92:	e005      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d96:	617b      	str	r3, [r7, #20]
      break;
 8001d98:	e002      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	617b      	str	r3, [r7, #20]
      break;
 8001d9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	3301      	adds	r3, #1
 8001dac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	fb03 f202 	mul.w	r2, r3, r2
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	0e5b      	lsrs	r3, r3, #25
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001de0:	69bb      	ldr	r3, [r7, #24]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	08001f78 	.word	0x08001f78
 8001df8:	00f42400 	.word	0x00f42400
 8001dfc:	007a1200 	.word	0x007a1200

08001e00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e18:	f7ff fa26 	bl	8001268 <HAL_PWREx_GetVoltageRange>
 8001e1c:	6178      	str	r0, [r7, #20]
 8001e1e:	e014      	b.n	8001e4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e20:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	4a24      	ldr	r2, [pc, #144]	; (8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2c:	4b22      	ldr	r3, [pc, #136]	; (8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e38:	f7ff fa16 	bl	8001268 <HAL_PWREx_GetVoltageRange>
 8001e3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e3e:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e42:	4a1d      	ldr	r2, [pc, #116]	; (8001eb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e50:	d10b      	bne.n	8001e6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b80      	cmp	r3, #128	; 0x80
 8001e56:	d919      	bls.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2ba0      	cmp	r3, #160	; 0xa0
 8001e5c:	d902      	bls.n	8001e64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e5e:	2302      	movs	r3, #2
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	e013      	b.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e64:	2301      	movs	r3, #1
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	e010      	b.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b80      	cmp	r3, #128	; 0x80
 8001e6e:	d902      	bls.n	8001e76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e70:	2303      	movs	r3, #3
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	e00a      	b.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b80      	cmp	r3, #128	; 0x80
 8001e7a:	d102      	bne.n	8001e82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	e004      	b.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b70      	cmp	r3, #112	; 0x70
 8001e86:	d101      	bne.n	8001e8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e88:	2301      	movs	r3, #1
 8001e8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f023 0207 	bic.w	r2, r3, #7
 8001e94:	4909      	ldr	r1, [pc, #36]	; (8001ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d001      	beq.n	8001eae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40022000 	.word	0x40022000

08001ec0 <memset>:
 8001ec0:	4402      	add	r2, r0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d100      	bne.n	8001eca <memset+0xa>
 8001ec8:	4770      	bx	lr
 8001eca:	f803 1b01 	strb.w	r1, [r3], #1
 8001ece:	e7f9      	b.n	8001ec4 <memset+0x4>

08001ed0 <__libc_init_array>:
 8001ed0:	b570      	push	{r4, r5, r6, lr}
 8001ed2:	4d0d      	ldr	r5, [pc, #52]	; (8001f08 <__libc_init_array+0x38>)
 8001ed4:	4c0d      	ldr	r4, [pc, #52]	; (8001f0c <__libc_init_array+0x3c>)
 8001ed6:	1b64      	subs	r4, r4, r5
 8001ed8:	10a4      	asrs	r4, r4, #2
 8001eda:	2600      	movs	r6, #0
 8001edc:	42a6      	cmp	r6, r4
 8001ede:	d109      	bne.n	8001ef4 <__libc_init_array+0x24>
 8001ee0:	4d0b      	ldr	r5, [pc, #44]	; (8001f10 <__libc_init_array+0x40>)
 8001ee2:	4c0c      	ldr	r4, [pc, #48]	; (8001f14 <__libc_init_array+0x44>)
 8001ee4:	f000 f818 	bl	8001f18 <_init>
 8001ee8:	1b64      	subs	r4, r4, r5
 8001eea:	10a4      	asrs	r4, r4, #2
 8001eec:	2600      	movs	r6, #0
 8001eee:	42a6      	cmp	r6, r4
 8001ef0:	d105      	bne.n	8001efe <__libc_init_array+0x2e>
 8001ef2:	bd70      	pop	{r4, r5, r6, pc}
 8001ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ef8:	4798      	blx	r3
 8001efa:	3601      	adds	r6, #1
 8001efc:	e7ee      	b.n	8001edc <__libc_init_array+0xc>
 8001efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f02:	4798      	blx	r3
 8001f04:	3601      	adds	r6, #1
 8001f06:	e7f2      	b.n	8001eee <__libc_init_array+0x1e>
 8001f08:	08001fa8 	.word	0x08001fa8
 8001f0c:	08001fa8 	.word	0x08001fa8
 8001f10:	08001fa8 	.word	0x08001fa8
 8001f14:	08001fac 	.word	0x08001fac

08001f18 <_init>:
 8001f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f1a:	bf00      	nop
 8001f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f1e:	bc08      	pop	{r3}
 8001f20:	469e      	mov	lr, r3
 8001f22:	4770      	bx	lr

08001f24 <_fini>:
 8001f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f26:	bf00      	nop
 8001f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f2a:	bc08      	pop	{r3}
 8001f2c:	469e      	mov	lr, r3
 8001f2e:	4770      	bx	lr
